{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SCION Tutorials Introduction This website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication. To get in touch: For questions and general comments on SCION-related topics, visit our SCION community Google group For bug reports, please post them on the scion-coord github site For suggestion on these pages, please post them on the scion-tutorials GitHub site Getting started SCION runs on a variety of platforms and works with different network configurations. We cover all approaches with tutorials. To choose the correct tutorial for your setup, follow the flowchart below to determine the number of the tutorial suited for you. After installation, we suggest exploring the tips and tricks section below to learn how to use the infrastructure. Running SCION infrastructure in a VM The easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps. 1) Running SCION VM over OpenVPN 2) Running SCION VM with static public IP Configuring SCION infrastructure manually The following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated host (without a VM). 1. Installing SCION on different platforms: 3) Installing SCION on Ubuntu 16.04 x86 4) Installing SCION on Ubuntu MATE 16.04 - Raspberry PI 5) Installing SCION on ARM minicomputers using prebuilt images 6) Installing SCION on an Android device 2. Setting up SCION topology Configuring local topology Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN Configuring SCION endhost Using SCION in projects Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application Webapp AS Visualization Webapp SCIONLab Apps Visualization Webapp Development Tips SCIONLab SIG testing Using rains SCION tips and tricks Verifying the installation Updating gen directory Updating SCION to a new version Adding Wireshark or Tshark dissector plugin SCION box specifics SCION box first steps","title":"Home"},{"location":"#welcome-to-scion-tutorials","text":"","title":"Welcome to SCION Tutorials"},{"location":"#introduction","text":"This website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication.","title":"Introduction"},{"location":"#to-get-in-touch","text":"For questions and general comments on SCION-related topics, visit our SCION community Google group For bug reports, please post them on the scion-coord github site For suggestion on these pages, please post them on the scion-tutorials GitHub site","title":"To get in touch:"},{"location":"#getting-started","text":"SCION runs on a variety of platforms and works with different network configurations. We cover all approaches with tutorials. To choose the correct tutorial for your setup, follow the flowchart below to determine the number of the tutorial suited for you. After installation, we suggest exploring the tips and tricks section below to learn how to use the infrastructure.","title":"Getting started"},{"location":"#running-scion-infrastructure-in-a-vm","text":"The easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps. 1) Running SCION VM over OpenVPN 2) Running SCION VM with static public IP","title":"Running SCION infrastructure in a VM"},{"location":"#configuring-scion-infrastructure-manually","text":"The following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated host (without a VM).","title":"Configuring SCION infrastructure manually"},{"location":"#1-installing-scion-on-different-platforms","text":"3) Installing SCION on Ubuntu 16.04 x86 4) Installing SCION on Ubuntu MATE 16.04 - Raspberry PI 5) Installing SCION on ARM minicomputers using prebuilt images 6) Installing SCION on an Android device","title":"1. Installing SCION on different platforms:"},{"location":"#2-setting-up-scion-topology","text":"Configuring local topology Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN Configuring SCION endhost","title":"2. Setting up SCION topology"},{"location":"#using-scion-in-projects","text":"Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application Webapp AS Visualization Webapp SCIONLab Apps Visualization Webapp Development Tips SCIONLab SIG testing Using rains","title":"Using SCION in projects"},{"location":"#scion-tips-and-tricks","text":"Verifying the installation Updating gen directory Updating SCION to a new version Adding Wireshark or Tshark dissector plugin","title":"SCION tips and tricks"},{"location":"#scion-box-specifics","text":"SCION box first steps","title":"SCION box specifics"},{"location":"as_visualization/webapp/","text":"Webapp AS Visualization Webapp Setup Webapp is a Go application that will serve up a static web portal to make it easy to visualize and experiment with SCIONLab test apps on a virtual machine. Build mkdir $GOPATH /src/github.com/netsec-ethz cd $GOPATH /src/github.com/netsec-ethz git clone https://github.com/netsec-ethz/scion-apps.git cd scion-apps Install To install webapp (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install Warning If the old scion-viz web server is running on your SCIONLab VM, port 8000 may still be in use. To remedy this, before vagrant up , make sure to edit your vagrantfile to provision an alternate port for the webapp web server. Add this line for a different port, say 8080 (for example, just choose any forwarding port not already in use by vagrant, and use that port everywhere below): config.vm.network \"forwarded_port\", guest: 8080, host: 8080, protocol: \"tcp\" To run the Go Web UI at a specific address (-a) and port (-p) like 0.0.0.0:8000 for a SCIONLab VM use: cd webapp webapp -a 0 .0.0.0 -p 8000 Now, open a web browser at http://127.0.0.1:8000 , to begin. Browser AS Visualizations Several menu options are available at the top of each webapp page, which are outlined below. Each of the features below use your SCIONLab IA the the source address. Health The Health tab is the landing page for webapp that will automatically test your SCIONLab configuration for configuration and communication health. Additional help is available in our troubleshooting guide , if needed. Apps The Apps tab provides a portal to SCIONLab Apps, and uses your Source IA and a Destination IA you specify to test with. Some default Destination IAs are already provided for you, but you can always change them and click Update Paths . Paths The announced paths will be displayed in a combined topology in the window. To view the details of a specific path expand the path's data by clicking on the path number in the window on right side. You may also view a global map of selected paths by clicking the Map switch. Execute See the SCIONLab Apps Visualization page for details about running SCIONLab Apps. Files The Files menu on the page will allow you to navigate and serve any files on the SCIONLab node from the root (-r) directory you specified (if any) when starting webapp.go. To browse the user directory, for example: webapp -a 0 .0.0.0 -p 8000 -r ~ AS Topology The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router. Tip The big circle can be clicked on as well to view details of the Source AS. ISD TRC AS Certificate Related Links Webapp SCIONLab Apps Visualization Webapp Development Tips Verifying the installation","title":"Webapp AS Visualization"},{"location":"as_visualization/webapp/#webapp-as-visualization","text":"","title":"Webapp AS Visualization"},{"location":"as_visualization/webapp/#webapp-setup","text":"Webapp is a Go application that will serve up a static web portal to make it easy to visualize and experiment with SCIONLab test apps on a virtual machine.","title":"Webapp Setup"},{"location":"as_visualization/webapp/#build","text":"mkdir $GOPATH /src/github.com/netsec-ethz cd $GOPATH /src/github.com/netsec-ethz git clone https://github.com/netsec-ethz/scion-apps.git cd scion-apps","title":"Build"},{"location":"as_visualization/webapp/#install","text":"To install webapp (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install Warning If the old scion-viz web server is running on your SCIONLab VM, port 8000 may still be in use. To remedy this, before vagrant up , make sure to edit your vagrantfile to provision an alternate port for the webapp web server. Add this line for a different port, say 8080 (for example, just choose any forwarding port not already in use by vagrant, and use that port everywhere below): config.vm.network \"forwarded_port\", guest: 8080, host: 8080, protocol: \"tcp\" To run the Go Web UI at a specific address (-a) and port (-p) like 0.0.0.0:8000 for a SCIONLab VM use: cd webapp webapp -a 0 .0.0.0 -p 8000 Now, open a web browser at http://127.0.0.1:8000 , to begin.","title":"Install"},{"location":"as_visualization/webapp/#browser-as-visualizations","text":"Several menu options are available at the top of each webapp page, which are outlined below. Each of the features below use your SCIONLab IA the the source address.","title":"Browser AS Visualizations"},{"location":"as_visualization/webapp/#health","text":"The Health tab is the landing page for webapp that will automatically test your SCIONLab configuration for configuration and communication health. Additional help is available in our troubleshooting guide , if needed.","title":"Health"},{"location":"as_visualization/webapp/#apps","text":"The Apps tab provides a portal to SCIONLab Apps, and uses your Source IA and a Destination IA you specify to test with. Some default Destination IAs are already provided for you, but you can always change them and click Update Paths .","title":"Apps"},{"location":"as_visualization/webapp/#paths","text":"The announced paths will be displayed in a combined topology in the window. To view the details of a specific path expand the path's data by clicking on the path number in the window on right side. You may also view a global map of selected paths by clicking the Map switch.","title":"Paths"},{"location":"as_visualization/webapp/#execute","text":"See the SCIONLab Apps Visualization page for details about running SCIONLab Apps.","title":"Execute"},{"location":"as_visualization/webapp/#files","text":"The Files menu on the page will allow you to navigate and serve any files on the SCIONLab node from the root (-r) directory you specified (if any) when starting webapp.go. To browse the user directory, for example: webapp -a 0 .0.0.0 -p 8000 -r ~","title":"Files"},{"location":"as_visualization/webapp/#as-topology","text":"The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router. Tip The big circle can be clicked on as well to view details of the Source AS.","title":"AS Topology"},{"location":"as_visualization/webapp/#isd-trc","text":"","title":"ISD TRC"},{"location":"as_visualization/webapp/#as-certificate","text":"","title":"AS Certificate"},{"location":"as_visualization/webapp/#related-links","text":"Webapp SCIONLab Apps Visualization Webapp Development Tips Verifying the installation","title":"Related Links"},{"location":"as_visualization/webapp_apps/","text":"Webapp SCIONLab Apps Visualization Webapp Features This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Two functional server tests are included to test the networks without needing specific sensor or camera hardware, imagetest and statstest . Supported client applications include camerapp , sensorapp , and bwtester . For best results, ensure the desired server-side apps are running and connected to the SCION network first. Instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps. bwtester Simply adjust the dials to the desired level, while the icon lock will allow you to keep one value constant. camerapp The retrieved image will appear scaled down and can be clicked on to open a larger size. sensorapp Related Links Webapp AS Visualization Webapp Development Tips Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Webapp SCIONLab Apps Visualization"},{"location":"as_visualization/webapp_apps/#webapp-scionlab-apps-visualization","text":"","title":"Webapp SCIONLab Apps Visualization"},{"location":"as_visualization/webapp_apps/#webapp-features","text":"This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Two functional server tests are included to test the networks without needing specific sensor or camera hardware, imagetest and statstest . Supported client applications include camerapp , sensorapp , and bwtester . For best results, ensure the desired server-side apps are running and connected to the SCION network first. Instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps.","title":"Webapp Features"},{"location":"as_visualization/webapp_apps/#bwtester","text":"Simply adjust the dials to the desired level, while the icon lock will allow you to keep one value constant.","title":"bwtester"},{"location":"as_visualization/webapp_apps/#camerapp","text":"The retrieved image will appear scaled down and can be clicked on to open a larger size.","title":"camerapp"},{"location":"as_visualization/webapp_apps/#sensorapp","text":"","title":"sensorapp"},{"location":"as_visualization/webapp_apps/#related-links","text":"Webapp AS Visualization Webapp Development Tips Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Related Links"},{"location":"as_visualization/webapp_development/","text":"Webapp Development Tips The webapp tool can be used to test several aspects of any local topology. See updating the latest source code and starting the server if you have not already. Local Topology Any local topology can be used with webapp , for example, the wide test topology: cd $SC ./scion.sh topology -c topology/Wide.topo Development Tips For developing the webapp application itself, since it is annoying to make several changes, only to have to start and stop the web server each time, a watcher library like go-watcher is recommended. go get github.com/canthefason/go-watcher go install github.com/canthefason/go-watcher/cmd/watcher After installation you can cd to the webapp.go directory and webapp will be rebuilt and rerun every time you save your source file changes, with or without command arguments. cd ~/go/src/github.com/netsec-ethz/scion-apps/webapp watcher -a 0 .0.0.0 -p 8080 -r .. or cd ~/go/src/github.com/netsec-ethz/scion-apps/webapp watcher Local Visualizations You can point the browser to your test locally and view paths, run SCIONLab client apps, examine certificates and more. Local SCIONLab App Servers This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Some functional server tests are included to test the networks without needing specific sensor or camera hardware, bwtestserver sensorserver and imageserver . The server address 1-ffaa:0:112,[127.0.0.2] is used below, but any address appropriate to your test will do. More instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps. bwtestserver This test will setup a local server to receive requests from the bandwidth tester. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/bwtester/bwtestserver go install bwtestserver.go bwtestserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :30100 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for bandwidth measurements. sensorserver This hardware-independent test will echo some remote machine stats from the Python script timereader.py , which is piped to the server for transmission to clients. On your remote SCION server node run (substituting your own address parameters): cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver go install sensorserver.go python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/timereader.py | sensorserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42003 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for remote sensor readings. imageserver This hardware-independent test will generate an image with some remote machine stats from the Go app local-image.go , which will be saved locally for transmission to clients. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver go install imageserver.go go run ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/webapp/tests/imgtest/imgserver/local-image.go imageserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42002 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for the most recently generated remote image. Related Links Webapp AS Visualization Webapp SCIONLab Apps Visualization Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Webapp Development Tips"},{"location":"as_visualization/webapp_development/#webapp-development-tips","text":"The webapp tool can be used to test several aspects of any local topology. See updating the latest source code and starting the server if you have not already.","title":"Webapp Development Tips"},{"location":"as_visualization/webapp_development/#local-topology","text":"Any local topology can be used with webapp , for example, the wide test topology: cd $SC ./scion.sh topology -c topology/Wide.topo","title":"Local Topology"},{"location":"as_visualization/webapp_development/#development-tips","text":"For developing the webapp application itself, since it is annoying to make several changes, only to have to start and stop the web server each time, a watcher library like go-watcher is recommended. go get github.com/canthefason/go-watcher go install github.com/canthefason/go-watcher/cmd/watcher After installation you can cd to the webapp.go directory and webapp will be rebuilt and rerun every time you save your source file changes, with or without command arguments. cd ~/go/src/github.com/netsec-ethz/scion-apps/webapp watcher -a 0 .0.0.0 -p 8080 -r .. or cd ~/go/src/github.com/netsec-ethz/scion-apps/webapp watcher","title":"Development Tips"},{"location":"as_visualization/webapp_development/#local-visualizations","text":"You can point the browser to your test locally and view paths, run SCIONLab client apps, examine certificates and more.","title":"Local Visualizations"},{"location":"as_visualization/webapp_development/#local-scionlab-app-servers","text":"This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Some functional server tests are included to test the networks without needing specific sensor or camera hardware, bwtestserver sensorserver and imageserver . The server address 1-ffaa:0:112,[127.0.0.2] is used below, but any address appropriate to your test will do. More instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps.","title":"Local SCIONLab App Servers"},{"location":"as_visualization/webapp_development/#bwtestserver","text":"This test will setup a local server to receive requests from the bandwidth tester. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/bwtester/bwtestserver go install bwtestserver.go bwtestserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :30100 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for bandwidth measurements.","title":"bwtestserver"},{"location":"as_visualization/webapp_development/#sensorserver","text":"This hardware-independent test will echo some remote machine stats from the Python script timereader.py , which is piped to the server for transmission to clients. On your remote SCION server node run (substituting your own address parameters): cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver go install sensorserver.go python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/timereader.py | sensorserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42003 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for remote sensor readings.","title":"sensorserver"},{"location":"as_visualization/webapp_development/#imageserver","text":"This hardware-independent test will generate an image with some remote machine stats from the Go app local-image.go , which will be saved locally for transmission to clients. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver go install imageserver.go go run ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/webapp/tests/imgtest/imgserver/local-image.go imageserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42002 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for the most recently generated remote image.","title":"imageserver"},{"location":"as_visualization/webapp_development/#related-links","text":"Webapp AS Visualization Webapp SCIONLab Apps Visualization Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Related Links"},{"location":"general_scion_configuration/influence_path_selection/","text":"Configuring path selection TBA","title":"Configuring path selection"},{"location":"general_scion_configuration/influence_path_selection/#configuring-path-selection","text":"TBA","title":"Configuring path selection"},{"location":"general_scion_configuration/join_infrastructure/","text":"Join the Infrastructure If you are part of an organization and/or you are committed to do research with SCION, and using user ASes is not enough for your plans, then you could join SCIONLab with a dedicated host. We have compiled a short guide to document the requirements. You can join the SCIONLab network as an infrastructure AS with one or more machines, or you can start as small as dedicating only a simple commodity PC. If you have decided to join SCIONLab as a permanent node in the infrastructure, check that your new node(s) can comply with the requirements. Then, just follow the procedure! Requirements There are a few requirements for you or your organization to join SCIONLab as an infrastructure node: Infrastructure ASes and nodes are required to be active 24 hours a day, 7 days a week. The SCIONLab administrators can typically handle all SCION related problems, but sometimes they will contact you if they cannot perform certain tasks. An example would be to change a drive if it failed, etc. The machine must have a minimum of 4 Gb of RAM. A VM can suffice, given sufficient resources. Currently the SCION code works with Ubuntu 16.04. The border router node(s) must have a public static IP. The following are the traffic types and the corresponding ports SCIONLab requires at this moment. SSH: TCP 22: source 192.33.96.0/20, 192.33.88.0/21, 192.33.87.0/24, 54.176.0.0/12 OpenVPN: UDP 1194: source any HTTP: TCP 8000: source any Monitoring: TCP 8080,9200,9900: source any Management: TCP 9100: source any Scion packet: UDP 50000~50010: source any Recommendations The following are not requirements, but recommendations: The border router should be near (latency wise) the IP border of your AS or organization. Co-locating the node or nodes in your datacenter is usually a good idea in terms of network latency. To join the SCION network, we have a specific hardware recommendation: HP Proliant DL20 gen9 . We further customize the machine with additional 8G ECC Ram and SSD, but a regular HDD also works. Instead of a blade type server machine, a regular PC with a similar spec works as well. Procedure You can connect to the SCIONLab infrastructure through the following steps: Get in contact with us. Send us an email to telling us you want to join the infrastructure. Once the node(s) are ready, create a user with the name scion and permission to run sudo . Grant the SCIONLab admins ssh access to the machine via a key for that scion user. The SCIONLab admins will perform some measurements to find the appropriate neighbors to your AS. We will notify you of the result. Once the neighboring ASes have been decided, the administrators will install the necessary services of SCION and monitoring. This is typically done by us using Ansible . We deploy the configuration of the node(s) in the AS at the same time. Your AS is now connected to the infrastructure of SCIONLab and hosts within your network now have direct access to SCIONLab.","title":"How to join the SCIONLab Infrastructure"},{"location":"general_scion_configuration/join_infrastructure/#join-the-infrastructure","text":"If you are part of an organization and/or you are committed to do research with SCION, and using user ASes is not enough for your plans, then you could join SCIONLab with a dedicated host. We have compiled a short guide to document the requirements. You can join the SCIONLab network as an infrastructure AS with one or more machines, or you can start as small as dedicating only a simple commodity PC. If you have decided to join SCIONLab as a permanent node in the infrastructure, check that your new node(s) can comply with the requirements. Then, just follow the procedure!","title":"Join the Infrastructure"},{"location":"general_scion_configuration/join_infrastructure/#requirements","text":"There are a few requirements for you or your organization to join SCIONLab as an infrastructure node: Infrastructure ASes and nodes are required to be active 24 hours a day, 7 days a week. The SCIONLab administrators can typically handle all SCION related problems, but sometimes they will contact you if they cannot perform certain tasks. An example would be to change a drive if it failed, etc. The machine must have a minimum of 4 Gb of RAM. A VM can suffice, given sufficient resources. Currently the SCION code works with Ubuntu 16.04. The border router node(s) must have a public static IP. The following are the traffic types and the corresponding ports SCIONLab requires at this moment. SSH: TCP 22: source 192.33.96.0/20, 192.33.88.0/21, 192.33.87.0/24, 54.176.0.0/12 OpenVPN: UDP 1194: source any HTTP: TCP 8000: source any Monitoring: TCP 8080,9200,9900: source any Management: TCP 9100: source any Scion packet: UDP 50000~50010: source any","title":"Requirements"},{"location":"general_scion_configuration/join_infrastructure/#recommendations","text":"The following are not requirements, but recommendations: The border router should be near (latency wise) the IP border of your AS or organization. Co-locating the node or nodes in your datacenter is usually a good idea in terms of network latency. To join the SCION network, we have a specific hardware recommendation: HP Proliant DL20 gen9 . We further customize the machine with additional 8G ECC Ram and SSD, but a regular HDD also works. Instead of a blade type server machine, a regular PC with a similar spec works as well.","title":"Recommendations"},{"location":"general_scion_configuration/join_infrastructure/#procedure","text":"You can connect to the SCIONLab infrastructure through the following steps: Get in contact with us. Send us an email to telling us you want to join the infrastructure. Once the node(s) are ready, create a user with the name scion and permission to run sudo . Grant the SCIONLab admins ssh access to the machine via a key for that scion user. The SCIONLab admins will perform some measurements to find the appropriate neighbors to your AS. We will notify you of the result. Once the neighboring ASes have been decided, the administrators will install the necessary services of SCION and monitoring. This is typically done by us using Ansible . We deploy the configuration of the node(s) in the AS at the same time. Your AS is now connected to the infrastructure of SCIONLab and hosts within your network now have direct access to SCIONLab.","title":"Procedure"},{"location":"general_scion_configuration/local_top/","text":"Running the SCION infrastructure on a local topology Introduction This tutorial will guide you through the steps required to generate a local topology and run a SCION network locally on your system. Prerequisites This tutorial assumes that SCION is already installed on your system. If this is not the case, please follow How to build SCION on Ubuntu 16.04 x86-64 or How to build SCION on Raspberry PI . Generating topology Before continuing with the following steps, you should first navigate to the SCION root directory: cd $SC The SCION installation comes with a command to generate the local topology from 'topo' configuration files. A default topology is defined in topology/Default.topo and it is depicted in the following figure: Creating a topology overwrites the existing installation When running the topology command deletes the current topology, which is stored in the gen folder. We thus advise to back up the current gen directory before calling the topology creation command. In case the gen folder was accidentally overwritten, you need to re-establish it after running the local topology if you want to get back to your previous installation. In case of re-creating the SCIONLab topology running in a VM, re-establishing is easy: shell cd $SC rm -rf gen cp -r /vagrant/gen . Reset runtime environment after topology changes Every time a new topology is instantiated, the SCION runtime environment needs to be reset as described here . To generate the default topology, you can run ./scion.sh topology This command will generate the topology information in the gen directory. The structure of the gen directory will be: ./gen/ISD{X}/AS{Y}/ {elem}{X}-{Y}-{Z}/ as.yml path_policy.yml supervisord.conf topology.yml certs/ ISD{X}-AS{Y}-V0.crt ISD{X}-V0.trc keys/ as-sig.key Running large topology Running the default SCION topology requires significant amount of system resources . This might not be possible on IoT devices like Raspberry PI or on a resource-limited virtual machine. For this reason, using a smaller topology is recommended. To generate a small topology with only a single ISD and 3 ASes, you can use the predefined definition of tiny topology as follows: ./scion.sh topology -c topology/Tiny.topo Some notes about the topology definition in topology/Default.topo defaults.subnet (optional): override the default subnet of 127.0.0.0/8 . core (optional): specify if this is a core AS or not (defaults to 'false'). beacon_servers , certificate_servers , path_servers , (all optional): number of such servers in a specific AS (override the default value 1). links : keys are ISD_ID-AS_ID (format also used for the keys of the JSON file itself) and values can either be PARENT , CHILD , PEER , or CORE . Running SCION Running the SCION infrastructure: ./scion.sh run Stopping the SCION infrastructure: ./scion.sh stop Testing the infrastructure: ./scion.sh test Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Running SCION on a local topology"},{"location":"general_scion_configuration/local_top/#running-the-scion-infrastructure-on-a-local-topology","text":"","title":"Running the SCION infrastructure on a local topology"},{"location":"general_scion_configuration/local_top/#introduction","text":"This tutorial will guide you through the steps required to generate a local topology and run a SCION network locally on your system.","title":"Introduction"},{"location":"general_scion_configuration/local_top/#prerequisites","text":"This tutorial assumes that SCION is already installed on your system. If this is not the case, please follow How to build SCION on Ubuntu 16.04 x86-64 or How to build SCION on Raspberry PI .","title":"Prerequisites"},{"location":"general_scion_configuration/local_top/#generating-topology","text":"Before continuing with the following steps, you should first navigate to the SCION root directory: cd $SC The SCION installation comes with a command to generate the local topology from 'topo' configuration files. A default topology is defined in topology/Default.topo and it is depicted in the following figure: Creating a topology overwrites the existing installation When running the topology command deletes the current topology, which is stored in the gen folder. We thus advise to back up the current gen directory before calling the topology creation command. In case the gen folder was accidentally overwritten, you need to re-establish it after running the local topology if you want to get back to your previous installation. In case of re-creating the SCIONLab topology running in a VM, re-establishing is easy: shell cd $SC rm -rf gen cp -r /vagrant/gen . Reset runtime environment after topology changes Every time a new topology is instantiated, the SCION runtime environment needs to be reset as described here . To generate the default topology, you can run ./scion.sh topology This command will generate the topology information in the gen directory. The structure of the gen directory will be: ./gen/ISD{X}/AS{Y}/ {elem}{X}-{Y}-{Z}/ as.yml path_policy.yml supervisord.conf topology.yml certs/ ISD{X}-AS{Y}-V0.crt ISD{X}-V0.trc keys/ as-sig.key Running large topology Running the default SCION topology requires significant amount of system resources . This might not be possible on IoT devices like Raspberry PI or on a resource-limited virtual machine. For this reason, using a smaller topology is recommended. To generate a small topology with only a single ISD and 3 ASes, you can use the predefined definition of tiny topology as follows: ./scion.sh topology -c topology/Tiny.topo Some notes about the topology definition in topology/Default.topo defaults.subnet (optional): override the default subnet of 127.0.0.0/8 . core (optional): specify if this is a core AS or not (defaults to 'false'). beacon_servers , certificate_servers , path_servers , (all optional): number of such servers in a specific AS (override the default value 1). links : keys are ISD_ID-AS_ID (format also used for the keys of the JSON file itself) and values can either be PARENT , CHILD , PEER , or CORE .","title":"Generating topology"},{"location":"general_scion_configuration/local_top/#running-scion","text":"Running the SCION infrastructure: ./scion.sh run Stopping the SCION infrastructure: ./scion.sh stop Testing the infrastructure: ./scion.sh test","title":"Running SCION"},{"location":"general_scion_configuration/local_top/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"general_scion_configuration/public_ip/","text":"Connecting to SCIONLab with a static public IP address Note This page needs to be updated. Use with care. Introduction This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you have a static public IP address and that your machine can receive UDP traffic from the Internet on port 50000. If this is not the case, please follow Connecting to SCION Lab over OpenVPN Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial . Prerequisites In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here. Step One - downloading SCION Lab configuration In order to download necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure running a SCION infrastructure on a native system. After logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archived content: cd ~/Downloads tar -xvzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need the directory gen , which contains the SCION infrastructure configuration. Step Two - copying SCION Lab configuration Before copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC /gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC / cd $SC Step Three - Restarting SCION infrastructure After the new configuration is copied, you need to restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Set up an AS and connect to the SCION network"},{"location":"general_scion_configuration/public_ip/#connecting-to-scionlab-with-a-static-public-ip-address","text":"Note This page needs to be updated. Use with care.","title":"Connecting to SCIONLab with a static public IP address"},{"location":"general_scion_configuration/public_ip/#introduction","text":"This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you have a static public IP address and that your machine can receive UDP traffic from the Internet on port 50000. If this is not the case, please follow Connecting to SCION Lab over OpenVPN Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial .","title":"Introduction"},{"location":"general_scion_configuration/public_ip/#prerequisites","text":"In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.","title":"Prerequisites"},{"location":"general_scion_configuration/public_ip/#step-one-downloading-scion-lab-configuration","text":"In order to download necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure running a SCION infrastructure on a native system. After logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archived content: cd ~/Downloads tar -xvzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need the directory gen , which contains the SCION infrastructure configuration.","title":"Step One - downloading SCION Lab configuration"},{"location":"general_scion_configuration/public_ip/#step-two-copying-scion-lab-configuration","text":"Before copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC /gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC / cd $SC","title":"Step Two - copying SCION Lab configuration"},{"location":"general_scion_configuration/public_ip/#step-three-restarting-scion-infrastructure","text":"After the new configuration is copied, you need to restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Step Three - Restarting SCION infrastructure"},{"location":"general_scion_configuration/public_ip/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"general_scion_configuration/public_ip_nat/","text":"Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a Network Address Translation (NAT) device Introduction If your machine was configured as a VM following the steps described in the tutorial for a virtual machine with static public IP you don't need to do anything and you can skip this tutorial altogether. If your machine is not a VM, it should be set up as described in the tutorial of the host with a public IP address and the changes described below need to be applied before doing further changes to the topology (like adding interfaces or border routers). Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made. Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial . Setup The first step is to find out the internal IP address of your host, as well as the external IP address outside the NAT. Several web sites offer a service that displays the external IP address of a host, for instance whatismyip . You will need to provide the displayed IPv4 address on the SCIONLab web site in the second step. The internal IPv4 address can be found with ifconfig and spotting the address of the main network connection. The second step is to complete Steps 1 and 2 of the installation of the basic system as explained in the earlier tutorial of the host with a public IP address , using the external IP address found in the previous step. The third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the topology.json file in your gen folder, for instance at this location: gen/ISD1/AS1026/br1-1026-1/ , adjusting the ISD and AS numbers to your case. In that file, search for the term Remote , which specifies the IP address and UDP port from which the connecting packets originate. Hint Some networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device). The fourth step re-maps the IP address of the SCION infrastructure devices to the internal address of your host. For this, you can execute the following command from your main SCION directory ( cd $SC to get there), replacing 192.168.1.24 with the internal IPv4 address of your host. BIND_IP = 192 .168.1.24 ; for f in $( find gen -name topology.json ) ; do jq .BorderRouters[].Interfaces[]|=(.BindOverlay={Addr:\\ $BIND_IP \\ , OverlayPort:.PublicOverlay.OverlayPort}) $f $f .tmp mv $f .tmp $f ; done This completes the installation! You can restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Set up an AS and connect to the SCION network behind a NAT"},{"location":"general_scion_configuration/public_ip_nat/#connecting-to-scionlab-where-the-network-has-a-static-public-ip-address-but-the-machine-itself-is-behind-a-network-address-translation-nat-device","text":"","title":"Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a Network Address Translation (NAT) device"},{"location":"general_scion_configuration/public_ip_nat/#introduction","text":"If your machine was configured as a VM following the steps described in the tutorial for a virtual machine with static public IP you don't need to do anything and you can skip this tutorial altogether. If your machine is not a VM, it should be set up as described in the tutorial of the host with a public IP address and the changes described below need to be applied before doing further changes to the topology (like adding interfaces or border routers). Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made. Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial .","title":"Introduction"},{"location":"general_scion_configuration/public_ip_nat/#setup","text":"The first step is to find out the internal IP address of your host, as well as the external IP address outside the NAT. Several web sites offer a service that displays the external IP address of a host, for instance whatismyip . You will need to provide the displayed IPv4 address on the SCIONLab web site in the second step. The internal IPv4 address can be found with ifconfig and spotting the address of the main network connection. The second step is to complete Steps 1 and 2 of the installation of the basic system as explained in the earlier tutorial of the host with a public IP address , using the external IP address found in the previous step. The third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the topology.json file in your gen folder, for instance at this location: gen/ISD1/AS1026/br1-1026-1/ , adjusting the ISD and AS numbers to your case. In that file, search for the term Remote , which specifies the IP address and UDP port from which the connecting packets originate. Hint Some networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device). The fourth step re-maps the IP address of the SCION infrastructure devices to the internal address of your host. For this, you can execute the following command from your main SCION directory ( cd $SC to get there), replacing 192.168.1.24 with the internal IPv4 address of your host. BIND_IP = 192 .168.1.24 ; for f in $( find gen -name topology.json ) ; do jq .BorderRouters[].Interfaces[]|=(.BindOverlay={Addr:\\ $BIND_IP \\ , OverlayPort:.PublicOverlay.OverlayPort}) $f $f .tmp mv $f .tmp $f ; done This completes the installation! You can restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Setup"},{"location":"general_scion_configuration/public_ip_nat/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"general_scion_configuration/setup_endhost/","text":"Set up SCION endhost and connect to local AS infrastructure Introduction In this tutorial we will cover the steps necessary to configure a SCION endhost that will connect to an already running SCION AS. This is useful in situations where your host can take advantage of an existing local SCION infrastructure. Depending on how the SCION AS is set up, the steps for configuring the endhost will slightly differ. Running AS infrastructure executes in a VM In the first way, the SCION AS runs inside a virtual machine (VM). The following figure depicts this scenario. The installation steps of the AS are covered in the following tutorials: Running SCION VM with dynamic IP Running SCION VM with static IP Running AS infrastructure natively on a system In the second way, the SCION AS is executing natively on a host machine. The following figure depicts this scenario. The installation steps for this setup is described in the following tutorial pages: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN Prerequisites Throughout this setup we will use host and endhost IP addresses on both machines. In order to make everything easier to follow it is necessary to create two environment variables HOST_IP and ENDHOST_IP with respective addresses on both machines as they will be used throughout this setup. Execute following commands replacing correct IP addresses with correct ones: export HOST_IP = 10.42.0.1 export ENDHOST_IP = 10.42.0.180 Step One - Installing SCION on endhost Any platform that runs SCION can be used as an endhost. To install SCION on different platforms you can follow one of the tutorials: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Also, SCION VMs can be configured to be used as endhost. Step Two - Copy initial configuration After the SCION environment is successfully installed on your endhost device, we can start the configuration process. First of all, we need to stop the currently running SCION environment and remove the old gen directory. cd $SC ./scion.sh stop rm -rf gen The next step is to make sure both endhost and SCION AS share the same AS configuration, i.e., the same gen directory. This can be done in several ways, but the easiest is to copy it directly from the AS system. Executing the following command from SCION AS copies the complete gen directory to endhost. Note that you will need to replace endhost_user with appropriate user name on the endhost. scp -r ${ SC } /gen endhost_user@ ${ ENDHOST_IP } :/home/endhost_user/go/src/github.com/scionproto/scion/gen Step Three - Remove unnecessary services The next step is to disable unnecessary SCION services, like the border router, beacon server, etc., on the endhost device. This can be done by editing configuration file on the endhost's system : vim $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/supervisord.conf It is sufficient to remove last 2 lines that look similar to this: [group:as17-ffaa_1_a] programs = br17-ffaa_1_a-1,bs17-ffaa_1_a-1,cs17-ffaa_1_a-1,ps17-ffaa_1_a-1,sd17-ffaa_1_a We need to tell the endhost's sciond about its address. For that edit the file on the endhost's system : vim $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/endhost/sciond.toml In that file, you will find a section that starts with [sd] and looks similar to this: [sd] Reliable = /run/shm/sciond/default.sock Public = 17-ffaa:1:a,[127.0.0.1]:0 Unix = /run/shm/sciond/default.unix In that section substitute the 'Public' line with the following one: Public = 17-ffaa:1:a,[10.42.0.180]:0 Ensure you replace 17-ffaa:1:a with your AS's IA, and 10.42.0.180 with the correct endhost's IP address. As you can see, you just specified the public IP of your endhost. Next we need to remove all directories except endhost from $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/ directory. cd $SC /gen/ISD { ISD_NUMBER } /AS { AS_NUMBER } rm -rf *-* Step Four - Iptable rules Warning This step is only necessary if you are running the AS SCION infrastructure inside a Virtual Machine . If this is not the case, proceed to step five. Configuration files we copied from VM in first step contain address 10.0.2.15 . This address is not accessible outside the VM and we need to rewrite it to the host's IP address, so that packets get routed correctly. This can be done with iptables. sudo apt install netfilter-persistent iptables-persistent sudo iptables -t nat -A OUTPUT -m udp -p udp -d 10 .0.2.15 -j DNAT --to-destination ${ HOST_IP } sudo netfilter-persistent save Step Five - Restart SCION Last step is to reload configuration and restart SCION on your endhost system. ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps The best way to verify endhost configuration is by running properly is by running some demo applications: Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application SCIONLab Webapp Visualization","title":"Set up SCION endhost and connect to local AS"},{"location":"general_scion_configuration/setup_endhost/#set-up-scion-endhost-and-connect-to-local-as-infrastructure","text":"","title":"Set up SCION endhost and connect to local AS infrastructure"},{"location":"general_scion_configuration/setup_endhost/#introduction","text":"In this tutorial we will cover the steps necessary to configure a SCION endhost that will connect to an already running SCION AS. This is useful in situations where your host can take advantage of an existing local SCION infrastructure. Depending on how the SCION AS is set up, the steps for configuring the endhost will slightly differ.","title":"Introduction"},{"location":"general_scion_configuration/setup_endhost/#running-as-infrastructure-executes-in-a-vm","text":"In the first way, the SCION AS runs inside a virtual machine (VM). The following figure depicts this scenario. The installation steps of the AS are covered in the following tutorials: Running SCION VM with dynamic IP Running SCION VM with static IP","title":"Running AS infrastructure executes in a VM"},{"location":"general_scion_configuration/setup_endhost/#running-as-infrastructure-natively-on-a-system","text":"In the second way, the SCION AS is executing natively on a host machine. The following figure depicts this scenario. The installation steps for this setup is described in the following tutorial pages: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN","title":"Running AS infrastructure natively on a system"},{"location":"general_scion_configuration/setup_endhost/#prerequisites","text":"Throughout this setup we will use host and endhost IP addresses on both machines. In order to make everything easier to follow it is necessary to create two environment variables HOST_IP and ENDHOST_IP with respective addresses on both machines as they will be used throughout this setup. Execute following commands replacing correct IP addresses with correct ones: export HOST_IP = 10.42.0.1 export ENDHOST_IP = 10.42.0.180","title":"Prerequisites"},{"location":"general_scion_configuration/setup_endhost/#step-one-installing-scion-on-endhost","text":"Any platform that runs SCION can be used as an endhost. To install SCION on different platforms you can follow one of the tutorials: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Also, SCION VMs can be configured to be used as endhost.","title":"Step One - Installing SCION on endhost"},{"location":"general_scion_configuration/setup_endhost/#step-two-copy-initial-configuration","text":"After the SCION environment is successfully installed on your endhost device, we can start the configuration process. First of all, we need to stop the currently running SCION environment and remove the old gen directory. cd $SC ./scion.sh stop rm -rf gen The next step is to make sure both endhost and SCION AS share the same AS configuration, i.e., the same gen directory. This can be done in several ways, but the easiest is to copy it directly from the AS system. Executing the following command from SCION AS copies the complete gen directory to endhost. Note that you will need to replace endhost_user with appropriate user name on the endhost. scp -r ${ SC } /gen endhost_user@ ${ ENDHOST_IP } :/home/endhost_user/go/src/github.com/scionproto/scion/gen","title":"Step Two - Copy initial configuration"},{"location":"general_scion_configuration/setup_endhost/#step-three-remove-unnecessary-services","text":"The next step is to disable unnecessary SCION services, like the border router, beacon server, etc., on the endhost device. This can be done by editing configuration file on the endhost's system : vim $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/supervisord.conf It is sufficient to remove last 2 lines that look similar to this: [group:as17-ffaa_1_a] programs = br17-ffaa_1_a-1,bs17-ffaa_1_a-1,cs17-ffaa_1_a-1,ps17-ffaa_1_a-1,sd17-ffaa_1_a We need to tell the endhost's sciond about its address. For that edit the file on the endhost's system : vim $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/endhost/sciond.toml In that file, you will find a section that starts with [sd] and looks similar to this: [sd] Reliable = /run/shm/sciond/default.sock Public = 17-ffaa:1:a,[127.0.0.1]:0 Unix = /run/shm/sciond/default.unix In that section substitute the 'Public' line with the following one: Public = 17-ffaa:1:a,[10.42.0.180]:0 Ensure you replace 17-ffaa:1:a with your AS's IA, and 10.42.0.180 with the correct endhost's IP address. As you can see, you just specified the public IP of your endhost. Next we need to remove all directories except endhost from $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/ directory. cd $SC /gen/ISD { ISD_NUMBER } /AS { AS_NUMBER } rm -rf *-*","title":"Step Three - Remove unnecessary services"},{"location":"general_scion_configuration/setup_endhost/#step-four-iptable-rules","text":"Warning This step is only necessary if you are running the AS SCION infrastructure inside a Virtual Machine . If this is not the case, proceed to step five. Configuration files we copied from VM in first step contain address 10.0.2.15 . This address is not accessible outside the VM and we need to rewrite it to the host's IP address, so that packets get routed correctly. This can be done with iptables. sudo apt install netfilter-persistent iptables-persistent sudo iptables -t nat -A OUTPUT -m udp -p udp -d 10 .0.2.15 -j DNAT --to-destination ${ HOST_IP } sudo netfilter-persistent save","title":"Step Four - Iptable rules"},{"location":"general_scion_configuration/setup_endhost/#step-five-restart-scion","text":"Last step is to reload configuration and restart SCION on your endhost system. ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Step Five - Restart SCION"},{"location":"general_scion_configuration/setup_endhost/#next-steps","text":"The best way to verify endhost configuration is by running properly is by running some demo applications: Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application SCIONLab Webapp Visualization","title":"Next steps"},{"location":"general_scion_configuration/setup_sig/","text":"Configuring SCION IP Gateway TBA","title":"Configuring SCION IP Gateway"},{"location":"general_scion_configuration/setup_sig/#configuring-scion-ip-gateway","text":"TBA","title":"Configuring SCION IP Gateway"},{"location":"general_scion_configuration/troubleshooting/","text":"Troubleshooting a SCIONLab installation To reduce frustration from our users and to allow anybody to attempt to identify issues at their own pace, we have compiled this small troubleshooting guide. If it does not help you solve all the problems, and you have followed the steps, please contact us The simplest case to configure, and the one we treat here, is configuring an AS within a VM, using VPN. If you are testing a different case, please try first with this one and then attempt troubleshooting your specific configuration. I have configured a Virtual Machine with VPN We will first check if the Coordinator has given you the appropriate contents, then run the Virtual Machine, log into it, check that the VPN is okay, that SCION is running, has connectivity, and finally, that we are able to request paths. Check Tarball File and Contents After uncompressing your tar file you should see a structure like below. The 17-ffaa_1_64 is the AS ID we are configuring, in your case it will be another one: $ tar xf scion_lab_user@example.com_17-ffaa_1_64.tar.gz $ ls user@example.com_17-ffaa_1_64 scion_lab_user@example.com_17-ffaa_1_64.tar.gz $ cd user@example.com_17-ffaa_1_64/ $ pwd /home/user/Downloads/user@example.com_17-ffaa_1_64/ $ ls client.conf gen README.md run.sh scion.service scionupgrade.service scionupgrade.sh scionupgrade.timer scion-viz.service Vagrantfile The pwd command indicates in which directory the terminal prompt is working (the working directory ). In your case it will be something different than /home/user/Downloads/user@example.com_17-ffaa_1_64/ but ending in a directory that represents your user and the AS ID you configured ( user@example.com_17-ffaa_1_64 ). Pay attention to the contents of the directory. In particular, if the client.conf , Vagrantfile files or the gen directory are missing, double check that you have configured the AS as a Virtual Machine using VPN, and click on \"Update and Download SCIONLab AS Configuration\". If after this you still do not see the mentioned files, please open a bug report Run the Virtual Machine The script run.sh will check for you the versions of Virtualbox and Vagrant installed in your system, and install them if needed. Although not necessary, you can perform this step manually if you wish to: $ vagrant --version Vagrant 2 .1.1 If your version is lower than 1.9 or not installed at all, please install it: $ sudo apt-get install --only-upgrade vagrant We recommend virtualbox version 5.2 with your Ubuntu 16.04 installation. Since it is not available in the default repositories, you would have to uninstall your current virtualbox version (if any) and then install the recommended one: $ wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - $ wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add - $ sudo sh -c echo deb http://download.virtualbox.org/virtualbox/debian xenial contrib /etc/apt/sources.list.d/virtualbox.list $ sudo apt remove virtualbox virtualbox-5.1 $ sudo apt-get --no-remove --yes install virtualbox-5.2 To automatically do all this and start your virtual machine, run the script run.sh . It will output many lines, but you just have to look at the last line: $ pwd /home/user/Downloads/user@example.com_17-ffaa_1_64/ $ ./run.sh . . . ubuntu@ubuntu-xenial:~$ The last line is the prompt of the virtual machine itself, and seeing it means that we have successfully started the VM, and already logged into it. Skip to step Check VPN . If you don't see this and are still in the host machine, run: $ echo $? 0 Anything different than 0 means a problem has occurred with running your VM. A 0 means the virtual machine is now running; skip to step Log in the Virtual Machine . If you experience an error mentioning that Vagrant cannot forward the specified port, please shut down all of your running virtual machines. Keep reading for more information. The error would look similar to this: $ vagrant up Bringing machine default up with virtualbox provider... == default: Checking if box scion/ubuntu-16.04-64-scion is up to date... == default: Clearing any previously set forwarded ports... Vagrant cannot forward the specified ports on this VM, since they would collide with some other application that is already listening on these ports. The forwarded port to 8000 is already in use on the host machine. To fix this, modify your current project s Vagrantfile to use another port. Example, where 1234 would be replaced by a unique host port: config.vm.network :forwarded_port, guest: 8000, host: 1234 Sometimes, Vagrant will attempt to auto-correct this for you. In this case, Vagrant was unable to. This is usually because the guest machine is in a state which doesn t allow modifying port forwarding. You could try vagrant reload ( equivalent of running a halt followed by an up ) so vagrant can attempt to auto-correct this upon booting. Be warned that any unsaved work might be lost. To proceed, please open your VirtualBox Manager and stop any running virtual machines to continue troubleshooting this step. Tip Find out how many virtual machines you have running by typing in the terminal VBoxManage list runningvms . If you are in doubt on how to stop the running virtual machines, you can always reboot your host machine to ensure none are running. After stopping all running virtual machines, and being in the extracted directory, remove your virtual machine completely: $ VBoxManage list runningvms # VBoxManage prints nothing because no VM running $ pwd /home/user/Downloads/user@example.com_17-ffaa_1_64/ vagrant destroy -f . . . $ echo $? 0 This destroys your virtual machine so you can recreate it again from scratch. You can go now again to the step Run the Virtual Machine . If you had tried previously to remove all virtual machines and still see an error running run.sh , please contact us Log in the Virtual Machine After running run.sh you should be presented with the prompt from the virtual machine. If not, you can simply connect to it: $ vagrant ssh . . . ubuntu@ubuntu-xenial:~$ If you cannot get into the virtual machine, please contact us . To be sure we will check now the free space on the virtual machine virtual disk: ubuntu@ubuntu-xenial:~$ df -h Filesystem Size Used Avail Use% Mounted on udev 487M 0 487M 0 % /dev tmpfs 100M 6 .8M 93M 7 % /run /dev/sda1 9 .7G 4 .9G 4 .8G 51 % / tmpfs 497M 99M 398M 20 % /dev/shm tmpfs 5 .0M 0 5 .0M 0 % /run/lock tmpfs 497M 0 497M 0 % /sys/fs/cgroup vagrant 451G 51G 401G 12 % /vagrant tmpfs 100M 0 100M 0 % /run/user/1000 Interesting for us is the line /dev/sda1 9.7G 4.9G 4.8G 51% / because it refers to / (last column). Look for a similar entry from your output and check that on the Avail column you have at least 2G (2 gigabytes). Otherwise destroy your virtual machine and create a new one . Your host machine should have enough memory to launch a virtual machine requesting two gigabytes of free memory (we configure SCIONLab virtual machines to use two gigabytes of memory). Ensure that you have enough free memory in your host and that in the VM you see the expected free memory amount: ubuntu@ubuntu-xenial:~$ free -h total used free shared buff/cache available Mem: 2 .0G 271M 1 .2G 3 .1M 499M 1 .5G Swap: 0B 0B 0B The line Mem: 2.0G 271M 1.2G 3.1M 499M 1.5G tells us that there are two gigabytes of memory in total. If you don't have two gigabytes (and did not edit your Vagrantfile yourself), please contact us . Check VPN Our setup is using VPN to connect to the Attachment Point in the SCIONLab infrastructure. We should be able to see the VPN tunnel interface when inside the VM: ubuntu@ubuntu-xenial:~$ ip a 1 : lo: LOOPBACK,UP,LOWER_UP mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp0s3: BROADCAST,MULTICAST,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 02 :b9:83:f0:a4:db brd ff:ff:ff:ff:ff:ff inet 10 .0.2.15/24 brd 10 .0.2.255 scope global enp0s3 valid_lft forever preferred_lft forever inet6 fe80::b9:83ff:fef0:a4db/64 scope link valid_lft forever preferred_lft forever 3 : tun0: POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10 .0.8.8/24 brd 10 .0.8.255 scope global tun0 valid_lft forever preferred_lft forever The lines we are interested in are the last ones, that refer to the tun0 interface. We can read them again: 3 : tun0: POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10 .0.8.8/24 brd 10 .0.8.255 scope global tun0 valid_lft forever preferred_lft forever It tells us that the virtual machine has a tun0 interface with IP address 10.0.8.8 . If you don't see this tun0 interface, you are probably behind a firewall that does not allow UDP traffic on port 1194 . Please check your /var/log/syslog to find out if there had been a timeout while trying to establish the openvpn connection (search for ovpn-client in the /var/log/syslog file). If you find out that the tun0 interface was not brought up because timeouts between your client and the VPN server, it is an indication that a firewall is filtering the traffic: please contact your IT service to add an exception for your machine and port 1194 . Also, you can contact us to find out if we can do something about that. Now, we will verify that the IP address obtained here corresponds to the one the Coordinator believes this VM should obtain. We will simply check the topology file and look for this IP address. Let's look at one topology file. For completeness we show the whole file here, but we only need to find the string containing the tun0 address; from our previous example we look for 10.0.8.8 . We find it inside the BourderRouters block as the PublicOverlay address for the only border router interface we have, as expected. ubuntu@ubuntu-xenial:~$ cat $SC/gen/ISD 17 /ASffaa_ 1 _ 64 /cs 17 -ffaa_ 1 _ 64-1 /topology.json { PathService : { ps17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31044 } } } } }, CertificateService : { cs17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31043 } } } } }, ISD_AS : 17-ffaa:1:64 , SibraService : { sb17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31045 } } } } }, Overlay : UDP/IPv4 , DiscoveryService : {}, MTU : 1472 , BeaconService : { bs17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31041 } } } } }, Core : false , ZookeeperService : { 1 : { Addr : 127.0.0.1 , L4Port : 2181 } }, BorderRouters : { br17-ffaa_1_64-1 : { InternalAddrs : { IPv4 : { PublicOverlay : { Addr : 10.0.2.15 , OverlayPort : 31042 } } }, CtrlAddr : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 30042 } } }, Interfaces : { 1 : { Bandwidth : 1000 , ISD_AS : 17-ffaa:0:1107 , MTU : 1472 , Overlay : UDP/IPv4 , PublicOverlay : { Addr : 10.0.8.8 , OverlayPort : 50000 }, RemoteOverlay : { Addr : 10.0.8.1 , OverlayPort : 50202 }, LinkTo : PARENT } } } } } If you find your tun0 IP address to be the same as in the PublicOverlay part of the BorderRouter blocks, please continue to step Check SCION is running . If you did not find the tun0 IP address in your topology file, we will destroy the existing virtual machine and remove its settings by first logging out of it and then running the steps described in the snippet vagrant destroy . After destroying the virtual machine, we can delete its configuration: $ vagrant destroy -f . . . $ cd .. $ pwd /home/user/Downloads/ $ rm -r user@example.com_17-ffaa_1_64 Now check in the Coordinator webpage that your AS is correctly attached to your AP of choice, and that you are using the right tarball file. If in doubt, you can always click on Re-download my SCIONLab AS Configuration to get it again. Re-download does not configure the AS, but returns the latest configuration the Coordinator has for it. Wait 15 minutes (the reason being sometimes the attachment point needs 15 minutes to process your request). You should have received an email stating the success of your request. In the hopefully successful state, start again from the checking tarbal step . If after waiting these 15 minutes you did not receive the success email, or you received it but still don't see the same IP address in the tun0 interface as in the topology file, contact us . Check SCION is running We are going to check now that all SCION processes are running. Once logged in the VM, run this: ubuntu@ubuntu-xenial:~$ cd $SC ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh status ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ As a general rule, scion.sh status should not print any messages. Output from that command indicates problems with the SCION services. If your execution returned a message, there is probably a problem. Stop and start SCION again to retry just once more: ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh stop Terminating this run of the SCION infrastructure dispatcher: stopped as17-ffaa_1_64:sd17-ffaa_1_64: stopped as17-ffaa_1_64:br17-ffaa_1_64-1: stopped as17-ffaa_1_64:cs17-ffaa_1_64-1: stopped as17-ffaa_1_64:ps17-ffaa_1_64-1: stopped as17-ffaa_1_64:bs17-ffaa_1_64-1: stopped ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh start Compiling... Running the network... dispatcher: started as17-ffaa_1_64:sd17-ffaa_1_64: started as17-ffaa_1_64:br17-ffaa_1_64-1: started as17-ffaa_1_64:bs17-ffaa_1_64-1: started as17-ffaa_1_64:cs17-ffaa_1_64-1: started as17-ffaa_1_64:ps17-ffaa_1_64-1: started ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh status ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ If now the scion.sh status command still prints messages (whether the same or different ones than before), please contact us , copying that output on the message. You should at this stage check the AS ID in the virtual machine, and ensure it corresponds to the one you expect. In our case, we expect to see the AS ID 17-ffaa_1_64 : ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ cat $SC /gen/ia 17 -ffaa_1_64ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ The output indicates 17-ffaa_1_64 , which is okay, because the ia file replaces : with _ . If not, you probably ran the virtual machine from the wrong uncompressed tarball. Check again starting in step Check Tarball File and Contents . Otherwise, contact us . The last step is only for sanity: SCION services communicate among themselves using socket files. The following default.sock files should be present in your VM, as shown below: ubuntu@ubuntu-xenial:~$ ll /run/shm/ total 0 drwxrwxrwt 5 root root 100 Sep 27 15 :53 ./ drwxr-xr-x 16 root root 3620 Sep 27 15 :53 ../ drwxr-xr-x 3 ubuntu ubuntu 80 Sep 28 09 :32 dispatcher/ drwxr-xr-x 3 zookeeper zookeeper 60 Sep 27 15 :53 host-zk/ drwxr-xr-x 2 ubuntu ubuntu 60 Sep 28 09 :32 sciond/ ubuntu@ubuntu-xenial:~$ ll /run/shm/sciond/ total 0 drwxr-xr-x 2 ubuntu ubuntu 60 Sep 28 09 :32 ./ drwxrwxrwt 5 root root 100 Sep 27 15 :53 ../ srwxr-xr-x 1 ubuntu ubuntu 0 Sep 28 09 :32 default.sock = ubuntu@ubuntu-xenial:~$ ll /run/shm/dispatcher/ total 0 drwxr-xr-x 3 ubuntu ubuntu 80 Sep 28 09 :32 ./ drwxrwxrwt 5 root root 100 Sep 27 15 :53 ../ srwxr-xr-x 1 ubuntu ubuntu 0 Sep 28 09 :32 default.sock = drwxr-xr-x 2 ubuntu ubuntu 60 Sep 28 09 :32 lwip/ ubuntu@ubuntu-xenial:~$ If there are no sciond or dispatcher directories, or if they don't contain a default.sock file, please contact us . Check Request Paths. Every AS should be able to reach any other AS if there exist at least a path. We will start by checking that your VM running the services for your AS is able to obtain paths to some well-known ASes: ubuntu@ubuntu-xenial:~$ cd $SC ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./bin/showpaths -srcIA 17 -ffaa:1:64 -dstIA 17 -ffaa:0:1101 INFO [ 09 -28 | 12 :47:16 ] Started id = 595ed707 goroutine = dispatcher_bck Available paths to 17 -ffaa:0:1101 [ 0 ] Hops: [ 17 -ffaa:1:64 1 16 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 2 2 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 ] Mtu: 1472 [ 1 ] Hops: [ 17 -ffaa:1:64 1 16 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 3 3 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 ] Mtu: 1472 Replace 17-ffaa:1:64 with the IA of your AS (the normal IA contains : , not _ ). You can check paths to reach 17-ffaa:0:1101 because it is an important AS and should always be present in the network. There must always be at least one path. If you don't see paths, go to step Check SCION Connectivity and repeat this check about getting paths afterwards. On the other hand, if you were able to obtain paths, using the control plane to send echo messages should work: ubuntu@ubuntu-xenial:~$ cd $SC ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./bin/scmp echo -local 17 -ffaa:1:64, [ 127 .0.0.1 ] -remote 17 -ffaa:0:1101, [ 127 .0.0.1 ] INFO [ 09 -28 | 12 :54:01 ] Started id = 1ead82ed goroutine = dispatcher_bck Using path: Hops: [ 17 -ffaa:1:64 1 16 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 2 2 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 ] Mtu: 1472 120 bytes from 17 -ffaa:0:1101, [ 127 .0.0.1 ] scmp_seq = 0 time = 10 .765ms 120 bytes from 17 -ffaa:0:1101, [ 127 .0.0.1 ] scmp_seq = 1 time = 10 .973ms 120 bytes from 17 -ffaa:0:1101, [ 127 .0.0.1 ] scmp_seq = 2 time = 10 .164ms ^C --- 17 -ffaa:0:1101, [ 127 .0.0.1 ] statistics --- 3 packets transmitted, 3 received, 0 % packet loss, time 2 .382946s Replace 17-ffaa:1:64 with the IA of your AS. If the echo does not work but you still saw paths to reach the AS from your own, please contact us . If you saw this step working, congratulations, you have fixed the issues preventing your AS to function, and now you should be able to use your VM as you wish. If you think that the problems you faced could have been prevented by doing something in a different way, please get in touch with us with your suggestions. Check SCION Connectivity So in terms of the VM structure, IDs and processes everything seems to be alright. But our applications still don't work. We need to go a bit more low level and find out what the problem is. In this check we will test if the connection between the VM and the attachment point seems okay or not. Because the tunnel interface tun0 is established (double check you still see the tun0 interface when running ip a ), we should be able to reach the other end. Recalling the topology file we showed in the Check VPN step , we look at the BorderRouter block, Remote part: RemoteOverlay : { Addr : 10.0.8.1 , OverlayPort : 50202 } , It indicates the other end's IP address is 10.0.8.1 . It is typically our own VPN IP address (in our examples 10.0.8.8 ) with a 1 replacing the number after the last dot . , but we are now sure this is the address of the attachment point. We should be able to reach it: ubuntu@ubuntu-xenial:~$ ping 10 .0.8.1 PING 10 .0.8.1 ( 10 .0.8.1 ) 56 ( 84 ) bytes of data. 64 bytes from 10 .0.8.1: icmp_seq = 1 ttl = 64 time = 0 .706 ms 64 bytes from 10 .0.8.1: icmp_seq = 2 ttl = 64 time = 0 .829 ms ^C --- 10 .0.8.1 ping statistics --- 2 packets transmitted, 2 received, 0 % packet loss, time 1038ms rtt min/avg/max/mdev = 0 .706/0.767/0.829/0.067 ms If your ping command does not succeed, you should contact us . Now let's check the traffic between our border router and that of the attachment point: ubuntu@ubuntu-xenial:~$ sudo tcpdump -n -i tun0 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on tun0, link-type RAW ( Raw IP ) , capture size 262144 bytes 13 :01:44.103975 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:44.107911 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:44.314913 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:44.718605 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:45.316115 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:45.714413 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:46.320350 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:46.785959 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:47.317784 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 754 13 :01:47.321277 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:47.323658 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 754 13 :01:47.716653 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:48.322318 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:48.717883 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:49.113969 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 933 13 :01:49.116672 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 933 13 :01:49.322994 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:49.719193 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:50.324291 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:50.719704 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:51.325441 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:51.716545 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:52.326759 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:52.720497 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:53.327880 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:53.354712 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 755 13 :01:53.360066 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 755 13 :01:53.722121 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:54.120803 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:54.123777 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:54.328698 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:54.721604 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 ^C 32 packets captured 32 packets received by filter 0 packets dropped by kernel Let's give a quick explanation: we ran tcpdump to print a line every time there is a packet incoming or outgoing in our interface tun0 . What we see is just the summary of the packets traversing tun0 back and forth. We are interested in packets between the attachment point and our VM, but anyway we should see traffic referring to only these two IP addresses. In our examples they always were 10.0.8.8 for our VM and 10.0.8.1 for the AP. We need to see essentially two types of packets right now: small ones with length 81 , and medium ones that have a variable length. The small ones are sent every 1 second from the AP to our VM, and also from our VM to the AP. If you don't see one of these packets per second, per direction, there is a problem. Contact us in this case. The other, medium size packets, are also being sent from the AP to our VM (they are PCBs), and from our VM to the AP (path registrations). The frequency varies, but you should see them, in both directions, at least once every some 5-10 minutes. If not, please contact us . If you reached this point and still cannot make your showpaths and scmp echo checks pass from the Check Request Step , please contact us . Contact Being this a troubleshooting guide, it is possible that you need to contact us to request further support. The easiest and fastest way to get support is through our community Google Group . If you want to contact us for other reasons, please choose the appropriate one from this list: For questions, further support and general comments on SCION-related topics, visit our SCION community Google group For bug reports, please post them on the scion-coord github site For suggestion on these pages, please post them on the scion-tutorials GitHub site","title":"Troubleshooting"},{"location":"general_scion_configuration/troubleshooting/#troubleshooting-a-scionlab-installation","text":"To reduce frustration from our users and to allow anybody to attempt to identify issues at their own pace, we have compiled this small troubleshooting guide. If it does not help you solve all the problems, and you have followed the steps, please contact us The simplest case to configure, and the one we treat here, is configuring an AS within a VM, using VPN. If you are testing a different case, please try first with this one and then attempt troubleshooting your specific configuration.","title":"Troubleshooting a SCIONLab installation"},{"location":"general_scion_configuration/troubleshooting/#i-have-configured-a-virtual-machine-with-vpn","text":"We will first check if the Coordinator has given you the appropriate contents, then run the Virtual Machine, log into it, check that the VPN is okay, that SCION is running, has connectivity, and finally, that we are able to request paths.","title":"I have configured a Virtual Machine with VPN"},{"location":"general_scion_configuration/troubleshooting/#check-tarball-file-and-contents","text":"After uncompressing your tar file you should see a structure like below. The 17-ffaa_1_64 is the AS ID we are configuring, in your case it will be another one: $ tar xf scion_lab_user@example.com_17-ffaa_1_64.tar.gz $ ls user@example.com_17-ffaa_1_64 scion_lab_user@example.com_17-ffaa_1_64.tar.gz $ cd user@example.com_17-ffaa_1_64/ $ pwd /home/user/Downloads/user@example.com_17-ffaa_1_64/ $ ls client.conf gen README.md run.sh scion.service scionupgrade.service scionupgrade.sh scionupgrade.timer scion-viz.service Vagrantfile The pwd command indicates in which directory the terminal prompt is working (the working directory ). In your case it will be something different than /home/user/Downloads/user@example.com_17-ffaa_1_64/ but ending in a directory that represents your user and the AS ID you configured ( user@example.com_17-ffaa_1_64 ). Pay attention to the contents of the directory. In particular, if the client.conf , Vagrantfile files or the gen directory are missing, double check that you have configured the AS as a Virtual Machine using VPN, and click on \"Update and Download SCIONLab AS Configuration\". If after this you still do not see the mentioned files, please open a bug report","title":"Check Tarball File and Contents"},{"location":"general_scion_configuration/troubleshooting/#run-the-virtual-machine","text":"The script run.sh will check for you the versions of Virtualbox and Vagrant installed in your system, and install them if needed. Although not necessary, you can perform this step manually if you wish to: $ vagrant --version Vagrant 2 .1.1 If your version is lower than 1.9 or not installed at all, please install it: $ sudo apt-get install --only-upgrade vagrant We recommend virtualbox version 5.2 with your Ubuntu 16.04 installation. Since it is not available in the default repositories, you would have to uninstall your current virtualbox version (if any) and then install the recommended one: $ wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - $ wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add - $ sudo sh -c echo deb http://download.virtualbox.org/virtualbox/debian xenial contrib /etc/apt/sources.list.d/virtualbox.list $ sudo apt remove virtualbox virtualbox-5.1 $ sudo apt-get --no-remove --yes install virtualbox-5.2 To automatically do all this and start your virtual machine, run the script run.sh . It will output many lines, but you just have to look at the last line: $ pwd /home/user/Downloads/user@example.com_17-ffaa_1_64/ $ ./run.sh . . . ubuntu@ubuntu-xenial:~$ The last line is the prompt of the virtual machine itself, and seeing it means that we have successfully started the VM, and already logged into it. Skip to step Check VPN . If you don't see this and are still in the host machine, run: $ echo $? 0 Anything different than 0 means a problem has occurred with running your VM. A 0 means the virtual machine is now running; skip to step Log in the Virtual Machine . If you experience an error mentioning that Vagrant cannot forward the specified port, please shut down all of your running virtual machines. Keep reading for more information. The error would look similar to this: $ vagrant up Bringing machine default up with virtualbox provider... == default: Checking if box scion/ubuntu-16.04-64-scion is up to date... == default: Clearing any previously set forwarded ports... Vagrant cannot forward the specified ports on this VM, since they would collide with some other application that is already listening on these ports. The forwarded port to 8000 is already in use on the host machine. To fix this, modify your current project s Vagrantfile to use another port. Example, where 1234 would be replaced by a unique host port: config.vm.network :forwarded_port, guest: 8000, host: 1234 Sometimes, Vagrant will attempt to auto-correct this for you. In this case, Vagrant was unable to. This is usually because the guest machine is in a state which doesn t allow modifying port forwarding. You could try vagrant reload ( equivalent of running a halt followed by an up ) so vagrant can attempt to auto-correct this upon booting. Be warned that any unsaved work might be lost. To proceed, please open your VirtualBox Manager and stop any running virtual machines to continue troubleshooting this step. Tip Find out how many virtual machines you have running by typing in the terminal VBoxManage list runningvms . If you are in doubt on how to stop the running virtual machines, you can always reboot your host machine to ensure none are running. After stopping all running virtual machines, and being in the extracted directory, remove your virtual machine completely: $ VBoxManage list runningvms # VBoxManage prints nothing because no VM running $ pwd /home/user/Downloads/user@example.com_17-ffaa_1_64/ vagrant destroy -f . . . $ echo $? 0 This destroys your virtual machine so you can recreate it again from scratch. You can go now again to the step Run the Virtual Machine . If you had tried previously to remove all virtual machines and still see an error running run.sh , please contact us","title":"Run the Virtual Machine"},{"location":"general_scion_configuration/troubleshooting/#log-in-the-virtual-machine","text":"After running run.sh you should be presented with the prompt from the virtual machine. If not, you can simply connect to it: $ vagrant ssh . . . ubuntu@ubuntu-xenial:~$ If you cannot get into the virtual machine, please contact us . To be sure we will check now the free space on the virtual machine virtual disk: ubuntu@ubuntu-xenial:~$ df -h Filesystem Size Used Avail Use% Mounted on udev 487M 0 487M 0 % /dev tmpfs 100M 6 .8M 93M 7 % /run /dev/sda1 9 .7G 4 .9G 4 .8G 51 % / tmpfs 497M 99M 398M 20 % /dev/shm tmpfs 5 .0M 0 5 .0M 0 % /run/lock tmpfs 497M 0 497M 0 % /sys/fs/cgroup vagrant 451G 51G 401G 12 % /vagrant tmpfs 100M 0 100M 0 % /run/user/1000 Interesting for us is the line /dev/sda1 9.7G 4.9G 4.8G 51% / because it refers to / (last column). Look for a similar entry from your output and check that on the Avail column you have at least 2G (2 gigabytes). Otherwise destroy your virtual machine and create a new one . Your host machine should have enough memory to launch a virtual machine requesting two gigabytes of free memory (we configure SCIONLab virtual machines to use two gigabytes of memory). Ensure that you have enough free memory in your host and that in the VM you see the expected free memory amount: ubuntu@ubuntu-xenial:~$ free -h total used free shared buff/cache available Mem: 2 .0G 271M 1 .2G 3 .1M 499M 1 .5G Swap: 0B 0B 0B The line Mem: 2.0G 271M 1.2G 3.1M 499M 1.5G tells us that there are two gigabytes of memory in total. If you don't have two gigabytes (and did not edit your Vagrantfile yourself), please contact us .","title":"Log in the Virtual Machine"},{"location":"general_scion_configuration/troubleshooting/#check-vpn","text":"Our setup is using VPN to connect to the Attachment Point in the SCIONLab infrastructure. We should be able to see the VPN tunnel interface when inside the VM: ubuntu@ubuntu-xenial:~$ ip a 1 : lo: LOOPBACK,UP,LOWER_UP mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp0s3: BROADCAST,MULTICAST,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether 02 :b9:83:f0:a4:db brd ff:ff:ff:ff:ff:ff inet 10 .0.2.15/24 brd 10 .0.2.255 scope global enp0s3 valid_lft forever preferred_lft forever inet6 fe80::b9:83ff:fef0:a4db/64 scope link valid_lft forever preferred_lft forever 3 : tun0: POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10 .0.8.8/24 brd 10 .0.8.255 scope global tun0 valid_lft forever preferred_lft forever The lines we are interested in are the last ones, that refer to the tun0 interface. We can read them again: 3 : tun0: POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10 .0.8.8/24 brd 10 .0.8.255 scope global tun0 valid_lft forever preferred_lft forever It tells us that the virtual machine has a tun0 interface with IP address 10.0.8.8 . If you don't see this tun0 interface, you are probably behind a firewall that does not allow UDP traffic on port 1194 . Please check your /var/log/syslog to find out if there had been a timeout while trying to establish the openvpn connection (search for ovpn-client in the /var/log/syslog file). If you find out that the tun0 interface was not brought up because timeouts between your client and the VPN server, it is an indication that a firewall is filtering the traffic: please contact your IT service to add an exception for your machine and port 1194 . Also, you can contact us to find out if we can do something about that. Now, we will verify that the IP address obtained here corresponds to the one the Coordinator believes this VM should obtain. We will simply check the topology file and look for this IP address. Let's look at one topology file. For completeness we show the whole file here, but we only need to find the string containing the tun0 address; from our previous example we look for 10.0.8.8 . We find it inside the BourderRouters block as the PublicOverlay address for the only border router interface we have, as expected. ubuntu@ubuntu-xenial:~$ cat $SC/gen/ISD 17 /ASffaa_ 1 _ 64 /cs 17 -ffaa_ 1 _ 64-1 /topology.json { PathService : { ps17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31044 } } } } }, CertificateService : { cs17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31043 } } } } }, ISD_AS : 17-ffaa:1:64 , SibraService : { sb17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31045 } } } } }, Overlay : UDP/IPv4 , DiscoveryService : {}, MTU : 1472 , BeaconService : { bs17-ffaa_1_64-1 : { Addrs : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 31041 } } } } }, Core : false , ZookeeperService : { 1 : { Addr : 127.0.0.1 , L4Port : 2181 } }, BorderRouters : { br17-ffaa_1_64-1 : { InternalAddrs : { IPv4 : { PublicOverlay : { Addr : 10.0.2.15 , OverlayPort : 31042 } } }, CtrlAddr : { IPv4 : { Public : { Addr : 10.0.2.15 , L4Port : 30042 } } }, Interfaces : { 1 : { Bandwidth : 1000 , ISD_AS : 17-ffaa:0:1107 , MTU : 1472 , Overlay : UDP/IPv4 , PublicOverlay : { Addr : 10.0.8.8 , OverlayPort : 50000 }, RemoteOverlay : { Addr : 10.0.8.1 , OverlayPort : 50202 }, LinkTo : PARENT } } } } } If you find your tun0 IP address to be the same as in the PublicOverlay part of the BorderRouter blocks, please continue to step Check SCION is running . If you did not find the tun0 IP address in your topology file, we will destroy the existing virtual machine and remove its settings by first logging out of it and then running the steps described in the snippet vagrant destroy . After destroying the virtual machine, we can delete its configuration: $ vagrant destroy -f . . . $ cd .. $ pwd /home/user/Downloads/ $ rm -r user@example.com_17-ffaa_1_64 Now check in the Coordinator webpage that your AS is correctly attached to your AP of choice, and that you are using the right tarball file. If in doubt, you can always click on Re-download my SCIONLab AS Configuration to get it again. Re-download does not configure the AS, but returns the latest configuration the Coordinator has for it. Wait 15 minutes (the reason being sometimes the attachment point needs 15 minutes to process your request). You should have received an email stating the success of your request. In the hopefully successful state, start again from the checking tarbal step . If after waiting these 15 minutes you did not receive the success email, or you received it but still don't see the same IP address in the tun0 interface as in the topology file, contact us .","title":"Check VPN"},{"location":"general_scion_configuration/troubleshooting/#check-scion-is-running","text":"We are going to check now that all SCION processes are running. Once logged in the VM, run this: ubuntu@ubuntu-xenial:~$ cd $SC ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh status ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ As a general rule, scion.sh status should not print any messages. Output from that command indicates problems with the SCION services. If your execution returned a message, there is probably a problem. Stop and start SCION again to retry just once more: ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh stop Terminating this run of the SCION infrastructure dispatcher: stopped as17-ffaa_1_64:sd17-ffaa_1_64: stopped as17-ffaa_1_64:br17-ffaa_1_64-1: stopped as17-ffaa_1_64:cs17-ffaa_1_64-1: stopped as17-ffaa_1_64:ps17-ffaa_1_64-1: stopped as17-ffaa_1_64:bs17-ffaa_1_64-1: stopped ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh start Compiling... Running the network... dispatcher: started as17-ffaa_1_64:sd17-ffaa_1_64: started as17-ffaa_1_64:br17-ffaa_1_64-1: started as17-ffaa_1_64:bs17-ffaa_1_64-1: started as17-ffaa_1_64:cs17-ffaa_1_64-1: started as17-ffaa_1_64:ps17-ffaa_1_64-1: started ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./scion.sh status ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ If now the scion.sh status command still prints messages (whether the same or different ones than before), please contact us , copying that output on the message. You should at this stage check the AS ID in the virtual machine, and ensure it corresponds to the one you expect. In our case, we expect to see the AS ID 17-ffaa_1_64 : ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ cat $SC /gen/ia 17 -ffaa_1_64ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ The output indicates 17-ffaa_1_64 , which is okay, because the ia file replaces : with _ . If not, you probably ran the virtual machine from the wrong uncompressed tarball. Check again starting in step Check Tarball File and Contents . Otherwise, contact us . The last step is only for sanity: SCION services communicate among themselves using socket files. The following default.sock files should be present in your VM, as shown below: ubuntu@ubuntu-xenial:~$ ll /run/shm/ total 0 drwxrwxrwt 5 root root 100 Sep 27 15 :53 ./ drwxr-xr-x 16 root root 3620 Sep 27 15 :53 ../ drwxr-xr-x 3 ubuntu ubuntu 80 Sep 28 09 :32 dispatcher/ drwxr-xr-x 3 zookeeper zookeeper 60 Sep 27 15 :53 host-zk/ drwxr-xr-x 2 ubuntu ubuntu 60 Sep 28 09 :32 sciond/ ubuntu@ubuntu-xenial:~$ ll /run/shm/sciond/ total 0 drwxr-xr-x 2 ubuntu ubuntu 60 Sep 28 09 :32 ./ drwxrwxrwt 5 root root 100 Sep 27 15 :53 ../ srwxr-xr-x 1 ubuntu ubuntu 0 Sep 28 09 :32 default.sock = ubuntu@ubuntu-xenial:~$ ll /run/shm/dispatcher/ total 0 drwxr-xr-x 3 ubuntu ubuntu 80 Sep 28 09 :32 ./ drwxrwxrwt 5 root root 100 Sep 27 15 :53 ../ srwxr-xr-x 1 ubuntu ubuntu 0 Sep 28 09 :32 default.sock = drwxr-xr-x 2 ubuntu ubuntu 60 Sep 28 09 :32 lwip/ ubuntu@ubuntu-xenial:~$ If there are no sciond or dispatcher directories, or if they don't contain a default.sock file, please contact us .","title":"Check SCION is running"},{"location":"general_scion_configuration/troubleshooting/#check-request-paths","text":"Every AS should be able to reach any other AS if there exist at least a path. We will start by checking that your VM running the services for your AS is able to obtain paths to some well-known ASes: ubuntu@ubuntu-xenial:~$ cd $SC ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./bin/showpaths -srcIA 17 -ffaa:1:64 -dstIA 17 -ffaa:0:1101 INFO [ 09 -28 | 12 :47:16 ] Started id = 595ed707 goroutine = dispatcher_bck Available paths to 17 -ffaa:0:1101 [ 0 ] Hops: [ 17 -ffaa:1:64 1 16 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 2 2 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 ] Mtu: 1472 [ 1 ] Hops: [ 17 -ffaa:1:64 1 16 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 3 3 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 ] Mtu: 1472 Replace 17-ffaa:1:64 with the IA of your AS (the normal IA contains : , not _ ). You can check paths to reach 17-ffaa:0:1101 because it is an important AS and should always be present in the network. There must always be at least one path. If you don't see paths, go to step Check SCION Connectivity and repeat this check about getting paths afterwards. On the other hand, if you were able to obtain paths, using the control plane to send echo messages should work: ubuntu@ubuntu-xenial:~$ cd $SC ubuntu@ubuntu-xenial:~/go/src/github.com/scionproto/scion$ ./bin/scmp echo -local 17 -ffaa:1:64, [ 127 .0.0.1 ] -remote 17 -ffaa:0:1101, [ 127 .0.0.1 ] INFO [ 09 -28 | 12 :54:01 ] Started id = 1ead82ed goroutine = dispatcher_bck Using path: Hops: [ 17 -ffaa:1:64 1 16 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 2 2 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 ] Mtu: 1472 120 bytes from 17 -ffaa:0:1101, [ 127 .0.0.1 ] scmp_seq = 0 time = 10 .765ms 120 bytes from 17 -ffaa:0:1101, [ 127 .0.0.1 ] scmp_seq = 1 time = 10 .973ms 120 bytes from 17 -ffaa:0:1101, [ 127 .0.0.1 ] scmp_seq = 2 time = 10 .164ms ^C --- 17 -ffaa:0:1101, [ 127 .0.0.1 ] statistics --- 3 packets transmitted, 3 received, 0 % packet loss, time 2 .382946s Replace 17-ffaa:1:64 with the IA of your AS. If the echo does not work but you still saw paths to reach the AS from your own, please contact us . If you saw this step working, congratulations, you have fixed the issues preventing your AS to function, and now you should be able to use your VM as you wish. If you think that the problems you faced could have been prevented by doing something in a different way, please get in touch with us with your suggestions.","title":"Check Request Paths."},{"location":"general_scion_configuration/troubleshooting/#check-scion-connectivity","text":"So in terms of the VM structure, IDs and processes everything seems to be alright. But our applications still don't work. We need to go a bit more low level and find out what the problem is. In this check we will test if the connection between the VM and the attachment point seems okay or not. Because the tunnel interface tun0 is established (double check you still see the tun0 interface when running ip a ), we should be able to reach the other end. Recalling the topology file we showed in the Check VPN step , we look at the BorderRouter block, Remote part: RemoteOverlay : { Addr : 10.0.8.1 , OverlayPort : 50202 } , It indicates the other end's IP address is 10.0.8.1 . It is typically our own VPN IP address (in our examples 10.0.8.8 ) with a 1 replacing the number after the last dot . , but we are now sure this is the address of the attachment point. We should be able to reach it: ubuntu@ubuntu-xenial:~$ ping 10 .0.8.1 PING 10 .0.8.1 ( 10 .0.8.1 ) 56 ( 84 ) bytes of data. 64 bytes from 10 .0.8.1: icmp_seq = 1 ttl = 64 time = 0 .706 ms 64 bytes from 10 .0.8.1: icmp_seq = 2 ttl = 64 time = 0 .829 ms ^C --- 10 .0.8.1 ping statistics --- 2 packets transmitted, 2 received, 0 % packet loss, time 1038ms rtt min/avg/max/mdev = 0 .706/0.767/0.829/0.067 ms If your ping command does not succeed, you should contact us . Now let's check the traffic between our border router and that of the attachment point: ubuntu@ubuntu-xenial:~$ sudo tcpdump -n -i tun0 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on tun0, link-type RAW ( Raw IP ) , capture size 262144 bytes 13 :01:44.103975 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:44.107911 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:44.314913 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:44.718605 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:45.316115 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:45.714413 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:46.320350 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:46.785959 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:47.317784 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 754 13 :01:47.321277 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:47.323658 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 754 13 :01:47.716653 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:48.322318 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:48.717883 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:49.113969 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 933 13 :01:49.116672 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 933 13 :01:49.322994 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:49.719193 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:50.324291 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:50.719704 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:51.325441 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:51.716545 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:52.326759 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:52.720497 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:53.327880 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:53.354712 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 755 13 :01:53.360066 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 755 13 :01:53.722121 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 13 :01:54.120803 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:54.123777 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 936 13 :01:54.328698 IP 10 .0.8.8.50000 10 .0.8.1.50015: UDP, length 81 13 :01:54.721604 IP 10 .0.8.1.50015 10 .0.8.8.50000: UDP, length 81 ^C 32 packets captured 32 packets received by filter 0 packets dropped by kernel Let's give a quick explanation: we ran tcpdump to print a line every time there is a packet incoming or outgoing in our interface tun0 . What we see is just the summary of the packets traversing tun0 back and forth. We are interested in packets between the attachment point and our VM, but anyway we should see traffic referring to only these two IP addresses. In our examples they always were 10.0.8.8 for our VM and 10.0.8.1 for the AP. We need to see essentially two types of packets right now: small ones with length 81 , and medium ones that have a variable length. The small ones are sent every 1 second from the AP to our VM, and also from our VM to the AP. If you don't see one of these packets per second, per direction, there is a problem. Contact us in this case. The other, medium size packets, are also being sent from the AP to our VM (they are PCBs), and from our VM to the AP (path registrations). The frequency varies, but you should see them, in both directions, at least once every some 5-10 minutes. If not, please contact us . If you reached this point and still cannot make your showpaths and scmp echo checks pass from the Check Request Step , please contact us .","title":"Check SCION Connectivity"},{"location":"general_scion_configuration/troubleshooting/#contact","text":"Being this a troubleshooting guide, it is possible that you need to contact us to request further support. The easiest and fastest way to get support is through our community Google Group . If you want to contact us for other reasons, please choose the appropriate one from this list: For questions, further support and general comments on SCION-related topics, visit our SCION community Google group For bug reports, please post them on the scion-coord github site For suggestion on these pages, please post them on the scion-tutorials GitHub site","title":"Contact"},{"location":"general_scion_configuration/verifying_scion_installation/","text":"Verifying SCION installation Introduction After running your SCION infrastructure, it is necessary to verify that it is working correctly. There are several methods of doing this. Some of them are described in this post. Running SCION-viz The recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool SCIONLab Apps Web Visualization . This user-friendly tool will display paths from your AS to different destinations, verifying the correct function of the control plane. Terminal based Another approach is to directly verify AS services using the terminal. You will have to log into the machine hosting the SCION services either (with vagrant ssh if it is a virtual machine). If your AS is correctly configured and functioning as expected, the following checks would all pass. You can therefore choose which ones from them to check. Inspecting log files The SCION log files can be accessed with the following command: tail -f $SC /logs/bs*.DEBUG In particular, the beacon server log file should contain lines like [ DEBUG ] ( MainThread ) Successfully verified PCB ca8e78c198ca If you don't find any line mentioning the successful verification of PCBs, your AS probably has issues. Please refer to the troubleshooting section . Tip If you are running the SCION virtual machine image, you can check the same by running: checkbeacons from any directory Run pingpong client If your AS is working as expected, you should be able to use a simple data plane application that is delivered with the SCION binaries that sends a small request ( ping ) and waits for its response ( pong ). We run the pingpong servers in each of the four official attachment points: 17-ffaa:0:1107,[192.33.93.195]:40002 18-ffaa:0:1202,[128.105.21.208]:40002 19-ffaa:0:1303,[141.44.25.144]:40002 20-ffaa:0:1404,[203.230.60.98]:40002 You can run the pingpong client against any of those servers in the list above. For example, if your AS ID was 17-ffaa:1:1 and you wanted to verify pingpong against the attachment point in the ISD 18, you would run: cd $SC ./bin/pingpong -local 17 -ffaa:1:1, [ 127 .0.0.1 ] :0 -remote 18 -ffaa:0:1202, [ 128 .105.21.208 ] :40002 Using path: Hops: [ 17 -ffaa:1:1 1 147 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 3 3 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 5 4 18 -ffaa:0:1201 6 1 18 -ffaa:0:1202 ] Mtu: 1472 Received 13 bytes from 18 -ffaa:0:1202, [ 128 .105.21.208 ] :40002: seq = 0 RTT = 156 .675ms Received 13 bytes from 18 -ffaa:0:1202, [ 128 .105.21.208 ] :40002: seq = 1 RTT = 157 .699ms ... Tip If you're running the application on a local topology, make sure to specify the correct socket using the -sciond flag, e.g. by adding -sciond /run/shm/sciond/sd1-ff00_0_110.sock . You can find the corresponding socket in the sciond.toml file of the endhost inside the gen/ folder. Passing this test is a condition sufficient to say that your AS works as expected. If it fails, please refer to the troubleshooting section . Note If while trying to run pingpong you receive an error such as: squic : Unable to load TLS cert / key open gen - certs / tls . pem : no such file or directory Just run the following: cd $SC old = $( umask ) mkdir -p gen-certs umask 0177 openssl genrsa -out gen-certs/tls.key 2048 umask $old openssl req -new -x509 -key gen-certs/tls.key -out gen-certs/tls.pem -days 3650 -subj /CN = scion_def_srv This would have generated the missing gen-certs/tls.pem and key files. Run again pingpong and you should not see the error about the missing certificate.","title":"Verifying the installation"},{"location":"general_scion_configuration/verifying_scion_installation/#verifying-scion-installation","text":"","title":"Verifying SCION installation"},{"location":"general_scion_configuration/verifying_scion_installation/#introduction","text":"After running your SCION infrastructure, it is necessary to verify that it is working correctly. There are several methods of doing this. Some of them are described in this post.","title":"Introduction"},{"location":"general_scion_configuration/verifying_scion_installation/#running-scion-viz","text":"The recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool SCIONLab Apps Web Visualization . This user-friendly tool will display paths from your AS to different destinations, verifying the correct function of the control plane.","title":"Running SCION-viz"},{"location":"general_scion_configuration/verifying_scion_installation/#terminal-based","text":"Another approach is to directly verify AS services using the terminal. You will have to log into the machine hosting the SCION services either (with vagrant ssh if it is a virtual machine). If your AS is correctly configured and functioning as expected, the following checks would all pass. You can therefore choose which ones from them to check.","title":"Terminal based"},{"location":"general_scion_configuration/verifying_scion_installation/#inspecting-log-files","text":"The SCION log files can be accessed with the following command: tail -f $SC /logs/bs*.DEBUG In particular, the beacon server log file should contain lines like [ DEBUG ] ( MainThread ) Successfully verified PCB ca8e78c198ca If you don't find any line mentioning the successful verification of PCBs, your AS probably has issues. Please refer to the troubleshooting section . Tip If you are running the SCION virtual machine image, you can check the same by running: checkbeacons from any directory","title":"Inspecting log files"},{"location":"general_scion_configuration/verifying_scion_installation/#run-pingpong-client","text":"If your AS is working as expected, you should be able to use a simple data plane application that is delivered with the SCION binaries that sends a small request ( ping ) and waits for its response ( pong ). We run the pingpong servers in each of the four official attachment points: 17-ffaa:0:1107,[192.33.93.195]:40002 18-ffaa:0:1202,[128.105.21.208]:40002 19-ffaa:0:1303,[141.44.25.144]:40002 20-ffaa:0:1404,[203.230.60.98]:40002 You can run the pingpong client against any of those servers in the list above. For example, if your AS ID was 17-ffaa:1:1 and you wanted to verify pingpong against the attachment point in the ISD 18, you would run: cd $SC ./bin/pingpong -local 17 -ffaa:1:1, [ 127 .0.0.1 ] :0 -remote 18 -ffaa:0:1202, [ 128 .105.21.208 ] :40002 Using path: Hops: [ 17 -ffaa:1:1 1 147 17 -ffaa:0:1107 1 4 17 -ffaa:0:1102 3 3 17 -ffaa:0:1103 4 8 17 -ffaa:0:1101 5 4 18 -ffaa:0:1201 6 1 18 -ffaa:0:1202 ] Mtu: 1472 Received 13 bytes from 18 -ffaa:0:1202, [ 128 .105.21.208 ] :40002: seq = 0 RTT = 156 .675ms Received 13 bytes from 18 -ffaa:0:1202, [ 128 .105.21.208 ] :40002: seq = 1 RTT = 157 .699ms ... Tip If you're running the application on a local topology, make sure to specify the correct socket using the -sciond flag, e.g. by adding -sciond /run/shm/sciond/sd1-ff00_0_110.sock . You can find the corresponding socket in the sciond.toml file of the endhost inside the gen/ folder. Passing this test is a condition sufficient to say that your AS works as expected. If it fails, please refer to the troubleshooting section . Note If while trying to run pingpong you receive an error such as: squic : Unable to load TLS cert / key open gen - certs / tls . pem : no such file or directory Just run the following: cd $SC old = $( umask ) mkdir -p gen-certs umask 0177 openssl genrsa -out gen-certs/tls.key 2048 umask $old openssl req -new -x509 -key gen-certs/tls.key -out gen-certs/tls.pem -days 3650 -subj /CN = scion_def_srv This would have generated the missing gen-certs/tls.pem and key files. Run again pingpong and you should not see the error about the missing certificate.","title":"Run pingpong client"},{"location":"general_scion_configuration/vpn_setup/","text":"Connecting to SCIONLab via VPN Note This page needs to be updated. Use with care. Introduction This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you do not have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from the Internet. If this is not the case, you should consider the tutorial Connecting to SCION Lab with public IP or Connecting to SCION Lab with public IP behind a NAT . Prerequisites In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here. Step One - installing OpenVPN In order to circumvent the problem of not having a publicly accessible IP address, we create an OpenVPN tunnel to carry the SCION traffic between the two SCION border routers. In order to install the openvpn client, you can simply run: sudo apt install openvpn Step Two - downloading SCION Lab configuration In order to download the necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure the running SCION infrastructure. After logging in, download a VM configuration by clicking on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archive content: cd ~/Downloads tar -vxzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need: file client.conf - client OpenVPN configuration directory gen - SCION infrastructure configuration Step Three - Connecting to OpenVPN server Adding the OpenVPN configuration is accomplished by copying files to the openvpn directory: sudo cp client.conf /etc/openvpn sudo chmod 600 /etc/openvpn/client.conf Next, we need to automatically launch the OpenVPN service on startup of the system: systemctl start openvpn@client systemctl enable openvpn@client After this, you should verify that new tun interface is added. The command: ip a should display the newly added interface, in this case tun0 as in this example: 9 : tun0 : POINTOPOINT , MULTICAST , NOARP , UP , LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link / none inet 10.0 . 8.40 / 24 brd 10.0 . 8.255 scope global tun0 valid_lft forever preferred_lft forever inet6 fe80 :: 2337 : a0c4 : 7 fa7 : 78 b3 / 64 scope link flags 800 valid_lft forever preferred_lft forever In this case, the client's OpenVPN IP address is: 10.0.8.40 . Step Four - copying SCION Lab configuration Before copying the new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC /gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC / cd $SC Step Five - Restarting SCION Infrastructure After the OpenVPN connection is established and the new configuration is copied, you need to restart the infrastructure as follows: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Set up an AS and connect to the SCION network via VPN"},{"location":"general_scion_configuration/vpn_setup/#connecting-to-scionlab-via-vpn","text":"Note This page needs to be updated. Use with care.","title":"Connecting to SCIONLab via VPN"},{"location":"general_scion_configuration/vpn_setup/#introduction","text":"This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you do not have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from the Internet. If this is not the case, you should consider the tutorial Connecting to SCION Lab with public IP or Connecting to SCION Lab with public IP behind a NAT .","title":"Introduction"},{"location":"general_scion_configuration/vpn_setup/#prerequisites","text":"In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.","title":"Prerequisites"},{"location":"general_scion_configuration/vpn_setup/#step-one-installing-openvpn","text":"In order to circumvent the problem of not having a publicly accessible IP address, we create an OpenVPN tunnel to carry the SCION traffic between the two SCION border routers. In order to install the openvpn client, you can simply run: sudo apt install openvpn","title":"Step One - installing OpenVPN"},{"location":"general_scion_configuration/vpn_setup/#step-two-downloading-scion-lab-configuration","text":"In order to download the necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure the running SCION infrastructure. After logging in, download a VM configuration by clicking on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archive content: cd ~/Downloads tar -vxzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need: file client.conf - client OpenVPN configuration directory gen - SCION infrastructure configuration","title":"Step Two - downloading SCION Lab configuration"},{"location":"general_scion_configuration/vpn_setup/#step-three-connecting-to-openvpn-server","text":"Adding the OpenVPN configuration is accomplished by copying files to the openvpn directory: sudo cp client.conf /etc/openvpn sudo chmod 600 /etc/openvpn/client.conf Next, we need to automatically launch the OpenVPN service on startup of the system: systemctl start openvpn@client systemctl enable openvpn@client After this, you should verify that new tun interface is added. The command: ip a should display the newly added interface, in this case tun0 as in this example: 9 : tun0 : POINTOPOINT , MULTICAST , NOARP , UP , LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link / none inet 10.0 . 8.40 / 24 brd 10.0 . 8.255 scope global tun0 valid_lft forever preferred_lft forever inet6 fe80 :: 2337 : a0c4 : 7 fa7 : 78 b3 / 64 scope link flags 800 valid_lft forever preferred_lft forever In this case, the client's OpenVPN IP address is: 10.0.8.40 .","title":"Step Three - Connecting to OpenVPN server"},{"location":"general_scion_configuration/vpn_setup/#step-four-copying-scion-lab-configuration","text":"Before copying the new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC /gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC / cd $SC","title":"Step Four - copying SCION Lab configuration"},{"location":"general_scion_configuration/vpn_setup/#step-five-restarting-scion-infrastructure","text":"After the OpenVPN connection is established and the new configuration is copied, you need to restart the infrastructure as follows: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Step Five - Restarting SCION Infrastructure"},{"location":"general_scion_configuration/vpn_setup/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"native_setup/android/","text":"Installing SCION on an Android device Introduction It is possible to run SCION on an Android device. The easiest way is to install SCION as an Android app . The other alternative is to manually install SCION on your Android device . Both variants are based on Termux , which emulates a Terminal environment with the Linux base system that Android is based upon. This tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described here . Prerequisites It is recommended to make yourself familiar with Termux by reading the Wiki to learn how the app can be used comfortably. SCION App Hint The SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the manual setup won't be necessary anymore. To install the SCION app, please contact Stefan Schwarz to get an invite to the App testing group. Once you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done through the HockeyApp website (it is not available on the Google Play Store). Install SCION with the SCION App Once the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended): ./install That\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue. Hint If the folder selection doesn't show up, run the following script to trigger it manually: ./import_folder That means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB. Warning SCION for Android currently only supports a SCION endhost configuration, as described in this tutorial Warning SCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described here Manual setup To setup SCION on Android manually, the Termux app needs to be installed from the Google Play Store. To install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH. Access Termux via SSH First install the openssh package within Termux with pkg install openssh , then start the server with sshd . Password authentication is not supported, so you need to add your public key to $HOME/.ssh/authorized_keys . The ssh server runs by default on port 8022, so connect to it with ssh -p 8022 DEVICE_IP . You can find the device IP address with ip addr list wlan0 . For more information: Run an SSH server on your Android with Termux Access Termux via USB Install necessary packages Install the required packages from within Termux: apt update apt upgrade pkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl To access the SD card from Termux, it is required to run termux-setup-storage from the Termux console. Configure Go workspace SCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7 ARMv8/aarch64 architectures: For ARMv7: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb For aarch64: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb Setup the Go workspace and add it to your path: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$GOPATH/bin ~/.profile source ~/.profile Install SCION Step One clone the SCION repository After the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git config --global url.https://github.com/.insteadOf git@github.com: git clone --recursive -b termux-modifications git@github.com:stschwar/scion . curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch patch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch rm lwip-contrib.patch This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC Step Two configure Python path variable Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile Step Three install required packages/patches SCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually. Cap'n Proto To install Cap'n Proto in Termux run the following commands in the home/ directory: curl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz tar zxf capnproto-c++-0.6.1.tar.gz cd capnproto-c++-0.6.1 On Termux Cap'n Proto requires some patching to compile: cd src/kj/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch patch debug.c++ debug.c++.patch rm debug.c++.patch Back in the capnproto-c++-0.6.1/ root directory run: ./configure --prefix = $PREFIX TMPDIR = $PREFIX /tmp make make install zlog Install zlog by following its install instructions mostly. It requires some more patching and the installation of libandroid-glob-dev : curl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz tar -zxf zlog-latest-stable.tar.gz cd zlog-latest-stable/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch patch src/makefile zlog-makefile.patch rm zlog-makefile.patch pkg install -y libandroid-glob-dev make PREFIX = $PREFIX make PREFIX = $PREFIX install uthash Install the uthash library from your home/ directory: curl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master unzip uthash-master.zip cp uthash-master/src/*.h $PREFIX /include rm -rf uthash-master/ SCION Python dependencies Most of the Python dependencies can easily be installed through pip : cd $SC pip2 install -r env/pip2/requirements.txt pip3 install -r env/pip3/requirements.txt TMPDIR = $PREFIX /tmp pip3 install lz4 PyNaCl PyYAML Pygments Supervisor In case the pip installation of the package \"Supervisor\" fails, you can install it manually: curl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz tar -xzf supervisor-3.3.4.tar.gz cd supervisor-3.3.4/ python2 setup.py install SCION Go dependencies With Go correctly installed it is easy to install the SCION dependencies as well: cd $SC /env/go ./deps Next steps After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab as an endhost Connect to the already running SCION topology as a mobile endhost through an existing SCION setup. Changes to gen folder Note that in gen/ISDx/AS10xx/supervisord.conf the path of the SCION Deamon socket needs to be changed as follows: \"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\" . VPN Connection to SCIONLab Unfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the Open VPN app can be installed to connect to SCIONLab via VPN. The client.conf file that is provided by the SCIONLab coordinator needs to be renamed to client.ovpn before it can be imported into the app. Additionally, the line route 10.0.8.0/24 needs to be added to the file. Endhost configuration vs. full AS It is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage. If you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.","title":"Android devices"},{"location":"native_setup/android/#installing-scion-on-an-android-device","text":"","title":"Installing SCION on an Android device"},{"location":"native_setup/android/#introduction","text":"It is possible to run SCION on an Android device. The easiest way is to install SCION as an Android app . The other alternative is to manually install SCION on your Android device . Both variants are based on Termux , which emulates a Terminal environment with the Linux base system that Android is based upon. This tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described here .","title":"Introduction"},{"location":"native_setup/android/#prerequisites","text":"It is recommended to make yourself familiar with Termux by reading the Wiki to learn how the app can be used comfortably.","title":"Prerequisites"},{"location":"native_setup/android/#scion-app","text":"Hint The SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the manual setup won't be necessary anymore. To install the SCION app, please contact Stefan Schwarz to get an invite to the App testing group. Once you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done through the HockeyApp website (it is not available on the Google Play Store).","title":"SCION App"},{"location":"native_setup/android/#install-scion-with-the-scion-app","text":"Once the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended): ./install That\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue. Hint If the folder selection doesn't show up, run the following script to trigger it manually: ./import_folder That means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB. Warning SCION for Android currently only supports a SCION endhost configuration, as described in this tutorial Warning SCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described here","title":"Install SCION with the SCION App"},{"location":"native_setup/android/#manual-setup","text":"To setup SCION on Android manually, the Termux app needs to be installed from the Google Play Store. To install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH.","title":"Manual setup"},{"location":"native_setup/android/#access-termux-via-ssh","text":"First install the openssh package within Termux with pkg install openssh , then start the server with sshd . Password authentication is not supported, so you need to add your public key to $HOME/.ssh/authorized_keys . The ssh server runs by default on port 8022, so connect to it with ssh -p 8022 DEVICE_IP . You can find the device IP address with ip addr list wlan0 . For more information: Run an SSH server on your Android with Termux Access Termux via USB","title":"Access Termux via SSH"},{"location":"native_setup/android/#install-necessary-packages","text":"Install the required packages from within Termux: apt update apt upgrade pkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl To access the SD card from Termux, it is required to run termux-setup-storage from the Termux console.","title":"Install necessary packages"},{"location":"native_setup/android/#configure-go-workspace","text":"SCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7 ARMv8/aarch64 architectures: For ARMv7: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb For aarch64: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb Setup the Go workspace and add it to your path: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$GOPATH/bin ~/.profile source ~/.profile","title":"Configure Go workspace"},{"location":"native_setup/android/#install-scion","text":"","title":"Install SCION"},{"location":"native_setup/android/#step-one-clone-the-scion-repository","text":"After the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git config --global url.https://github.com/.insteadOf git@github.com: git clone --recursive -b termux-modifications git@github.com:stschwar/scion . curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch patch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch rm lwip-contrib.patch This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC","title":"Step One &ndash; clone the SCION repository"},{"location":"native_setup/android/#step-two-configure-python-path-variable","text":"Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile","title":"Step Two &ndash; configure Python path variable"},{"location":"native_setup/android/#step-three-install-required-packagespatches","text":"SCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually.","title":"Step Three &ndash; install required packages/patches"},{"location":"native_setup/android/#capn-proto","text":"To install Cap'n Proto in Termux run the following commands in the home/ directory: curl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz tar zxf capnproto-c++-0.6.1.tar.gz cd capnproto-c++-0.6.1 On Termux Cap'n Proto requires some patching to compile: cd src/kj/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch patch debug.c++ debug.c++.patch rm debug.c++.patch Back in the capnproto-c++-0.6.1/ root directory run: ./configure --prefix = $PREFIX TMPDIR = $PREFIX /tmp make make install","title":"Cap'n Proto"},{"location":"native_setup/android/#zlog","text":"Install zlog by following its install instructions mostly. It requires some more patching and the installation of libandroid-glob-dev : curl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz tar -zxf zlog-latest-stable.tar.gz cd zlog-latest-stable/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch patch src/makefile zlog-makefile.patch rm zlog-makefile.patch pkg install -y libandroid-glob-dev make PREFIX = $PREFIX make PREFIX = $PREFIX install","title":"zlog"},{"location":"native_setup/android/#uthash","text":"Install the uthash library from your home/ directory: curl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master unzip uthash-master.zip cp uthash-master/src/*.h $PREFIX /include rm -rf uthash-master/","title":"uthash"},{"location":"native_setup/android/#scion-python-dependencies","text":"Most of the Python dependencies can easily be installed through pip : cd $SC pip2 install -r env/pip2/requirements.txt pip3 install -r env/pip3/requirements.txt TMPDIR = $PREFIX /tmp pip3 install lz4 PyNaCl PyYAML Pygments Supervisor In case the pip installation of the package \"Supervisor\" fails, you can install it manually: curl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz tar -xzf supervisor-3.3.4.tar.gz cd supervisor-3.3.4/ python2 setup.py install","title":"SCION Python dependencies"},{"location":"native_setup/android/#scion-go-dependencies","text":"With Go correctly installed it is easy to install the SCION dependencies as well: cd $SC /env/go ./deps","title":"SCION Go dependencies"},{"location":"native_setup/android/#next-steps","text":"After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab as an endhost Connect to the already running SCION topology as a mobile endhost through an existing SCION setup.","title":"Next steps"},{"location":"native_setup/android/#changes-to-gen-folder","text":"Note that in gen/ISDx/AS10xx/supervisord.conf the path of the SCION Deamon socket needs to be changed as follows: \"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\" .","title":"Changes to gen folder"},{"location":"native_setup/android/#vpn-connection-to-scionlab","text":"Unfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the Open VPN app can be installed to connect to SCIONLab via VPN. The client.conf file that is provided by the SCIONLab coordinator needs to be renamed to client.ovpn before it can be imported into the app. Additionally, the line route 10.0.8.0/24 needs to be added to the file.","title":"VPN Connection to SCIONLab"},{"location":"native_setup/android/#endhost-configuration-vs-full-as","text":"It is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage. If you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.","title":"Endhost configuration vs. full AS"},{"location":"native_setup/image_builder/","text":"Running SCION on an ARM minicomputer using a prebuilt image Introduction This tutorial will guide you through the steps required to run the SCION infrastructure on ARM minicomputers such as a Raspberry Pi or an Odroid XU4. The list below shows all currently supported devices and what OS will be installed: Raspberry Pi Ubuntu MATE Rasbperry Pi 2 Ubuntu Raspberry Pi 3 Ubuntu Odroid XU4 Ubuntu minimal installation Odroid XU4 Ubuntu MATE Running SCION Running SCION consists of several steps: registering an account on SCIONLab Coordination Service , downloading the image corresponding to your device, installing it, and finally running the SCION infrastructure. Step One downloading a SCION image In order to download an image, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point and give it a label (optional). Choose Install on a dedicated SCION system (for experts) . Unless your device has a static, public routable IP address (not behind a NAT), choose Use an OpenVPN connection for this AS . Otherwise enter the IP address under which your device can be reached. Then, under Create SCION image for IoT device select your device from the dropdown list and click Build image . The procedure may take a few minutes. After it finishes a download link appears from which you can download your generated image. A screenshot of the user interface is shown below: Step Two installing the image The easiest way to install the image on your device is by using Etcher . Etcher is a graphical SD card writing tool available for Windows, Linux, and macOS. In Etcher select your downloaded scion.img.bz2 file and flash it to your SD card. Step Three run the SCION infrastructure Your device is now ready. You can connect to it via SSH like this (where you replace the IP address with the actual address of your device): ssh scion @192.168.1.1 The password for the scion user is scion . It's recommended to change it after the first login. SCION infrastructure and SCION-viz are started automatically on start up. Next steps After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Images for ARM minicomputers"},{"location":"native_setup/image_builder/#running-scion-on-an-arm-minicomputer-using-a-prebuilt-image","text":"","title":"Running SCION on an ARM minicomputer using a prebuilt image"},{"location":"native_setup/image_builder/#introduction","text":"This tutorial will guide you through the steps required to run the SCION infrastructure on ARM minicomputers such as a Raspberry Pi or an Odroid XU4. The list below shows all currently supported devices and what OS will be installed: Raspberry Pi Ubuntu MATE Rasbperry Pi 2 Ubuntu Raspberry Pi 3 Ubuntu Odroid XU4 Ubuntu minimal installation Odroid XU4 Ubuntu MATE","title":"Introduction"},{"location":"native_setup/image_builder/#running-scion","text":"Running SCION consists of several steps: registering an account on SCIONLab Coordination Service , downloading the image corresponding to your device, installing it, and finally running the SCION infrastructure.","title":"Running SCION"},{"location":"native_setup/image_builder/#step-one-downloading-a-scion-image","text":"In order to download an image, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point and give it a label (optional). Choose Install on a dedicated SCION system (for experts) . Unless your device has a static, public routable IP address (not behind a NAT), choose Use an OpenVPN connection for this AS . Otherwise enter the IP address under which your device can be reached. Then, under Create SCION image for IoT device select your device from the dropdown list and click Build image . The procedure may take a few minutes. After it finishes a download link appears from which you can download your generated image. A screenshot of the user interface is shown below:","title":"Step One &ndash; downloading a SCION image"},{"location":"native_setup/image_builder/#step-two-installing-the-image","text":"The easiest way to install the image on your device is by using Etcher . Etcher is a graphical SD card writing tool available for Windows, Linux, and macOS. In Etcher select your downloaded scion.img.bz2 file and flash it to your SD card.","title":"Step Two &ndash; installing the image"},{"location":"native_setup/image_builder/#step-three-run-the-scion-infrastructure","text":"Your device is now ready. You can connect to it via SSH like this (where you replace the IP address with the actual address of your device): ssh scion @192.168.1.1 The password for the scion user is scion . It's recommended to change it after the first login. SCION infrastructure and SCION-viz are started automatically on start up.","title":"Step Three &ndash; run the SCION infrastructure"},{"location":"native_setup/image_builder/#next-steps","text":"After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Next steps"},{"location":"native_setup/rpi_ubuntu/","text":"Building SCION for a Raspberry Pi Ubuntu MATE Introduction The SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the regular x86 build , although there are a few additional steps required to make everything work. Prerequisites In this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the installation guide . Update packages to latest version It is recommended to update all packages before starting the installation process of SCION: sudo apt update sudo apt upgrade Install necessary tools Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username. Install necessary packages sudo apt install git curl Configure Go workspace Tip You can skip this step if you have Go workspaces already configured. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$HOME/.local/bin:/usr/local/go/bin:$GOPATH/bin ~/.profile source ~/.profile Install SCION Step One clone the SCION repository After the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC Step Two apply necessary patches On ARM architectures, it is necessary to apply two patches as follows: curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/421d8bfecdd225a3b17a18ec1c1e1bf86c436b35/arm-scionlab-update2.patch | patch -p1 In order to enable updating the system, we commit the patched changes into the local arm-modified branch: git commit -am Modified to compile on ARM systems Troubleshooting If your git identity is not configured, commits won't be possible. Configuring the user identity on a newly installed git can be done as follows: cd $SC git config user.name John Doe git config user.email johndoe@example.com Step Three configure Python path variable Some SCION components like SCIONviz require Python libraries which are located in the scion root directory. In order to make them accessible, exporting the PYTHONPATH environment variable is required: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile Step Four finish installing the required packages The build process is quite demanding in memory, so the machine has to have more than the 1GB of main memory that it comes with. To add one more gigabyte from the swap follow these steps: sudo fallocate -l 1G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile echo /swapfile swap swap defaults 0 0 | sudo tee -a /etc/fstab free -h In order to install dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c yes | GO_INSTALL=true ./env/deps ./scion.sh build Note You might be asked to enter the sudo password after running the command This will finish installing the required dependencies and system packages. Step Five configure the host Zookeeper instance Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). sudo cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg Next steps After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Ubuntu MATE Raspberry PI"},{"location":"native_setup/rpi_ubuntu/#building-scion-for-a-raspberry-pi-ubuntu-mate","text":"","title":"Building SCION for a Raspberry Pi &ndash; Ubuntu MATE"},{"location":"native_setup/rpi_ubuntu/#introduction","text":"The SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the regular x86 build , although there are a few additional steps required to make everything work.","title":"Introduction"},{"location":"native_setup/rpi_ubuntu/#prerequisites","text":"In this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the installation guide . Update packages to latest version It is recommended to update all packages before starting the installation process of SCION: sudo apt update sudo apt upgrade","title":"Prerequisites"},{"location":"native_setup/rpi_ubuntu/#install-necessary-tools","text":"Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username.","title":"Install necessary tools"},{"location":"native_setup/rpi_ubuntu/#install-necessary-packages","text":"sudo apt install git curl","title":"Install necessary packages"},{"location":"native_setup/rpi_ubuntu/#configure-go-workspace","text":"Tip You can skip this step if you have Go workspaces already configured. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$HOME/.local/bin:/usr/local/go/bin:$GOPATH/bin ~/.profile source ~/.profile","title":"Configure Go workspace"},{"location":"native_setup/rpi_ubuntu/#install-scion","text":"","title":"Install SCION"},{"location":"native_setup/rpi_ubuntu/#step-one-clone-the-scion-repository","text":"After the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC","title":"Step One &ndash; clone the SCION repository"},{"location":"native_setup/rpi_ubuntu/#step-two-apply-necessary-patches","text":"On ARM architectures, it is necessary to apply two patches as follows: curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/421d8bfecdd225a3b17a18ec1c1e1bf86c436b35/arm-scionlab-update2.patch | patch -p1 In order to enable updating the system, we commit the patched changes into the local arm-modified branch: git commit -am Modified to compile on ARM systems Troubleshooting If your git identity is not configured, commits won't be possible. Configuring the user identity on a newly installed git can be done as follows: cd $SC git config user.name John Doe git config user.email johndoe@example.com","title":"Step Two &ndash; apply necessary patches"},{"location":"native_setup/rpi_ubuntu/#step-three-configure-python-path-variable","text":"Some SCION components like SCIONviz require Python libraries which are located in the scion root directory. In order to make them accessible, exporting the PYTHONPATH environment variable is required: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile","title":"Step Three &ndash; configure Python path variable"},{"location":"native_setup/rpi_ubuntu/#step-four-finish-installing-the-required-packages","text":"The build process is quite demanding in memory, so the machine has to have more than the 1GB of main memory that it comes with. To add one more gigabyte from the swap follow these steps: sudo fallocate -l 1G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile echo /swapfile swap swap defaults 0 0 | sudo tee -a /etc/fstab free -h In order to install dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c yes | GO_INSTALL=true ./env/deps ./scion.sh build Note You might be asked to enter the sudo password after running the command This will finish installing the required dependencies and system packages.","title":"Step Four &ndash; finish installing the required packages"},{"location":"native_setup/rpi_ubuntu/#step-five-configure-the-host-zookeeper-instance","text":"Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). sudo cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg","title":"Step Five &ndash; configure the host Zookeeper instance"},{"location":"native_setup/rpi_ubuntu/#next-steps","text":"After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Next steps"},{"location":"native_setup/ubuntu_x86_build/","text":"Building SCION on Ubuntu 16.04 x86-64 Introduction This tutorial will guide you through the steps required to install SCION on an x86 system running Ubuntu 16.04. For details on how to build SCION on a Raspberry Pi, please take a look at how to build SCION on a Raspberry Pi . Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username. Easy Way (using the SCION install script) The easy way to install SCION is to use the SCION install script: wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_install_script.sh chmod +x scion_install_script.sh The SCION install script supports various ways to connect to SCION: Running the SCION infrastructure on a local topology If the SCION install script is executed without any arguments, SCION will be run on a local topology: ./scion_install_script.sh For more information, check out Running the SCION infrastructure on a local topology . Connecting to SCIONLab Installing a SCION AS and connecting it to SCIONLab requires that you have already downloaded the necessary configuration from the SCION Coordination Service . To do so, please follow one of the following options, depending on the network configuration of the system on which SCION will be installed until you have the configuration files: Connecting to SCIONLab with a static public IP address Connecting to SCIONLab with a static IP address, but behind a NAT Connecting to SCIONLab via VPN (without a static IP address) The configuration downloaded from the SCION Coordination Service includes a gen folder that needs to be uploaded to the target system and provided as an argument to the install script: export BIDIR = ` pwd ` ./scion_install_script.sh -g $BIDIR /gen/ In case of connecting to SCIONLab via VPN, the OpenVPN client configuration ( client.conf ), that is included in the configuration downloaded from the SCION Coordination Service needs to be provided as argument additionally: export BIDIR = ` pwd ` ./scion_install_script.sh -g $BIDIR /gen/ -v $BIDIR /client.conf Next Steps The scion_install_script.sh execution declares new variable definitions (e.g. $SC ) in ~/.profile . It is advised to log out and log in again for them to take effect. After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation . Advanced Way (manual installation) The following steps will guide you through the manual installation of the tools necessary for running SCION. Step One install Go In order to run SCION, you must have Go version 1.9.x installed. The installation steps below will automatically install the correct GO version, but be aware that if you are running a different Go version or are using a different gopath, the following steps may break other Go software that you are running. Step Two configure your Go workspace Tip You can skip this step if you already have a Go workspace configured on your machine. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$GOPATH/bin ~/.profile source ~/.profile SCION installation Step One clone the SCION repository After the Go workspace has been configured, we can check out the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC Step Two configure Python path variable Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile Step Three finish installing the required packages In order to install all the dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c yes | GO_INSTALL=true ./env/deps Note You might be asked for your sudo password after running the command This will finish installing the required dependencies and system packages. Step Four configure the host Zookeeper instance Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg Next steps After finishing the installation of SCION, you can run the architecture on several different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Ubuntu 16.04 x86-64"},{"location":"native_setup/ubuntu_x86_build/#building-scion-on-ubuntu-1604-x86-64","text":"","title":"Building SCION on Ubuntu 16.04 x86-64"},{"location":"native_setup/ubuntu_x86_build/#introduction","text":"This tutorial will guide you through the steps required to install SCION on an x86 system running Ubuntu 16.04. For details on how to build SCION on a Raspberry Pi, please take a look at how to build SCION on a Raspberry Pi . Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username.","title":"Introduction"},{"location":"native_setup/ubuntu_x86_build/#easy-way-using-the-scion-install-script","text":"The easy way to install SCION is to use the SCION install script: wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_install_script.sh chmod +x scion_install_script.sh The SCION install script supports various ways to connect to SCION:","title":"Easy Way (using the SCION install script)"},{"location":"native_setup/ubuntu_x86_build/#running-the-scion-infrastructure-on-a-local-topology","text":"If the SCION install script is executed without any arguments, SCION will be run on a local topology: ./scion_install_script.sh For more information, check out Running the SCION infrastructure on a local topology .","title":"Running the SCION infrastructure on a local topology"},{"location":"native_setup/ubuntu_x86_build/#connecting-to-scionlab","text":"Installing a SCION AS and connecting it to SCIONLab requires that you have already downloaded the necessary configuration from the SCION Coordination Service . To do so, please follow one of the following options, depending on the network configuration of the system on which SCION will be installed until you have the configuration files: Connecting to SCIONLab with a static public IP address Connecting to SCIONLab with a static IP address, but behind a NAT Connecting to SCIONLab via VPN (without a static IP address) The configuration downloaded from the SCION Coordination Service includes a gen folder that needs to be uploaded to the target system and provided as an argument to the install script: export BIDIR = ` pwd ` ./scion_install_script.sh -g $BIDIR /gen/ In case of connecting to SCIONLab via VPN, the OpenVPN client configuration ( client.conf ), that is included in the configuration downloaded from the SCION Coordination Service needs to be provided as argument additionally: export BIDIR = ` pwd ` ./scion_install_script.sh -g $BIDIR /gen/ -v $BIDIR /client.conf","title":"Connecting to SCIONLab"},{"location":"native_setup/ubuntu_x86_build/#next-steps","text":"The scion_install_script.sh execution declares new variable definitions (e.g. $SC ) in ~/.profile . It is advised to log out and log in again for them to take effect. After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next Steps"},{"location":"native_setup/ubuntu_x86_build/#advanced-way-manual-installation","text":"The following steps will guide you through the manual installation of the tools necessary for running SCION.","title":"Advanced Way (manual installation)"},{"location":"native_setup/ubuntu_x86_build/#step-one-install-go","text":"In order to run SCION, you must have Go version 1.9.x installed. The installation steps below will automatically install the correct GO version, but be aware that if you are running a different Go version or are using a different gopath, the following steps may break other Go software that you are running.","title":"Step One &ndash; install Go"},{"location":"native_setup/ubuntu_x86_build/#step-two-configure-your-go-workspace","text":"Tip You can skip this step if you already have a Go workspace configured on your machine. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$GOPATH/bin ~/.profile source ~/.profile","title":"Step Two &ndash; configure your Go workspace"},{"location":"native_setup/ubuntu_x86_build/#scion-installation","text":"","title":"SCION installation"},{"location":"native_setup/ubuntu_x86_build/#step-one-clone-the-scion-repository","text":"After the Go workspace has been configured, we can check out the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC","title":"Step One &ndash; clone the SCION repository"},{"location":"native_setup/ubuntu_x86_build/#step-two-configure-python-path-variable","text":"Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile","title":"Step Two &ndash; configure Python path variable"},{"location":"native_setup/ubuntu_x86_build/#step-three-finish-installing-the-required-packages","text":"In order to install all the dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c yes | GO_INSTALL=true ./env/deps Note You might be asked for your sudo password after running the command This will finish installing the required dependencies and system packages.","title":"Step Three &ndash; finish installing the required packages"},{"location":"native_setup/ubuntu_x86_build/#step-four-configure-the-host-zookeeper-instance","text":"Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg","title":"Step Four &ndash; configure the host Zookeeper instance"},{"location":"native_setup/ubuntu_x86_build/#next-steps_1","text":"After finishing the installation of SCION, you can run the architecture on several different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Next steps"},{"location":"sample_projects/access_camera/","text":"Access camera images over SCION network The camerapp application contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the README.md . Install To install imagefetcher and imageserver (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install imagefetcher Note If you are running SCION in a VM this app is already installed. To use the image fetcher, you will need specify the address of an image server, for instance 17-ffaa:0:1102,[192.33.93.166]:42002 . Per default the client binds to localhost. You can specify any other client SCION address by providing the -c flag. A sample image server that can be contacted by any client is set up at 17-ffaa:0:1102,[192.33.93.166]:42002 . Images can be fetched with: imagefetcher -s 17 -ffaa:0:1102, [ 192 .33.93.166 ] :42002 The fetched image is then saved in the local directory. A sample image is shown below: imageserver The imageserver application keeps looking for .jpg files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used. Included is a simple paparazzi.py application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows: python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver/paparazzi.py imageserver -p 42002 This makes the server bind to localhost and listen on port 42002. Alternatively, it can bind to any other SCION address, specified by -s : python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver/paparazzi.py imageserver -s 17 -ffaa:0:1102, [ 192 .33.93.166 ] :42002","title":"Access camera images over SCION network"},{"location":"sample_projects/access_camera/#access-camera-images-over-scion-network","text":"The camerapp application contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the README.md .","title":"Access camera images over SCION network"},{"location":"sample_projects/access_camera/#install","text":"To install imagefetcher and imageserver (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install","title":"Install"},{"location":"sample_projects/access_camera/#imagefetcher","text":"Note If you are running SCION in a VM this app is already installed. To use the image fetcher, you will need specify the address of an image server, for instance 17-ffaa:0:1102,[192.33.93.166]:42002 . Per default the client binds to localhost. You can specify any other client SCION address by providing the -c flag. A sample image server that can be contacted by any client is set up at 17-ffaa:0:1102,[192.33.93.166]:42002 . Images can be fetched with: imagefetcher -s 17 -ffaa:0:1102, [ 192 .33.93.166 ] :42002 The fetched image is then saved in the local directory. A sample image is shown below:","title":"imagefetcher"},{"location":"sample_projects/access_camera/#imageserver","text":"The imageserver application keeps looking for .jpg files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used. Included is a simple paparazzi.py application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows: python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver/paparazzi.py imageserver -p 42002 This makes the server bind to localhost and listen on port 42002. Alternatively, it can bind to any other SCION address, specified by -s : python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver/paparazzi.py imageserver -s 17 -ffaa:0:1102, [ 192 .33.93.166 ] :42002","title":"imageserver"},{"location":"sample_projects/bat/","text":"Using bat for sending HTTP-requests over SCION The bat application is a cURL-like tool for sending HTTP requests to SCION enabled webservers and retrieve information in a human-readable format. Documentation is available in the README.md . Installation Install To install bat (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install Usage The general usage of bat is: bat [flags] [Method] URL [Item] Flags Flag Meaning -l local bind address -b benchmarking mode -b.N number of benchmark requests to send (default 1000) -b.C number of parallel clients in benchmark (default 100) -body Send raw data as body -d download mode with progress bar -f send data application/x-www-form-urlencoded (default false) -j send data application/json encoded (default true) -p pretty print JSON responses (default true) -print A (all), H (request header), B (request body), h (response header), b (response body), any combination possible -v show version number Method The method can be any of the regular HTTP methods. It defaults to GET if there is no data to send and to POST otherwise. URL bat accepts both, SCION addresses and hostnames as URLs. Hostnames are resolved by scanning the /etc/hosts/ file. New hosts can be added by simply including a line in that file. Below you see an example: # regular IPv4 hosts 127.0.0.1 localhost 123.456.789.0 dummy1 # regular IPv6 hosts fe80:cd00:0:cde:1257:0:211e:729c dummy2 123:4567:89ab:cdef:123:4567:89ab:cdef dummy3 # SCION hosts 17-ffaa:0:1,[192.168.1.1] host1 host2 18-ffaa:1:2,[10.0.8.10] host3 20-ffaa:c0ff:ee12,[0:0:0ff1:ce00:dead:10cc:baad:f00d] host4 Consequently, these two calls are equivalent: bat https://17-ffaa:0:1,[192.168.1.1]:8080/route bat https://host1:8080/route Note The scheme defaults to HTTPS, unencrypted HTTP is not supported Item Item key=value JSON/form-encoded key-value pair key:value custom header key=@/path/to/file send file content as value IO redirects ( , ) work as usual. Example servers Two example server applications can be found in scion-apps repository . Minimal starts a server which defines two routes: /download downloads a small HTML file from the server. /upload prints the form encoded content of the request body to the console. They show the basic GET and POST capabilities of bat. Image-server has a single route, /image which lets the user download an image from the server and save it to disk. This example shows the download capabilities of bat. To start any of the servers, run these commands in the respective folder: openssl req -x509 -newkey rsa:1024 -keyout key.pem -nodes -out cert.pem -days 365 -subj /CN=server server -local 17 -ffaa:1:1, [ 10 .0.0.15 ] :40002 -cert cert.pem -key key.pem Make sure you give your server a name (e.g. server) by adding a line to /etc/hosts . Then query it like so: For the minimal server: bat server:40002/download It should produce output similar to this: bat -f server:40002/upload foo = bar Which prints foo=bar in the server's console, and bat -b server:40002/download which runs a benchmark, producing output like this: For the image server: bat -d server:40002/image This places the downloaded image file in your current directory.","title":"bat - cURL-like tool"},{"location":"sample_projects/bat/#using-bat-for-sending-http-requests-over-scion","text":"The bat application is a cURL-like tool for sending HTTP requests to SCION enabled webservers and retrieve information in a human-readable format. Documentation is available in the README.md .","title":"Using bat for sending HTTP-requests over SCION"},{"location":"sample_projects/bat/#installation","text":"","title":"Installation"},{"location":"sample_projects/bat/#install","text":"To install bat (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install","title":"Install"},{"location":"sample_projects/bat/#usage","text":"The general usage of bat is: bat [flags] [Method] URL [Item]","title":"Usage"},{"location":"sample_projects/bat/#flags","text":"Flag Meaning -l local bind address -b benchmarking mode -b.N number of benchmark requests to send (default 1000) -b.C number of parallel clients in benchmark (default 100) -body Send raw data as body -d download mode with progress bar -f send data application/x-www-form-urlencoded (default false) -j send data application/json encoded (default true) -p pretty print JSON responses (default true) -print A (all), H (request header), B (request body), h (response header), b (response body), any combination possible -v show version number","title":"Flags"},{"location":"sample_projects/bat/#method","text":"The method can be any of the regular HTTP methods. It defaults to GET if there is no data to send and to POST otherwise.","title":"Method"},{"location":"sample_projects/bat/#url","text":"bat accepts both, SCION addresses and hostnames as URLs. Hostnames are resolved by scanning the /etc/hosts/ file. New hosts can be added by simply including a line in that file. Below you see an example: # regular IPv4 hosts 127.0.0.1 localhost 123.456.789.0 dummy1 # regular IPv6 hosts fe80:cd00:0:cde:1257:0:211e:729c dummy2 123:4567:89ab:cdef:123:4567:89ab:cdef dummy3 # SCION hosts 17-ffaa:0:1,[192.168.1.1] host1 host2 18-ffaa:1:2,[10.0.8.10] host3 20-ffaa:c0ff:ee12,[0:0:0ff1:ce00:dead:10cc:baad:f00d] host4 Consequently, these two calls are equivalent: bat https://17-ffaa:0:1,[192.168.1.1]:8080/route bat https://host1:8080/route Note The scheme defaults to HTTPS, unencrypted HTTP is not supported","title":"URL"},{"location":"sample_projects/bat/#item","text":"Item key=value JSON/form-encoded key-value pair key:value custom header key=@/path/to/file send file content as value IO redirects ( , ) work as usual.","title":"Item"},{"location":"sample_projects/bat/#example-servers","text":"Two example server applications can be found in scion-apps repository . Minimal starts a server which defines two routes: /download downloads a small HTML file from the server. /upload prints the form encoded content of the request body to the console. They show the basic GET and POST capabilities of bat. Image-server has a single route, /image which lets the user download an image from the server and save it to disk. This example shows the download capabilities of bat. To start any of the servers, run these commands in the respective folder: openssl req -x509 -newkey rsa:1024 -keyout key.pem -nodes -out cert.pem -days 365 -subj /CN=server server -local 17 -ffaa:1:1, [ 10 .0.0.15 ] :40002 -cert cert.pem -key key.pem Make sure you give your server a name (e.g. server) by adding a line to /etc/hosts . Then query it like so: For the minimal server: bat server:40002/download It should produce output similar to this: bat -f server:40002/upload foo = bar Which prints foo=bar in the server's console, and bat -b server:40002/download which runs a benchmark, producing output like this: For the image server: bat -d server:40002/image This places the downloaded image file in your current directory.","title":"Example servers"},{"location":"sample_projects/bwtester/","text":"The bwtester application The bandwidth testing application bwtester enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester README . Install To install bwtestclient and bwtestserver (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install For govendor issues, see note [1]. bwtestclient Note If you are running SCION in a VM this app is already installed. Sample servers are installed at the following locations: 17-ffaa:0:1102,[192.33.93.177]:30100 17-ffaa:1:13,[192.168.1.79]:30100 17-ffaa:1:f,[10.0.2.15]:30100 19-ffaa:1:22,[141.44.25.146]:30100 And at the attachment points: 17-ffaa:0:1107,[10.0.8.1]:30100 18-ffaa:0:1202,[10.0.8.1]:30100 19-ffaa:0:1303,[10.0.8.1]:30100 20-ffaa:0:1404,[10.0.8.1]:30100 You can test the application as follows (use -c to bind to a different address than localhost): bwtestclient -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :30100 The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), the total number of packets that will be sent, and the target bandwidth. For instance, 5,100,10,1600bps specifies that 10 packets of size 100 bytes will be sent over 5 seconds, resulting in a bandwidth of 1600bps. The question mark ? character can be used as wildcard for any of these parameters. Its value is then computed according to the other parameters. The parameters for the test in the client-to-server direction are specified with -cs , and the server-to-client direction with -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command: bwtestclient -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :30100 -cs 10 ,1000,1250,1Mbps -sc 10 ,1000,12500,10Mbps For more information run the application without arguments to print its usage. bwtestserver The server is started as follows: bwtestserver -p 30100 This makes the server bind to localhost and listen on port 30100. Alternatively, it can bind to any other SCION address, specified by -s: bwtestserver -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :30100 [1] govendor: govendor is already installed by the main SCION installation with the supported version. If you don't have govendor installed, you can do so using the following steps: mkdir $GOPATH /kardianos ; cd $GOPATH /kardianos/ git clone https://github.com/kardianos/govendor.git cd ./govendor/ git fetch ; git checkout fbbc78e8d1b533dfcf81c2a4be2cec2617a926f7 go install -v","title":"Bandwidth tester application"},{"location":"sample_projects/bwtester/#the-bwtester-application","text":"The bandwidth testing application bwtester enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester README .","title":"The bwtester application"},{"location":"sample_projects/bwtester/#install","text":"To install bwtestclient and bwtestserver (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install For govendor issues, see note [1].","title":"Install"},{"location":"sample_projects/bwtester/#bwtestclient","text":"Note If you are running SCION in a VM this app is already installed. Sample servers are installed at the following locations: 17-ffaa:0:1102,[192.33.93.177]:30100 17-ffaa:1:13,[192.168.1.79]:30100 17-ffaa:1:f,[10.0.2.15]:30100 19-ffaa:1:22,[141.44.25.146]:30100 And at the attachment points: 17-ffaa:0:1107,[10.0.8.1]:30100 18-ffaa:0:1202,[10.0.8.1]:30100 19-ffaa:0:1303,[10.0.8.1]:30100 20-ffaa:0:1404,[10.0.8.1]:30100 You can test the application as follows (use -c to bind to a different address than localhost): bwtestclient -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :30100 The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), the total number of packets that will be sent, and the target bandwidth. For instance, 5,100,10,1600bps specifies that 10 packets of size 100 bytes will be sent over 5 seconds, resulting in a bandwidth of 1600bps. The question mark ? character can be used as wildcard for any of these parameters. Its value is then computed according to the other parameters. The parameters for the test in the client-to-server direction are specified with -cs , and the server-to-client direction with -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command: bwtestclient -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :30100 -cs 10 ,1000,1250,1Mbps -sc 10 ,1000,12500,10Mbps For more information run the application without arguments to print its usage.","title":"bwtestclient"},{"location":"sample_projects/bwtester/#bwtestserver","text":"The server is started as follows: bwtestserver -p 30100 This makes the server bind to localhost and listen on port 30100. Alternatively, it can bind to any other SCION address, specified by -s: bwtestserver -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :30100 [1] govendor: govendor is already installed by the main SCION installation with the supported version. If you don't have govendor installed, you can do so using the following steps: mkdir $GOPATH /kardianos ; cd $GOPATH /kardianos/ git clone https://github.com/kardianos/govendor.git cd ./govendor/ git fetch ; git checkout fbbc78e8d1b533dfcf81c2a4be2cec2617a926f7 go install -v","title":"bwtestserver"},{"location":"sample_projects/fetch_sensor_readings/","text":"Read sensor readings over SCION network The sensorapp application contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response, containing the readings. Install To install sensorfetcher and sensorserver (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install sensorfetcher Note If you are running SCION in a VM this app is already installed. The sensorfetcher application sends a 0-length SCION UDP packet to the sensorserver application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try. To run the sensorfetcher application, you will need to specify the address of a sensor server, for instance 17-ffaa:0:1102,[192.33.93.177]:42003 , using the -s flag. Per default the client binds to localhost. You can specify any other client SCION address by providing the -c flag. Sample servers are at: 17-ffaa:0:1102,[192.33.93.177]:42003 17-ffaa:1:13,[192.168.1.79]:42003 Their readings can be fetched as follows: sensorfetcher -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :42003 sensorserver We use sensors from Tinkerforge, and the sensorreader.py Python application fetches the sensor values and writes them to stdout . The sensorserver application collects the readings, and serves them as a string to client requests. To start, we use the following command: python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/sensorreader.py | sensorserver -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :42003 If you do not have any sensor information available, then you can use a simple time application that reports the current time on your system: python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/timereader.py | sensorserver -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :42003","title":"Read a temperature sensor over the SCION network"},{"location":"sample_projects/fetch_sensor_readings/#read-sensor-readings-over-scion-network","text":"The sensorapp application contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response, containing the readings.","title":"Read sensor readings over SCION network"},{"location":"sample_projects/fetch_sensor_readings/#install","text":"To install sensorfetcher and sensorserver (and all SCIONLab apps ) and get dependencies as listed in vendor file: ./deps.sh make install","title":"Install"},{"location":"sample_projects/fetch_sensor_readings/#sensorfetcher","text":"Note If you are running SCION in a VM this app is already installed. The sensorfetcher application sends a 0-length SCION UDP packet to the sensorserver application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try. To run the sensorfetcher application, you will need to specify the address of a sensor server, for instance 17-ffaa:0:1102,[192.33.93.177]:42003 , using the -s flag. Per default the client binds to localhost. You can specify any other client SCION address by providing the -c flag. Sample servers are at: 17-ffaa:0:1102,[192.33.93.177]:42003 17-ffaa:1:13,[192.168.1.79]:42003 Their readings can be fetched as follows: sensorfetcher -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :42003","title":"sensorfetcher"},{"location":"sample_projects/fetch_sensor_readings/#sensorserver","text":"We use sensors from Tinkerforge, and the sensorreader.py Python application fetches the sensor values and writes them to stdout . The sensorserver application collects the readings, and serves them as a string to client requests. To start, we use the following command: python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/sensorreader.py | sensorserver -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :42003 If you do not have any sensor information available, then you can use a simple time application that reports the current time on your system: python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/timereader.py | sensorserver -s 17 -ffaa:0:1102, [ 192 .33.93.177 ] :42003","title":"sensorserver"},{"location":"sample_projects/multipath/","text":"Using multipath in SCION TBA","title":"Using multipath in SCION"},{"location":"sample_projects/multipath/#using-multipath-in-scion","text":"TBA","title":"Using multipath in SCION"},{"location":"sample_projects/rains/","text":"RAINS, Another Internet Naming Service RAINS is an alternate protocol for Internet name resolution, designed as a replacement of the Domain Name System protocol and is used in SCIONLab. Setup The following step assume that you are already running a SCION AS, that the environment variable $SC is set and the file $SC/gen/ia exists. Install the tool rdig, which allows you to make RAINS queries over SCION: go get github.com/netsec-ethz/rains/cmd/rdig Display the rdig help to learn about the parameters: rdig --help Add some convenience functions to your shell to facilitate using rains with the SCION tools until rains support gets integrated natively: echo mydig() { rdig @17-ffaa:0:1107,[192.33.93.195] $@ scionip4 -p 5025 | grep :A: | awk {print \\$6} | sed s/:scionip4:// ; } ~/.profile echo myHost() { echo `cat $SC/gen/ia | tr _ : `,[127.0.0.1]; } ~/.profile source ~/.profile Making queries To the resolver running in the Attachment Point: rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ns1 . snet . scionip4 - p 5025 To a rainsd server for the zone node.snet. : rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ap17 . node . snet . scionip4 - p 55553 Using scmp with rains $SC /bin/scmp echo -c 3 -local ` myHost ` -remote ` mydig ap17.node.snet. `","title":"Using rains"},{"location":"sample_projects/rains/#rains-another-internet-naming-service","text":"RAINS is an alternate protocol for Internet name resolution, designed as a replacement of the Domain Name System protocol and is used in SCIONLab.","title":"RAINS, Another Internet Naming Service"},{"location":"sample_projects/rains/#setup","text":"The following step assume that you are already running a SCION AS, that the environment variable $SC is set and the file $SC/gen/ia exists. Install the tool rdig, which allows you to make RAINS queries over SCION: go get github.com/netsec-ethz/rains/cmd/rdig Display the rdig help to learn about the parameters: rdig --help Add some convenience functions to your shell to facilitate using rains with the SCION tools until rains support gets integrated natively: echo mydig() { rdig @17-ffaa:0:1107,[192.33.93.195] $@ scionip4 -p 5025 | grep :A: | awk {print \\$6} | sed s/:scionip4:// ; } ~/.profile echo myHost() { echo `cat $SC/gen/ia | tr _ : `,[127.0.0.1]; } ~/.profile source ~/.profile","title":"Setup"},{"location":"sample_projects/rains/#making-queries","text":"To the resolver running in the Attachment Point: rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ns1 . snet . scionip4 - p 5025 To a rainsd server for the zone node.snet. : rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ap17 . node . snet . scionip4 - p 55553","title":"Making queries"},{"location":"sample_projects/rains/#using-scmp-with-rains","text":"$SC /bin/scmp echo -c 3 -local ` myHost ` -remote ` mydig ap17.node.snet. `","title":"Using scmp with rains"},{"location":"sample_projects/remote_sig/","text":"The SCION IP Gateway application The SCION IP Gateway SIG enables legacy IP applications to communicate over SCION. This tutorial describes how to set up two SIGs locally to test the SIG can enable any IP application to communicate over SCION. Environment To test the SIG we will make use of the Vagrant configurations provided on scionlab.org . Set up a Vagrant VM on a host A and a host B using the instructions from Virtual machine with VPN . Configuring the two SIGs We will now create the configuration for two SIG instances, one on the AS you started on host A AS A which we will call sigA and one on host B in AS B , which we will call sigB. Create the configuration directories for the SIGs, build the SIG binary and set the linux capabilities on the binary: export IA = $( cat $SC /gen/ia ) export IAd = $( cat $SC /gen/ia | sed s/_/\\:/g ) export AS = $( cat $SC /gen/ia | cut --fields = 2 --delimiter = - ) export ISD = $( cat $SC /gen/ia | cut --fields = 1 --delimiter = - ) mkdir -p ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/ go build -o ${ SC } /bin/sig ${ SC } /go/sig/main.go sudo setcap cap_net_admin+eip ${ SC } /bin/sig Enable routing: sudo sysctl net.ipv4.conf.default.rp_filter = 0 sudo sysctl net.ipv4.conf.all.rp_filter = 0 sudo sysctl net.ipv4.ip_forward = 1 Create the configuration for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.config: (You need to replace ${AS}, ${IA} and ${IAd} with the actual values on your system in these configuration files.) [sig] # ID of the SIG (required) ID = sigA # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 10.0.8.A # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10081 # Encapsulation data port. (default 10080) EncapPort = 10080 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigA # Id of the routing table (default 11) TunRTableId = 11 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 You can do so with the following command: sed -i s/\\${IA}/ ${ IA } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${IAd}/ ${ IAd } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${AS}/ ${ AS } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${ISD}/ ${ ISD } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config export tunIP = $( echo $( ip a | grep global tun ) | cut --fields = 2 --delimiter = ) sed -i s/10.0.8.A/ ${ tunIP } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config Create the traffic rules for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json: { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.11.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10084, EncapPort : 10083 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host B and 17-ffaa:1:XXX with the AS id of the remote AS B. And similarly the configuration and traffic rules for the sigB: at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.config [sig] # ID of the SIG (required) ID = sigB # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 172.16.0.12 # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10084 # Encapsulation data port. (default 10080) EncapPort = 10083 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigB # Id of the routing table (default 11) TunRTableId = 12 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 and at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.12.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10081, EncapPort : 10080 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host A and 17-ffaa:1:XXX with the AS id of the remote AS A. Since we are running our SIGs in a VM and we do not have spare physical interfaces on which to run them, we will create two dummy interfaces: sudo modprobe dummy On host A: sudo ip link set name dummy11 dev dummy0 sudo ip addr add 172 .16.0.11/32 brd + dev dummy11 label dummy11:0 On host B: sudo ip link add dummy12 type dummy sudo ip addr add 172.16.0.12/32 brd + dev dummy12 label dummy12:0 Now we need to add the routing rules for the two SIGs: On host A: sudo ip rule add to 172 .16.12.0/24 lookup 11 prio 11 On host B: sudo ip rule add to 172 .16.11.0/24 lookup 12 prio 12 Now start the two SIGs with the following commands: On Host A: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config $SC /logs/sig ${ IA } -1.log 2 1 and Host B: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigB.config $SC /logs/sig ${ IA } -1.log 2 1 To show the ip rules and routes, run: sudo ip rule show sudo ip route show table 11 sudo ip route show table 12 Testing You can test that your SIG configuration works by running some traffic over it. Add some server on host A and client on host B: Host A: sudo ip link add server type dummy sudo ip addr add 172 .16.12.1/24 brd + dev server label server:0 mkdir $SC /WWW echo Hello World! $SC /WWW/hello.html cd $SC /WWW/ python3 -m http.server --bind 172 .16.12.1 8081 Host B: sudo ip link add client type dummy sudo ip addr add 172 .16.11.1/24 brd + dev client label client:0 Query the server running on host A from host B: Host B: curl --interface 172 .16.11.1 172 .16.12.1:8081/hello.html You should see the \"Hello World!\" message as output from the last command.","title":"SCIONLab SIG testing"},{"location":"sample_projects/remote_sig/#the-scion-ip-gateway-application","text":"The SCION IP Gateway SIG enables legacy IP applications to communicate over SCION. This tutorial describes how to set up two SIGs locally to test the SIG can enable any IP application to communicate over SCION.","title":"The SCION IP Gateway application"},{"location":"sample_projects/remote_sig/#environment","text":"To test the SIG we will make use of the Vagrant configurations provided on scionlab.org . Set up a Vagrant VM on a host A and a host B using the instructions from Virtual machine with VPN .","title":"Environment"},{"location":"sample_projects/remote_sig/#configuring-the-two-sigs","text":"We will now create the configuration for two SIG instances, one on the AS you started on host A AS A which we will call sigA and one on host B in AS B , which we will call sigB. Create the configuration directories for the SIGs, build the SIG binary and set the linux capabilities on the binary: export IA = $( cat $SC /gen/ia ) export IAd = $( cat $SC /gen/ia | sed s/_/\\:/g ) export AS = $( cat $SC /gen/ia | cut --fields = 2 --delimiter = - ) export ISD = $( cat $SC /gen/ia | cut --fields = 1 --delimiter = - ) mkdir -p ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/ go build -o ${ SC } /bin/sig ${ SC } /go/sig/main.go sudo setcap cap_net_admin+eip ${ SC } /bin/sig Enable routing: sudo sysctl net.ipv4.conf.default.rp_filter = 0 sudo sysctl net.ipv4.conf.all.rp_filter = 0 sudo sysctl net.ipv4.ip_forward = 1 Create the configuration for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.config: (You need to replace ${AS}, ${IA} and ${IAd} with the actual values on your system in these configuration files.) [sig] # ID of the SIG (required) ID = sigA # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 10.0.8.A # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10081 # Encapsulation data port. (default 10080) EncapPort = 10080 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigA # Id of the routing table (default 11) TunRTableId = 11 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 You can do so with the following command: sed -i s/\\${IA}/ ${ IA } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${IAd}/ ${ IAd } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${AS}/ ${ AS } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${ISD}/ ${ ISD } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config export tunIP = $( echo $( ip a | grep global tun ) | cut --fields = 2 --delimiter = ) sed -i s/10.0.8.A/ ${ tunIP } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config Create the traffic rules for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json: { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.11.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10084, EncapPort : 10083 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host B and 17-ffaa:1:XXX with the AS id of the remote AS B. And similarly the configuration and traffic rules for the sigB: at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.config [sig] # ID of the SIG (required) ID = sigB # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 172.16.0.12 # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10084 # Encapsulation data port. (default 10080) EncapPort = 10083 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigB # Id of the routing table (default 11) TunRTableId = 12 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 and at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.12.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10081, EncapPort : 10080 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host A and 17-ffaa:1:XXX with the AS id of the remote AS A. Since we are running our SIGs in a VM and we do not have spare physical interfaces on which to run them, we will create two dummy interfaces: sudo modprobe dummy On host A: sudo ip link set name dummy11 dev dummy0 sudo ip addr add 172 .16.0.11/32 brd + dev dummy11 label dummy11:0 On host B: sudo ip link add dummy12 type dummy sudo ip addr add 172.16.0.12/32 brd + dev dummy12 label dummy12:0 Now we need to add the routing rules for the two SIGs: On host A: sudo ip rule add to 172 .16.12.0/24 lookup 11 prio 11 On host B: sudo ip rule add to 172 .16.11.0/24 lookup 12 prio 12 Now start the two SIGs with the following commands: On Host A: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config $SC /logs/sig ${ IA } -1.log 2 1 and Host B: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigB.config $SC /logs/sig ${ IA } -1.log 2 1 To show the ip rules and routes, run: sudo ip rule show sudo ip route show table 11 sudo ip route show table 12","title":"Configuring the two SIGs"},{"location":"sample_projects/remote_sig/#testing","text":"You can test that your SIG configuration works by running some traffic over it. Add some server on host A and client on host B: Host A: sudo ip link add server type dummy sudo ip addr add 172 .16.12.1/24 brd + dev server label server:0 mkdir $SC /WWW echo Hello World! $SC /WWW/hello.html cd $SC /WWW/ python3 -m http.server --bind 172 .16.12.1 8081 Host B: sudo ip link add client type dummy sudo ip addr add 172 .16.11.1/24 brd + dev client label client:0 Query the server running on host A from host B: Host B: curl --interface 172 .16.11.1 172 .16.12.1:8081/hello.html You should see the \"Hello World!\" message as output from the last command.","title":"Testing"},{"location":"scion_tricks/changing_gen_dir/","text":"Updating gen directory Introduction The complete configuration for SCION infrastructure is stored in gen directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data. Content for this directory can be created in several ways: Using topology definition from topology directory. Described in Running SCION on local topology Downloading from SCIONLab Coordination Service . Described in Configuring SCION Lab with OpenVPN . Manually creating topology Restarting SCION infrastructure Every time gen directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands: cd $SC ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After topology has been updated it is recommended to verify that its working correctly","title":"Updating gen directory"},{"location":"scion_tricks/changing_gen_dir/#updating-gen-directory","text":"","title":"Updating gen directory"},{"location":"scion_tricks/changing_gen_dir/#introduction","text":"The complete configuration for SCION infrastructure is stored in gen directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data. Content for this directory can be created in several ways: Using topology definition from topology directory. Described in Running SCION on local topology Downloading from SCIONLab Coordination Service . Described in Configuring SCION Lab with OpenVPN . Manually creating topology","title":"Introduction"},{"location":"scion_tricks/changing_gen_dir/#restarting-scion-infrastructure","text":"Every time gen directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands: cd $SC ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Restarting SCION infrastructure"},{"location":"scion_tricks/changing_gen_dir/#next-steps","text":"After topology has been updated it is recommended to verify that its working correctly","title":"Next steps"},{"location":"scion_tricks/setup_startup/","text":"Run SCION and SCION-viz automatically on boot Prerequisites It is necessary to have SCION successfully installed on your system before proceeding with this tutorial. Necessary steps for installing SCION can be found on following pages: Installing SCION on Ubuntu x86-64 Installing SCION on Raspberry PI Ubuntu Tip If you are using SCION VM, SCION is already running on system boot so following steps are not required to be done manually. Installation We will create systemd service that will be configured to run SCION infrastructure on system boot. Step One - Get template service files To avoid creating service files from scratch, we can download templates from SCION Lab repository and customize them for current system. Downloaded template files have value _USER_ instead of real system user so we will have to adjust it. Complete process can be finished with following commands: mkdir -p /tmp/scion_services cd /tmp/scion_services wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion.service wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion-viz.service sed -i s/_USER_/ $USER /g *.service Step Two - Register services with systemd We need to copy newly created services to systemd directory and enable them. This can be done with following commands: sudo cp *.service /etc/systemd/system/ sudo systemctl enable scion.service sudo systemctl enable scion-viz.service Conclusion These steps should be sufficient to make SCION run on your system boot. Reboot the system and verify that everything works as expected.","title":"Running SCION on system boot"},{"location":"scion_tricks/setup_startup/#run-scion-and-scion-viz-automatically-on-boot","text":"","title":"Run SCION and SCION-viz automatically on boot"},{"location":"scion_tricks/setup_startup/#prerequisites","text":"It is necessary to have SCION successfully installed on your system before proceeding with this tutorial. Necessary steps for installing SCION can be found on following pages: Installing SCION on Ubuntu x86-64 Installing SCION on Raspberry PI Ubuntu Tip If you are using SCION VM, SCION is already running on system boot so following steps are not required to be done manually.","title":"Prerequisites"},{"location":"scion_tricks/setup_startup/#installation","text":"We will create systemd service that will be configured to run SCION infrastructure on system boot.","title":"Installation"},{"location":"scion_tricks/setup_startup/#step-one-get-template-service-files","text":"To avoid creating service files from scratch, we can download templates from SCION Lab repository and customize them for current system. Downloaded template files have value _USER_ instead of real system user so we will have to adjust it. Complete process can be finished with following commands: mkdir -p /tmp/scion_services cd /tmp/scion_services wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion.service wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion-viz.service sed -i s/_USER_/ $USER /g *.service","title":"Step One - Get template service files"},{"location":"scion_tricks/setup_startup/#step-two-register-services-with-systemd","text":"We need to copy newly created services to systemd directory and enable them. This can be done with following commands: sudo cp *.service /etc/systemd/system/ sudo systemctl enable scion.service sudo systemctl enable scion-viz.service","title":"Step Two - Register services with systemd"},{"location":"scion_tricks/setup_startup/#conclusion","text":"These steps should be sufficient to make SCION run on your system boot. Reboot the system and verify that everything works as expected.","title":"Conclusion"},{"location":"scion_tricks/updating_scion/","text":"Updating SCION to newest version Introduction Our implementation of SCION is still under development, and ScionLab sometimes upgrades the services to use new features from new versions. Some of these changes will break compatibility with past releases. In these cases, we will send an email notifying all the users of such changes. Running SCION in a VM If you run SCION inside a VM, SCION should be kept up to date automatically. With this automatic process you don't have to worry about the updates. Still, if you are interested in knowing how we do it, read the next subsection. How is my SCION VM kept up to date? You can always check that is the case by listing the running timers and looking for the one upgrading SCION: sudo systemctl list-timers NEXT LEFT LAST PASSED UNIT ACTIVATES Wed 2018 -04-18 16 :35:24 UTC 8min left Wed 2018 -04-18 16 :25:23 UTC 1min 36s ago scionupgrade.timer scionupgrade.service This indicates we have the upgrade service installed. The upgrade service is checking every day that the local git repository is up to date with the scionlab branch. This is done by rebasing the local copy on top of the branch: cd $SC git fetch origin scionlab git rebase origin/scionlab We do this to maximize the chances of successfully updating even if you had local changes done on top. The automatic process will restart SCION if it detected that we downloaded a new version. Running SCION in a dedicated machine This type of installations need a manual trigger of the update. If you received an email from us saying that we are going to update the infrastructure, and that the update contains breaking changes , you will need to follow these steps if you want to continue using SCION in ScionLab. There are essentially two possibilities for dedicated systems: Run a script to update your dedicated systems Completely manually do the steps (experts only) We recommend the first approach because of its simplicity. Script to update We offer the possibility of a simplified way to update your system. You need to run the following steps in each of your dedicated systems: cd /tmp wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_upgrade_script.sh -O upgrade.sh bash upgrade.sh -m The -m parameter is important to indicate you are running the script manually. This should be enough to update your AS. If it fails, ensure that you have in $SC a git remote named origin pointing to our repository at https://github.com/netsec-ethz/netsec-scion.git . You can check this by running cd $SC; git remote -v For reference, we show an example run of the script: $cd /tmp $wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_upgrade_script.sh -O upgrade.sh --2019-01-29 17 :10:21-- https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_upgrade_script.sh Resolving raw.githubusercontent.com ( raw.githubusercontent.com ) ... 151 .101.112.133 Connecting to raw.githubusercontent.com ( raw.githubusercontent.com ) | 151 .101.112.133 | :443... connected. HTTP request sent, awaiting response... 200 OK ... Done, got response from server: SCION IA follows standard. Done. Manual steps to update (experts) If you choose to perform the update yourself, the steps to manually update your AS involve: Update the source code of the SCION implementation. Rebuild SCION services. Get an updated configuration from the Coordinator Update the source code Stash all uncommitted changes before doing this procedure. cd $SC ./scion.sh stop git stash git fetch origin git reset --hard origin/scionlab Rebuild SCION Services cd $SC sudo apt-get purge parallel ./scion.sh clean ./env/deps ./scion.sh build Get updated configuration cd /tmp wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scripts/check_as_config.sh -O check_as_config.sh bash check_as_config.sh -f Last step to finish the update Your SCION installation is now up to date. If SCION is built without problems, we now need to reload the configuration and then start SCION: ./supervisor/supervisor.sh reload rm ./gen-cache/* ./scion.sh start nobuild And SCION services are running now. SCION Applications After the update, the applications that are not delivered directly with SCION (e.g. bwtester or your own applications) will need to be rebuilt. You will have to follow the appropriate steps for each one of them reading their own documentation. E.g. bwtester has its own tutorial on how to build it. Contact us If you experience a problem with the update, please contact us in the community mailing list. Visit the SCION Community for more details.","title":"Updating SCION"},{"location":"scion_tricks/updating_scion/#updating-scion-to-newest-version","text":"","title":"Updating SCION to newest version"},{"location":"scion_tricks/updating_scion/#introduction","text":"Our implementation of SCION is still under development, and ScionLab sometimes upgrades the services to use new features from new versions. Some of these changes will break compatibility with past releases. In these cases, we will send an email notifying all the users of such changes.","title":"Introduction"},{"location":"scion_tricks/updating_scion/#running-scion-in-a-vm","text":"If you run SCION inside a VM, SCION should be kept up to date automatically. With this automatic process you don't have to worry about the updates. Still, if you are interested in knowing how we do it, read the next subsection.","title":"Running SCION in a VM"},{"location":"scion_tricks/updating_scion/#how-is-my-scion-vm-kept-up-to-date","text":"You can always check that is the case by listing the running timers and looking for the one upgrading SCION: sudo systemctl list-timers NEXT LEFT LAST PASSED UNIT ACTIVATES Wed 2018 -04-18 16 :35:24 UTC 8min left Wed 2018 -04-18 16 :25:23 UTC 1min 36s ago scionupgrade.timer scionupgrade.service This indicates we have the upgrade service installed. The upgrade service is checking every day that the local git repository is up to date with the scionlab branch. This is done by rebasing the local copy on top of the branch: cd $SC git fetch origin scionlab git rebase origin/scionlab We do this to maximize the chances of successfully updating even if you had local changes done on top. The automatic process will restart SCION if it detected that we downloaded a new version.","title":"How is my SCION VM kept up to date?"},{"location":"scion_tricks/updating_scion/#running-scion-in-a-dedicated-machine","text":"This type of installations need a manual trigger of the update. If you received an email from us saying that we are going to update the infrastructure, and that the update contains breaking changes , you will need to follow these steps if you want to continue using SCION in ScionLab. There are essentially two possibilities for dedicated systems: Run a script to update your dedicated systems Completely manually do the steps (experts only) We recommend the first approach because of its simplicity.","title":"Running SCION in a dedicated machine"},{"location":"scion_tricks/updating_scion/#script-to-update","text":"We offer the possibility of a simplified way to update your system. You need to run the following steps in each of your dedicated systems: cd /tmp wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_upgrade_script.sh -O upgrade.sh bash upgrade.sh -m The -m parameter is important to indicate you are running the script manually. This should be enough to update your AS. If it fails, ensure that you have in $SC a git remote named origin pointing to our repository at https://github.com/netsec-ethz/netsec-scion.git . You can check this by running cd $SC; git remote -v For reference, we show an example run of the script: $cd /tmp $wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_upgrade_script.sh -O upgrade.sh --2019-01-29 17 :10:21-- https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_upgrade_script.sh Resolving raw.githubusercontent.com ( raw.githubusercontent.com ) ... 151 .101.112.133 Connecting to raw.githubusercontent.com ( raw.githubusercontent.com ) | 151 .101.112.133 | :443... connected. HTTP request sent, awaiting response... 200 OK ... Done, got response from server: SCION IA follows standard. Done.","title":"Script to update"},{"location":"scion_tricks/updating_scion/#manual-steps-to-update-experts","text":"If you choose to perform the update yourself, the steps to manually update your AS involve: Update the source code of the SCION implementation. Rebuild SCION services. Get an updated configuration from the Coordinator","title":"Manual steps to update (experts)"},{"location":"scion_tricks/updating_scion/#update-the-source-code","text":"Stash all uncommitted changes before doing this procedure. cd $SC ./scion.sh stop git stash git fetch origin git reset --hard origin/scionlab","title":"Update the source code"},{"location":"scion_tricks/updating_scion/#rebuild-scion-services","text":"cd $SC sudo apt-get purge parallel ./scion.sh clean ./env/deps ./scion.sh build","title":"Rebuild SCION Services"},{"location":"scion_tricks/updating_scion/#get-updated-configuration","text":"cd /tmp wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scripts/check_as_config.sh -O check_as_config.sh bash check_as_config.sh -f","title":"Get updated configuration"},{"location":"scion_tricks/updating_scion/#last-step-to-finish-the-update","text":"Your SCION installation is now up to date. If SCION is built without problems, we now need to reload the configuration and then start SCION: ./supervisor/supervisor.sh reload rm ./gen-cache/* ./scion.sh start nobuild And SCION services are running now.","title":"Last step to finish the update"},{"location":"scion_tricks/updating_scion/#scion-applications","text":"After the update, the applications that are not delivered directly with SCION (e.g. bwtester or your own applications) will need to be rebuilt. You will have to follow the appropriate steps for each one of them reading their own documentation. E.g. bwtester has its own tutorial on how to build it.","title":"SCION Applications"},{"location":"scion_tricks/updating_scion/#contact-us","text":"If you experience a problem with the update, please contact us in the community mailing list. Visit the SCION Community for more details.","title":"Contact us"},{"location":"scion_tricks/wireshark/","text":"Adding Wireshark and Tshark SCION protocol dissector Introduction In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging of SCION protocol. You can read more on what protocol dissector does on Wireshark docs Prerequisites In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system. Tip Running Wireshark is recommended on machines with graphical interface. Install Wireshark In order to install Wireshark, follow installation guide on Wireshark website for your platform. Alternatively on Ubuntu system you can run following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark Install Tshark In case you want to install Tshark on Ubuntu simply run: sudo apt install tshark Step One - Finding plugin directory We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there. Wireshark From Help menu select About Wireshark and in newly opened window select Folders tab. There are paths to global and local plugin directory. In this tutorial we will use global plugin directory which is usually: /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6 Plugins from global plugin directory are available to all users, while local is only for currently running user. Tshark In order to find the directory where Tshark is loading plugins from we can run following command: tshark -G plugins Output will look something like this: opcua.so 1.1.0 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so irda.so 0.0.6 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so mate.so 1.0.0a dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so ... Examining output we can conclude that plugins are being loaded from /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ So we will use that for our plugin directory. Step Two - Adding plugin Wireshark/Tshark plugin is located in SCION project at tools/wireshark/scion.lua . It is necessary to download scion.lua file and place it in plugin directory acquired in previous step. In Ubuntu system this can be done with following command: sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua","title":"Adding Wireshark dissector"},{"location":"scion_tricks/wireshark/#adding-wireshark-and-tshark-scion-protocol-dissector","text":"","title":"Adding Wireshark and Tshark SCION protocol dissector"},{"location":"scion_tricks/wireshark/#introduction","text":"In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging of SCION protocol. You can read more on what protocol dissector does on Wireshark docs","title":"Introduction"},{"location":"scion_tricks/wireshark/#prerequisites","text":"In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system. Tip Running Wireshark is recommended on machines with graphical interface.","title":"Prerequisites"},{"location":"scion_tricks/wireshark/#install-wireshark","text":"In order to install Wireshark, follow installation guide on Wireshark website for your platform. Alternatively on Ubuntu system you can run following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark","title":"Install Wireshark"},{"location":"scion_tricks/wireshark/#install-tshark","text":"In case you want to install Tshark on Ubuntu simply run: sudo apt install tshark","title":"Install Tshark"},{"location":"scion_tricks/wireshark/#step-one-finding-plugin-directory","text":"We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there.","title":"Step One - Finding plugin directory"},{"location":"scion_tricks/wireshark/#wireshark","text":"From Help menu select About Wireshark and in newly opened window select Folders tab. There are paths to global and local plugin directory. In this tutorial we will use global plugin directory which is usually: /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6 Plugins from global plugin directory are available to all users, while local is only for currently running user.","title":"Wireshark"},{"location":"scion_tricks/wireshark/#tshark","text":"In order to find the directory where Tshark is loading plugins from we can run following command: tshark -G plugins Output will look something like this: opcua.so 1.1.0 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so irda.so 0.0.6 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so mate.so 1.0.0a dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so ... Examining output we can conclude that plugins are being loaded from /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ So we will use that for our plugin directory.","title":"Tshark"},{"location":"scion_tricks/wireshark/#step-two-adding-plugin","text":"Wireshark/Tshark plugin is located in SCION project at tools/wireshark/scion.lua . It is necessary to download scion.lua file and place it in plugin directory acquired in previous step. In Ubuntu system this can be done with following command: sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua","title":"Step Two - Adding plugin"},{"location":"scionbox/scionbox/","text":"SCION Box Note The SCION box feature is currently not operational. Please come back later. Introduction This tutorial introduces you to SCION box, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request here in particular. Setting up the PCEngines device You received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface). You can then check on the scion-coordinator on your user page that you device status is online. Hint In case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface. The SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it. Make use of the device The SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the SCION book . In addition, SCION boxes can run the SCIONLab Webapp server which allows you to visualize the paths your AS knows about. You can connect to Webapp by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use Webapp, please see the SCIONLab Apps Web Visualization tutorial (but make sure to use the address mentioned here). Setup an endhost and connect it via the SCION box Setup an endhost and configure it as described in Configuring SCION endhost topology . Then connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address. Next steps Check out the SCION code base and start contributing.","title":"SCION box first steps"},{"location":"scionbox/scionbox/#scion-box","text":"Note The SCION box feature is currently not operational. Please come back later.","title":"SCION Box"},{"location":"scionbox/scionbox/#introduction","text":"This tutorial introduces you to SCION box, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request here in particular.","title":"Introduction"},{"location":"scionbox/scionbox/#setting-up-the-pcengines-device","text":"You received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface). You can then check on the scion-coordinator on your user page that you device status is online. Hint In case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface. The SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it.","title":"Setting up the PCEngines device"},{"location":"scionbox/scionbox/#make-use-of-the-device","text":"The SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the SCION book . In addition, SCION boxes can run the SCIONLab Webapp server which allows you to visualize the paths your AS knows about. You can connect to Webapp by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use Webapp, please see the SCIONLab Apps Web Visualization tutorial (but make sure to use the address mentioned here).","title":"Make use of the device"},{"location":"scionbox/scionbox/#setup-an-endhost-and-connect-it-via-the-scion-box","text":"Setup an endhost and configure it as described in Configuring SCION endhost topology . Then connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address.","title":"Setup an endhost and connect it via the SCION box"},{"location":"scionbox/scionbox/#next-steps","text":"Check out the SCION code base and start contributing.","title":"Next steps"},{"location":"virtual_machine_setup/dynamic_ip/","text":"Running SCION in a virtual machine VPN approach Introduction This tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to connect to the neighboring AS border router. Tip If you have a static public IP address and you can receive traffic on UDP port 50000, you could consider running the VM without VPN . In summary, the steps you will read about three installation steps, and how to log into your Virtual Machine: 1) Configure a Virtual Machine with SCION 2) Install VirtualBox and Vagrant 3) Run that Virtual Machine 4) Log into your Virtual Machine Tip Skip some steps: if your host machine is running MacOS or a Debian based Linux, you could do the first step, and then directly execute the run.sh script available within the configuration file you have downloaded from the SCIONLab Coordination Service . This run.sh script will download VirtualBox and Vagrant for you and install them (in Debian-Linux it uses apt-get and in MacOS, Homebrew ; you might be asked for your host machine user password when installing), and then it will run the Virtual Machine for you, effectively completing steps 2 and 3. But if something does not work with the script, you don't have the required OS, or you want to do it manually, you can also do all the steps without run.sh . Step One downloading a SCION VM In order to download a VM, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point, and choose Install inside a virtual machine . Choose Use an OpenVPN connection for this AS . Then download a VM configuration by clicking on Create and Download SCIONLab VM Configuration . A screenshot of the user interface is shown below: You have downloaded the configuration directory in the form of a compressed tar file ( tgz ). You will need to uncompress this folder. For this, create a directory that will host your SCIONLab content. For instance: mkdir ~/scionlab And move the contents to your SCIONLab directory, in the example: cd ~/scionlab mv ~/Download/scion_lab_my_filename.tar.gz . Next, extract the archive content. On a Linux system, simply running tar command will extract the contents: tar -xvzf scion_lab_my_filename.tar.gz Tip If you experience any issue while extracting or uncompressing the file, check if your browser has uncompress it for you by typing file scion_lab_*.t* If your downloader automatically uncompressed the downloaded file, the .gz extension is many times missing, or the type of the file not specifying compressed. You can extract the contents with: tar -xvf scion_lab_my_filename.tar After extraction, the extracted directory has the following structure: my_filename \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 AS1029 \u2502 \u2514 ... \u2502 \u251c\u2500\u2500 README \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion-viz.service \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 scionupgrade.service \u251c\u2500\u2500 scionupgrade.sh \u251c\u2500\u2500 scionupgrade.timer \u2514\u2500\u2500 Vagrantfile It is now when you can execute run.sh , as we have mentioned in the introduction, and skip the next two steps. Otherwise, keep on reading. Step Two Install VirtualBox and Vagrant You need to this only once in your host machine; if you have already done it, skip this step. Running SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system. Install VirtualBox To install VirtualBox, follow the steps on the VirtualBox download page for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager: sudo apt-get install virtualbox Install Vagrant To install Vagrant, follow the steps on the Vagrant download page for your system. Also, on Ubuntu you could install it via your package manager: sudo apt-get install vagrant Step Three run the Virtual Machine Verifying the structure, you can begin the setup by running: cd my_filename vagrant box add scion/ubuntu-16.04-64-scion vagrant box update vagrant up The installation process will take around 10 minutes. Wait, what has just happened? If you are interested, this is exactly what those steps are doing: vagrant box add scion/ubuntu-16.04-64-scion will add the base SCION box to your filesystem. You only need to do this once, as the same base box is used for all SCION Virtual Machines. vagrant box update will ensure that the base box is the latest one. You would run this every time you want to install a new VM, but it is not necessary to do it if you only want to use one of your already installed Virtual Machines. vagrant up will run the Virtual Machine. You need to do this every time you install a new Virtual Machine, or if you stop your host machine. This, essentially, is booting up the Virtual Machine, and installing it if it was the first time. If you want to stop your Virtual Machine, you will run vagrant halt . Then, to boot it up again, vagrant up . These two commands stop and start the Virtual Machine. Warning If for whatever reason you want to completely destroy and remove your existing Virtual Machine, you would run vagrant destroy . Be careful, as you would remove everything that was inside that Virtual Machine. Step Four Use the SCION Virtual Machine After successful installation of the VM, you can ssh into your VM: vagrant ssh The SCION infrastructure is automatically started at boot time of your VM. You can control it using the scion.sh script located at ~/go/src/github.com/scionproto/scion/ . You can easily get to that directory with cd $SC . To shut the system down, you can type sudo shutdown now inside the VM, or vagrant halt in the host terminal. After the installation, to start the VM, you can use vagrant up , followed by vagrant ssh to start a VM shell. Almost Done: Validate and More After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Virtual machine with VPN"},{"location":"virtual_machine_setup/dynamic_ip/#running-scion-in-a-virtual-machine-vpn-approach","text":"","title":"Running SCION in a virtual machine &ndash; VPN approach"},{"location":"virtual_machine_setup/dynamic_ip/#introduction","text":"This tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to connect to the neighboring AS border router. Tip If you have a static public IP address and you can receive traffic on UDP port 50000, you could consider running the VM without VPN . In summary, the steps you will read about three installation steps, and how to log into your Virtual Machine: 1) Configure a Virtual Machine with SCION 2) Install VirtualBox and Vagrant 3) Run that Virtual Machine 4) Log into your Virtual Machine Tip Skip some steps: if your host machine is running MacOS or a Debian based Linux, you could do the first step, and then directly execute the run.sh script available within the configuration file you have downloaded from the SCIONLab Coordination Service . This run.sh script will download VirtualBox and Vagrant for you and install them (in Debian-Linux it uses apt-get and in MacOS, Homebrew ; you might be asked for your host machine user password when installing), and then it will run the Virtual Machine for you, effectively completing steps 2 and 3. But if something does not work with the script, you don't have the required OS, or you want to do it manually, you can also do all the steps without run.sh .","title":"Introduction"},{"location":"virtual_machine_setup/dynamic_ip/#step-one-downloading-a-scion-vm","text":"In order to download a VM, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point, and choose Install inside a virtual machine . Choose Use an OpenVPN connection for this AS . Then download a VM configuration by clicking on Create and Download SCIONLab VM Configuration . A screenshot of the user interface is shown below: You have downloaded the configuration directory in the form of a compressed tar file ( tgz ). You will need to uncompress this folder. For this, create a directory that will host your SCIONLab content. For instance: mkdir ~/scionlab And move the contents to your SCIONLab directory, in the example: cd ~/scionlab mv ~/Download/scion_lab_my_filename.tar.gz . Next, extract the archive content. On a Linux system, simply running tar command will extract the contents: tar -xvzf scion_lab_my_filename.tar.gz Tip If you experience any issue while extracting or uncompressing the file, check if your browser has uncompress it for you by typing file scion_lab_*.t* If your downloader automatically uncompressed the downloaded file, the .gz extension is many times missing, or the type of the file not specifying compressed. You can extract the contents with: tar -xvf scion_lab_my_filename.tar After extraction, the extracted directory has the following structure: my_filename \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 AS1029 \u2502 \u2514 ... \u2502 \u251c\u2500\u2500 README \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion-viz.service \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 scionupgrade.service \u251c\u2500\u2500 scionupgrade.sh \u251c\u2500\u2500 scionupgrade.timer \u2514\u2500\u2500 Vagrantfile It is now when you can execute run.sh , as we have mentioned in the introduction, and skip the next two steps. Otherwise, keep on reading.","title":"Step One &ndash; downloading a SCION VM"},{"location":"virtual_machine_setup/dynamic_ip/#step-two-install-virtualbox-and-vagrant","text":"You need to this only once in your host machine; if you have already done it, skip this step. Running SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system.","title":"Step Two &ndash; Install VirtualBox and Vagrant"},{"location":"virtual_machine_setup/dynamic_ip/#install-virtualbox","text":"To install VirtualBox, follow the steps on the VirtualBox download page for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager: sudo apt-get install virtualbox","title":"Install VirtualBox"},{"location":"virtual_machine_setup/dynamic_ip/#install-vagrant","text":"To install Vagrant, follow the steps on the Vagrant download page for your system. Also, on Ubuntu you could install it via your package manager: sudo apt-get install vagrant","title":"Install Vagrant"},{"location":"virtual_machine_setup/dynamic_ip/#step-three-run-the-virtual-machine","text":"Verifying the structure, you can begin the setup by running: cd my_filename vagrant box add scion/ubuntu-16.04-64-scion vagrant box update vagrant up The installation process will take around 10 minutes.","title":"Step Three &ndash; run the Virtual Machine"},{"location":"virtual_machine_setup/dynamic_ip/#wait-what-has-just-happened","text":"If you are interested, this is exactly what those steps are doing: vagrant box add scion/ubuntu-16.04-64-scion will add the base SCION box to your filesystem. You only need to do this once, as the same base box is used for all SCION Virtual Machines. vagrant box update will ensure that the base box is the latest one. You would run this every time you want to install a new VM, but it is not necessary to do it if you only want to use one of your already installed Virtual Machines. vagrant up will run the Virtual Machine. You need to do this every time you install a new Virtual Machine, or if you stop your host machine. This, essentially, is booting up the Virtual Machine, and installing it if it was the first time. If you want to stop your Virtual Machine, you will run vagrant halt . Then, to boot it up again, vagrant up . These two commands stop and start the Virtual Machine. Warning If for whatever reason you want to completely destroy and remove your existing Virtual Machine, you would run vagrant destroy . Be careful, as you would remove everything that was inside that Virtual Machine.","title":"Wait, what has just happened?"},{"location":"virtual_machine_setup/dynamic_ip/#step-four-use-the-scion-virtual-machine","text":"After successful installation of the VM, you can ssh into your VM: vagrant ssh The SCION infrastructure is automatically started at boot time of your VM. You can control it using the scion.sh script located at ~/go/src/github.com/scionproto/scion/ . You can easily get to that directory with cd $SC . To shut the system down, you can type sudo shutdown now inside the VM, or vagrant halt in the host terminal. After the installation, to start the VM, you can use vagrant up , followed by vagrant ssh to start a VM shell.","title":"Step Four &ndash; Use the SCION Virtual Machine"},{"location":"virtual_machine_setup/dynamic_ip/#almost-done-validate-and-more","text":"After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Almost Done: Validate and More"},{"location":"virtual_machine_setup/static_ip/","text":"Running SCION in a virtual machine static public IP address Warning If you do not have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead connect to the SCION network via VPN . Simply follow all the steps under Prerequisites in the tutorial for a VPN-based setup until the end of Step One download a SCION VM . There, instead of directly clicking on Create and Download SCIONLab VM Configuration , unselect Use an OpenVPN connection for this AS and and enter your host's public IP address in the input field. Afterwards, follow all subsequent steps in the tutorial for a VPN-based setup . Troubleshooting Make sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running. If you have tshark installed, you can verify the arrival of the SCION beacon messages from the neighboring border router with tshark udp and port 50000 .","title":"Virtual machine with static public IP"},{"location":"virtual_machine_setup/static_ip/#running-scion-in-a-virtual-machine-static-public-ip-address","text":"Warning If you do not have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead connect to the SCION network via VPN . Simply follow all the steps under Prerequisites in the tutorial for a VPN-based setup until the end of Step One download a SCION VM . There, instead of directly clicking on Create and Download SCIONLab VM Configuration , unselect Use an OpenVPN connection for this AS and and enter your host's public IP address in the input field. Afterwards, follow all subsequent steps in the tutorial for a VPN-based setup . Troubleshooting Make sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running. If you have tshark installed, you can verify the arrival of the SCION beacon messages from the neighboring border router with tshark udp and port 50000 .","title":"Running SCION in a virtual machine &ndash; static public IP address"}]}