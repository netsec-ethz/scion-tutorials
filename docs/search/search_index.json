{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SCION Tutorials Introduction This website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication. To get in touch: For questions and general comments on SCION-related topics, visit our SCION community Google group For bug reports, please post them on the scion-coord github site For suggestion on these pages, please post them on the scion-tutorials GitHub site Getting started SCION runs on a variety of platforms and works with different network configurations. We cover all approaches with tutorials. To choose the correct tutorial for your setup, follow the flowchart below to determine the number of the tutorial suited for you. After installation, we suggest exploring the tips and tricks section below to learn how to use the infrastructure. Running SCION infrastructure in a VM The easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps. 1) Running SCION VM over OpenVPN 2) Running SCION VM with static public IP Configuring SCION infrastructure manually The following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated host (without a VM). 1. Installing SCION on different platforms: 3) Installing SCION on Ubuntu 16.04 x86 4) Installing SCION on Ubuntu MATE 16.04 - Raspberry PI 5) Installing SCION on ARM minicomputers using prebuilt images 6) Installing SCION on an Android device 2. Setting up SCION topology Configuring local topology Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN Configuring SCION endhost Using SCION in projects Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application Running AS Visualization Browser AS Visualization Command-line AS Visualization SCION tips and tricks Verifying the installation Updating gen directory Updating SCION to a new version Adding Wireshark or Tshark dissector plugin SCION box specifics SCION box first steps","title":"Home"},{"location":"#welcome-to-scion-tutorials","text":"","title":"Welcome to SCION Tutorials"},{"location":"#introduction","text":"This website provides step-by-step instructions on how to install and run the SCION infrastructure. It also provides a list of interesting projects that are using the SCION infrastructure for communication. To get in touch: For questions and general comments on SCION-related topics, visit our SCION community Google group For bug reports, please post them on the scion-coord github site For suggestion on these pages, please post them on the scion-tutorials GitHub site","title":"Introduction"},{"location":"#getting-started","text":"SCION runs on a variety of platforms and works with different network configurations. We cover all approaches with tutorials. To choose the correct tutorial for your setup, follow the flowchart below to determine the number of the tutorial suited for you. After installation, we suggest exploring the tips and tricks section below to learn how to use the infrastructure.","title":"Getting started"},{"location":"#running-scion-infrastructure-in-a-vm","text":"The easiest way to run SCION is by running a preconfigured SCION Virtual Machine on a commodity OS (MacOS, Windows). The following tutorials are covering the necessary steps. 1) Running SCION VM over OpenVPN 2) Running SCION VM with static public IP","title":"Running SCION infrastructure in a VM"},{"location":"#configuring-scion-infrastructure-manually","text":"The following tutorials cover how to install, configure, and run a SCION infrastructure in a step-by-step manner on a dedicated host (without a VM).","title":"Configuring SCION infrastructure manually"},{"location":"#1-installing-scion-on-different-platforms","text":"3) Installing SCION on Ubuntu 16.04 x86 4) Installing SCION on Ubuntu MATE 16.04 - Raspberry PI 5) Installing SCION on ARM minicomputers using prebuilt images 6) Installing SCION on an Android device","title":"1. Installing SCION on different platforms:"},{"location":"#2-setting-up-scion-topology","text":"Configuring local topology Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN Configuring SCION endhost","title":"2. Setting up SCION topology"},{"location":"#using-scion-in-projects","text":"Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application Running AS Visualization Browser AS Visualization Command-line AS Visualization","title":"Using SCION in projects"},{"location":"#scion-tips-and-tricks","text":"Verifying the installation Updating gen directory Updating SCION to a new version Adding Wireshark or Tshark dissector plugin","title":"SCION tips and tricks"},{"location":"#scion-box-specifics","text":"SCION box first steps","title":"SCION box specifics"},{"location":"as_visualization/browser_asviz/","text":"Browser AS Visualizations Starting the Visualization After updating the latest source code and starting the server , point your browser to http://127.0.0.1:8000 to launch the AS Visualization. Even if you run SCION-viz within a VM, you can use the regular browser on your host operating system (Mac or Windows). Then, enter the \"Source AS\" ISD-AS pair of your AS. You can find out your ISD and AS number as described in the tutorial Fetching sensor readings or time stamps . Press \"Request Data\" to fetch updated data. Viewing the SCION Daemon The \"Data\" pull-down menu option \"sciond socket\" will bind to a socket to communicate with the SCION Daemon. Alternately, you can override the default IP address of the Daemon by entering the address you wish to bind to in the \"SCIOND IP Address\" text box. SCIOND Paths Enter the \"Destination AS\" ISD-AS pair and the maximum number of paths to retrieve in \"Max Paths\" and press \"Update Paths\" to view all announced paths to the destination from the source. The announced paths will be displayed in a combined topology in the window. To view the details of a specific path expand the path's data by clicking on the path number in the window on right side. SCION AS Topology The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router. Tip The big circle can be clicked on as well to view details of the Source AS. Viewing the SCION Local AS The \"Data\" pull-down menu option \"local gen dir\" will display data from the local gen directory. Local AS Topology Local ISD Trust Root Configuration Local AS Certificate","title":"Browser AS Visualization"},{"location":"as_visualization/browser_asviz/#browser-as-visualizations","text":"","title":"Browser AS Visualizations"},{"location":"as_visualization/browser_asviz/#starting-the-visualization","text":"After updating the latest source code and starting the server , point your browser to http://127.0.0.1:8000 to launch the AS Visualization. Even if you run SCION-viz within a VM, you can use the regular browser on your host operating system (Mac or Windows). Then, enter the \"Source AS\" ISD-AS pair of your AS. You can find out your ISD and AS number as described in the tutorial Fetching sensor readings or time stamps . Press \"Request Data\" to fetch updated data.","title":"Starting the Visualization"},{"location":"as_visualization/browser_asviz/#viewing-the-scion-daemon","text":"The \"Data\" pull-down menu option \"sciond socket\" will bind to a socket to communicate with the SCION Daemon. Alternately, you can override the default IP address of the Daemon by entering the address you wish to bind to in the \"SCIOND IP Address\" text box.","title":"Viewing the SCION Daemon"},{"location":"as_visualization/browser_asviz/#sciond-paths","text":"Enter the \"Destination AS\" ISD-AS pair and the maximum number of paths to retrieve in \"Max Paths\" and press \"Update Paths\" to view all announced paths to the destination from the source. The announced paths will be displayed in a combined topology in the window. To view the details of a specific path expand the path's data by clicking on the path number in the window on right side.","title":"SCIOND Paths"},{"location":"as_visualization/browser_asviz/#scion-as-topology","text":"The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router. Tip The big circle can be clicked on as well to view details of the Source AS.","title":"SCION AS Topology"},{"location":"as_visualization/browser_asviz/#viewing-the-scion-local-as","text":"The \"Data\" pull-down menu option \"local gen dir\" will display data from the local gen directory.","title":"Viewing the SCION Local AS"},{"location":"as_visualization/browser_asviz/#local-as-topology","text":"","title":"Local AS Topology"},{"location":"as_visualization/browser_asviz/#local-isd-trust-root-configuration","text":"","title":"Local ISD Trust Root Configuration"},{"location":"as_visualization/browser_asviz/#local-as-certificate","text":"","title":"Local AS Certificate"},{"location":"as_visualization/command_asviz/","text":"Command-line AS Visualization cd ~/go/src/github.com/scionproto/scion/ python3 sub/scion-viz/python/as_viewer.py usage: as_viewer.py [-h] [--addr ADDR] [-t] [-p] [-trc] [-crt] [-c] [-pp] src_isdas [dst_isdas] as_viewer.py: error: the following arguments are required: src_isdas python3 sub/scion-viz/python/as_viewer.py -h usage: as_viewer.py [-h] [--addr ADDR] [-t] [-p] [-trc] [-crt] [-c] [-pp] src_isdas [dst_isdas] SCION AS Path Viewer requires source and destination ISD-ASes to analyze. positional arguments: src_isdas ISD-AS source. dst_isdas ISD-AS destination. optional arguments: -h, --help show this help message and exit --addr ADDR ip address to bind to if not localhost -t display source AS topology -p display announced paths to destination -trc display source TRC -crt display source certificate chain -c display source AS configuration -pp display source path policy python3 sub/scion-viz/python/as_viewer.py 1-1045 -t SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock ----------------- AS TOPOLOGY: 1-1045 is_core_as: False mtu: 1472 ----------------- PATH SERVER: Address: 10.0.2.15 Name: ps-1 Port: 31044 TTL: 0 ----------------- CERTIFICATE SERVER: Address: 10.0.2.15 Name: cs-1 Port: 31043 TTL: 0 ----------------- BEACON SERVER: Address: 10.0.2.15 Name: bs-1 Port: 31041 TTL: 0 ----------------- SIBRA SERVER: Address: 10.0.2.15 Name: sb-1 Port: 31045 TTL: 0 ----------------- BORDER ROUTER: Address: 10.0.2.15 Name: br-1 Port: 31042 Interface ID: 1 python3 sub/scion-viz/python/as_viewer.py 1-1045 2-24 -p SCION AS Viewer (src) 1-1045 ======================= 2-24 (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock ----------------- PATH 1 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 16 2-24 (1) 2-22 (4) 2-22 (1) 2-21 (2) 2-21 (1) 1-1 (4) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 2 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 16 2-24 (1) 2-22 (4) 2-22 (3) 4-41 (2) 4-41 (1) 1-1 (6) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 3 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 18 2-24 (1) 2-22 (4) 2-22 (2) 2-23 (2) 2-23 (3) 3-31 (3) 3-31 (1) 1-1 (5) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 4 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 18 2-24 (1) 2-22 (4) 2-22 (2) 2-23 (2) 2-23 (1) 2-21 (3) 2-21 (1) 1-1 (4) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 5 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 20 2-24 (1) 2-22 (4) 2-22 (1) 2-21 (2) 2-21 (3) 2-23 (1) 2-23 (3) 3-31 (3) 3-31 (1) 1-1 (5) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) python3 sub/scion-viz/python/as_viewer.py 1-1045 -h usage: as_viewer.py [-h] [--addr ADDR] [-t] [-p] [-trc] [-crt] [-c] [-pp] src_isdas [dst_isdas] SCION AS Path Viewer requires source and destination ISD-ASes to analyze. positional arguments: src_isdas ISD-AS source. dst_isdas ISD-AS destination. optional arguments: -h, --help show this help message and exit --addr ADDR ip address to bind to if not localhost -t display source AS topology -p display announced paths to destination -trc display source TRC -crt display source certificate chain -c display source AS configuration -pp display source path policy python3 sub/scion-viz/python/as_viewer.py 1-1045 -pp SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/path_policy.yml --- BestSetSize: 5 CandidatesSetSize: 20 HistoryLimit: 20 PropertyRanges: AvailableBandwidth: 0-100 DelayTime: 0-60 GuaranteedBandwidth: 0-100 HopsLength: 1-10 PeerLinks: 0-100 TotalBandwidth: 0-100 PropertyWeights: AvailableBandwidth: 0 DelayTime: 3 Disjointness: 4 ExpirationTime: 3 GuaranteedBandwidth: 0 HopsLength: 5 LastSeenTime: 3 LastSentTime: 3 PeerLinks: 7 TotalBandwidth: 0 UnwantedASes: 0-888,0-999 UpdateAfterNumber: 10 UpdateAfterTime: 3600 python3 sub/scion-viz/python/as_viewer.py 1-1045 -c SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/as.yml CertChainVersion: 0 MasterASKey: VrMpfgsWBxZZuhhSQoIUlg== PropagateTime: 5 RegisterPath: true RegisterTime: 5 python3 sub/scion-viz/python/as_viewer.py 1-1045 -crt SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-AS1045-V0.crt { 0 : { EncAlgorithm : curve25519xsalsa20poly1305 , Signature : VlJptnORObEmVQDvofOcN/2i83w2/j5vk/DKFMY508IC+fkWiyMZ/XQCp4sOWMc8cMiJHObdiI99GWz/wZXGDQ== , IssuingTime : 1511289459, SubjectSigKey : Ushs6XHb/uypmGzcmHLA3Xay4FpsrSbrKJTWU0JeesQ= , SignAlgorithm : ed25519 , Subject : 1-1045 , TRCVersion : 0, ExpirationTime : 1542825459, SubjectEncKey : 4rQyFxRCx+eR7ygPYG96WQV9rKLl7RFY0lzXm1r2wg4= , Comment : AS Certificate , Issuer : 1-1 , CanIssue : false, Version : 0 }, 1 : { EncAlgorithm : curve25519xsalsa20poly1305 , Signature : G4K+h8C8flqOaGR6Upt483vm4agQeoY57XvK2Ljo7uI/7u3yUcd3rlONG/7YfrHGlYSrlcLcpzPFvu9knyMFDQ== , IssuingTime : 1499177015, SubjectSigKey : rRfaiQA8CIPWpRD5pH6rDeadutCTB+Hi+6YRh2zPS1c= , SignAlgorithm : ed25519 , Subject : 1-1 , TRCVersion : 0, ExpirationTime : 1530713015, SubjectEncKey : 448SpoiC4OApC2UxyL8x9yFunPZ9n9Ms/AzQLMXQMmM= , Comment : Core AS Certificate , Issuer : 1-1 , CanIssue : true, Version : 0 } } python3 sub/scion-viz/python/as_viewer.py 1-1045 -trc SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-V0.trc { QuorumCAs : 3, Signatures : { 1-1 : B89Z3cWTzW3j4r02b/zLMuAn1/PiF0meEa9/6/AITiyN3YGRpNNer5aD/uTziMX9IfPcUP9rEXlXKs8PCdVlBg== }, GracePeriod : 18000, RootRainsKey : dns_srv_addr , CreationTime : 1499177015, PKILogs : {}, ISDID : 1, CoreCAs : { 1-1 : { OfflineKey : AX0kRbqJfdnfNcpC0XMSiQuLCqQJabp8HRi6BiAKPXo= , OfflineKeyAlg : Ed25519 , OnlineKey : VJvKbgHOsYbHlr6SGGssszGQvAtu+zXCTAJkYOCPr38= , OnlineKeyAlg : Ed25519 } }, Quarantine : true, Description : ISD 1 , QuorumOwnTRC : 2, RootCAs : { CA1-1 : MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMTAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrPtywDofkLN4So+AhCDRsn0xeUtAp3zoa4onULpsSbdo5lj8p0nfafKplOJ7uP4txMbn8FtTcyau5W7BbQodXl/Xa6Elu4u9nyb6UgNpzmiUyCp/5TGRicv3MKSLpVZQukuj6weHLL2GGwz58qnygqoRzvsNMugwP46PZHKLmx7hg3IOR10MDDax7dtAMlzvJJWjLeMGytf75U6b5JFK2366oaDroQhhGh2TL228+3rcvMMcB/TVxHBrzGKE+uTI8XnspMGo42lN3ZzaOOvbacXH5s/Cdf3l6j6x1GdE0OHFLB2vRaKFpBN/BdW7HhDHqy/u+9/Vjh6eiOoDODMBQIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUchmrQ0w9YIrX1VjicXPcqVrouWswDQYJKoZIhvcNAQELBQADggEBAGCK0U5GFftXaRfaqgY7/dEeW3qk4zXPyCERd5la2KW8I1A4jUJ5yYZJTOovFe9Mi2NgyUG62NxN52mODNSRazZ+HxwmXVZtgUx9PEYMQVvFKoirsBbpxnx7Bnt1h9Fo0QVe1VGk0kYQ1sj/1/J4wperRDgy8bDBFB/JznY7z9S9HxfFNUgkmnMI53u/La4Yl18wB6sFNIqTeNwXNihzNWO1f3N9J9OMTjG0bjUMximNPDhUF7kCwIAXz3+C6besEqqCYq6mvcGchCL9H/zpw8vGJjwXPLbqpx0ewHlyPzEbCZqhy4kmHAodl5XU2ghuwCV/e7mSetuMlvSQPVtBXEY= , CA1-3 : MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMzAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0zMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoVanBcuF4ypz1U9aCMgVLLbTMI356RlmK1g2njfvfvq1ElEt1WRyWRNPNSMx6xamD5OFedODgRdbpdYvcFK89cK4BbRLSSAZ13RpAmld0RnlRAxDvUKqUcfeqz5uiuQ5lVJ+zyyKJoSea/quooAyehGVEb0qo0g1EyffWGf/E4awkDXT+w6y14cGO9r4vrPiD+re5Ufs+ht5z/AwQ9xkK6Md5uaHoHRMd0GUkxy74ef9w5AoiysB+1/ZLoFKZyl1N+q+jUwx9C79zqicYDpBQWB3gFd19sq69ZlIyX76p6od2GSV8fvlsSD+MEdChfvPy1GFsoFE7zOBLYCXXXxkqwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU91ybA6o68Yd/bd4wRe92F08xq7MwDQYJKoZIhvcNAQELBQADggEBADByHaGbqrI3Z9cO11xzBPzJwyS2AkFOFZ+bWPtGUwvdxoO/kFw3JTIjxD1GPM/5HQB86tjOBLKCCgwCQG/i/ZlwNU61v9aleFbJjFa5HnfuKxHxe5jtnspXjx6TBLV6KZUE82nNMnQYczlrUURmJ4gJ+9U4tLQVkmAERhq8HbCnO5wNeKkgPfKT1L3lRZP17Rh6WNQsOlUksJG6m/e8xR/BkZ0yHQuZPDUlcl7c94pL84CW1qJ7PcH3Mbi+AK/MnSDE4qjz1xCyoXvlklAOe6QrzYYLV9uvBpNJAldfr4vKHHdmWACWj03y+1pbHUB9edXZhv+skmQfpWBh4wxC/dQ= , CA1-2 : MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMjAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArS4eanUAEhbTtFi2zxo1YJYFG0IU/A7CD0WKyQL3TMK5HmAJY0rOth5MniTcx7OHCo4zcoMCTGXwtcfTHNnNyL3DKWoPpmjE0W8NbQpycgbcg8Wf/wBPXQ9eUKIlU7OUbIgWCOoxldr98A97N6sqxoo1u5EeNSUORYMiaEsbsgmKMxKj+jqwwJejTYL9sQLwktcXyW/sT27wBoiFeLWMpKEPp81qziub0dN42fSMgh0ZSBE68uAcwVAM3i6uT+4s+/5KoGehZ6KVjNT07TddSEcmc84Bb83oiKEThhc9xWyUOLVoIhQV/4PT6PA8fmpc1a6YfFRPSMj/Kzpl9clc9QIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUVRLUZoMbGkH6PXwIFgv578NwXi8wDQYJKoZIhvcNAQELBQADggEBAJ4oYQOIR4RLsHUGGYI9IOaki0Pvfg9DvD61wTBfkypsIc4wYI0TVeggzloxSG9DVSMuV3UYXYF5xCV24oY4CTzIazZXKsg200g/vICDdxO4hpQDgihzdUkGRRCT+zR2zi5lnWS1TZ59F0fdaGH8jEySjU8YdGv7NPKshtTFN2tx02ZoyJBa0S239L46eT7dJeJeAo3MSvNJDrwP+IE3gjL+nOLjMUreZzz94Ueqzgg7dlpFeyKJFvQvv2tUQ+SUQCUJkWZIlaOKEdMExxSKmEyI+grbLPqXtl9yVAr5WzjQQCNqRFEf/XucKLXFWV5sC+BaoWPJCcmpwbhidHAhmZo= }, Version : 0, QuorumEEPKI : 2 }","title":"Command-line AS Visualization"},{"location":"as_visualization/command_asviz/#command-line-as-visualization","text":"cd ~/go/src/github.com/scionproto/scion/ python3 sub/scion-viz/python/as_viewer.py usage: as_viewer.py [-h] [--addr ADDR] [-t] [-p] [-trc] [-crt] [-c] [-pp] src_isdas [dst_isdas] as_viewer.py: error: the following arguments are required: src_isdas python3 sub/scion-viz/python/as_viewer.py -h usage: as_viewer.py [-h] [--addr ADDR] [-t] [-p] [-trc] [-crt] [-c] [-pp] src_isdas [dst_isdas] SCION AS Path Viewer requires source and destination ISD-ASes to analyze. positional arguments: src_isdas ISD-AS source. dst_isdas ISD-AS destination. optional arguments: -h, --help show this help message and exit --addr ADDR ip address to bind to if not localhost -t display source AS topology -p display announced paths to destination -trc display source TRC -crt display source certificate chain -c display source AS configuration -pp display source path policy python3 sub/scion-viz/python/as_viewer.py 1-1045 -t SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock ----------------- AS TOPOLOGY: 1-1045 is_core_as: False mtu: 1472 ----------------- PATH SERVER: Address: 10.0.2.15 Name: ps-1 Port: 31044 TTL: 0 ----------------- CERTIFICATE SERVER: Address: 10.0.2.15 Name: cs-1 Port: 31043 TTL: 0 ----------------- BEACON SERVER: Address: 10.0.2.15 Name: bs-1 Port: 31041 TTL: 0 ----------------- SIBRA SERVER: Address: 10.0.2.15 Name: sb-1 Port: 31045 TTL: 0 ----------------- BORDER ROUTER: Address: 10.0.2.15 Name: br-1 Port: 31042 Interface ID: 1 python3 sub/scion-viz/python/as_viewer.py 1-1045 2-24 -p SCION AS Viewer (src) 1-1045 ======================= 2-24 (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock ----------------- PATH 1 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 16 2-24 (1) 2-22 (4) 2-22 (1) 2-21 (2) 2-21 (1) 1-1 (4) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 2 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 16 2-24 (1) 2-22 (4) 2-22 (3) 4-41 (2) 4-41 (1) 1-1 (6) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 3 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 18 2-24 (1) 2-22 (4) 2-22 (2) 2-23 (2) 2-23 (3) 3-31 (3) 3-31 (1) 1-1 (5) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 4 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 18 2-24 (1) 2-22 (4) 2-22 (2) 2-23 (2) 2-23 (1) 2-21 (3) 2-21 (1) 1-1 (4) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) ----------------- PATH 5 MTU: 1472 IPV4: 10.0.2.15 Port: 31042 Interfaces Len: 20 2-24 (1) 2-22 (4) 2-22 (1) 2-21 (2) 2-21 (3) 2-23 (1) 2-23 (3) 3-31 (3) 3-31 (1) 1-1 (5) 1-1 (3) 1-3 (1) 1-3 (2) 1-2 (1) 1-2 (4) 1-6 (1) 1-6 (2) 1-7 (1) 1-7 (39) 1-1045 (1) python3 sub/scion-viz/python/as_viewer.py 1-1045 -h usage: as_viewer.py [-h] [--addr ADDR] [-t] [-p] [-trc] [-crt] [-c] [-pp] src_isdas [dst_isdas] SCION AS Path Viewer requires source and destination ISD-ASes to analyze. positional arguments: src_isdas ISD-AS source. dst_isdas ISD-AS destination. optional arguments: -h, --help show this help message and exit --addr ADDR ip address to bind to if not localhost -t display source AS topology -p display announced paths to destination -trc display source TRC -crt display source certificate chain -c display source AS configuration -pp display source path policy python3 sub/scion-viz/python/as_viewer.py 1-1045 -pp SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/path_policy.yml --- BestSetSize: 5 CandidatesSetSize: 20 HistoryLimit: 20 PropertyRanges: AvailableBandwidth: 0-100 DelayTime: 0-60 GuaranteedBandwidth: 0-100 HopsLength: 1-10 PeerLinks: 0-100 TotalBandwidth: 0-100 PropertyWeights: AvailableBandwidth: 0 DelayTime: 3 Disjointness: 4 ExpirationTime: 3 GuaranteedBandwidth: 0 HopsLength: 5 LastSeenTime: 3 LastSentTime: 3 PeerLinks: 7 TotalBandwidth: 0 UnwantedASes: 0-888,0-999 UpdateAfterNumber: 10 UpdateAfterTime: 3600 python3 sub/scion-viz/python/as_viewer.py 1-1045 -c SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/as.yml CertChainVersion: 0 MasterASKey: VrMpfgsWBxZZuhhSQoIUlg== PropagateTime: 5 RegisterPath: true RegisterTime: 5 python3 sub/scion-viz/python/as_viewer.py 1-1045 -crt SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-AS1045-V0.crt { 0 : { EncAlgorithm : curve25519xsalsa20poly1305 , Signature : VlJptnORObEmVQDvofOcN/2i83w2/j5vk/DKFMY508IC+fkWiyMZ/XQCp4sOWMc8cMiJHObdiI99GWz/wZXGDQ== , IssuingTime : 1511289459, SubjectSigKey : Ushs6XHb/uypmGzcmHLA3Xay4FpsrSbrKJTWU0JeesQ= , SignAlgorithm : ed25519 , Subject : 1-1045 , TRCVersion : 0, ExpirationTime : 1542825459, SubjectEncKey : 4rQyFxRCx+eR7ygPYG96WQV9rKLl7RFY0lzXm1r2wg4= , Comment : AS Certificate , Issuer : 1-1 , CanIssue : false, Version : 0 }, 1 : { EncAlgorithm : curve25519xsalsa20poly1305 , Signature : G4K+h8C8flqOaGR6Upt483vm4agQeoY57XvK2Ljo7uI/7u3yUcd3rlONG/7YfrHGlYSrlcLcpzPFvu9knyMFDQ== , IssuingTime : 1499177015, SubjectSigKey : rRfaiQA8CIPWpRD5pH6rDeadutCTB+Hi+6YRh2zPS1c= , SignAlgorithm : ed25519 , Subject : 1-1 , TRCVersion : 0, ExpirationTime : 1530713015, SubjectEncKey : 448SpoiC4OApC2UxyL8x9yFunPZ9n9Ms/AzQLMXQMmM= , Comment : Core AS Certificate , Issuer : 1-1 , CanIssue : true, Version : 0 } } python3 sub/scion-viz/python/as_viewer.py 1-1045 -trc SCION AS Viewer (src) 1-1045 ======================= None (dst) /run/shm/sciond/sd1-1045.sock Starting sciond at /run/shm/sciond/sd1-1045.sock /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD1/AS1045/endhost/certs/ISD1-V0.trc { QuorumCAs : 3, Signatures : { 1-1 : B89Z3cWTzW3j4r02b/zLMuAn1/PiF0meEa9/6/AITiyN3YGRpNNer5aD/uTziMX9IfPcUP9rEXlXKs8PCdVlBg== }, GracePeriod : 18000, RootRainsKey : dns_srv_addr , CreationTime : 1499177015, PKILogs : {}, ISDID : 1, CoreCAs : { 1-1 : { OfflineKey : AX0kRbqJfdnfNcpC0XMSiQuLCqQJabp8HRi6BiAKPXo= , OfflineKeyAlg : Ed25519 , OnlineKey : VJvKbgHOsYbHlr6SGGssszGQvAtu+zXCTAJkYOCPr38= , OnlineKeyAlg : Ed25519 } }, Quarantine : true, Description : ISD 1 , QuorumOwnTRC : 2, RootCAs : { CA1-1 : MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMTAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxrPtywDofkLN4So+AhCDRsn0xeUtAp3zoa4onULpsSbdo5lj8p0nfafKplOJ7uP4txMbn8FtTcyau5W7BbQodXl/Xa6Elu4u9nyb6UgNpzmiUyCp/5TGRicv3MKSLpVZQukuj6weHLL2GGwz58qnygqoRzvsNMugwP46PZHKLmx7hg3IOR10MDDax7dtAMlzvJJWjLeMGytf75U6b5JFK2366oaDroQhhGh2TL228+3rcvMMcB/TVxHBrzGKE+uTI8XnspMGo42lN3ZzaOOvbacXH5s/Cdf3l6j6x1GdE0OHFLB2vRaKFpBN/BdW7HhDHqy/u+9/Vjh6eiOoDODMBQIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUchmrQ0w9YIrX1VjicXPcqVrouWswDQYJKoZIhvcNAQELBQADggEBAGCK0U5GFftXaRfaqgY7/dEeW3qk4zXPyCERd5la2KW8I1A4jUJ5yYZJTOovFe9Mi2NgyUG62NxN52mODNSRazZ+HxwmXVZtgUx9PEYMQVvFKoirsBbpxnx7Bnt1h9Fo0QVe1VGk0kYQ1sj/1/J4wperRDgy8bDBFB/JznY7z9S9HxfFNUgkmnMI53u/La4Yl18wB6sFNIqTeNwXNihzNWO1f3N9J9OMTjG0bjUMximNPDhUF7kCwIAXz3+C6besEqqCYq6mvcGchCL9H/zpw8vGJjwXPLbqpx0ewHlyPzEbCZqhy4kmHAodl5XU2ghuwCV/e7mSetuMlvSQPVtBXEY= , CA1-3 : MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMzAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0zMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoVanBcuF4ypz1U9aCMgVLLbTMI356RlmK1g2njfvfvq1ElEt1WRyWRNPNSMx6xamD5OFedODgRdbpdYvcFK89cK4BbRLSSAZ13RpAmld0RnlRAxDvUKqUcfeqz5uiuQ5lVJ+zyyKJoSea/quooAyehGVEb0qo0g1EyffWGf/E4awkDXT+w6y14cGO9r4vrPiD+re5Ufs+ht5z/AwQ9xkK6Md5uaHoHRMd0GUkxy74ef9w5AoiysB+1/ZLoFKZyl1N+q+jUwx9C79zqicYDpBQWB3gFd19sq69ZlIyX76p6od2GSV8fvlsSD+MEdChfvPy1GFsoFE7zOBLYCXXXxkqwIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU91ybA6o68Yd/bd4wRe92F08xq7MwDQYJKoZIhvcNAQELBQADggEBADByHaGbqrI3Z9cO11xzBPzJwyS2AkFOFZ+bWPtGUwvdxoO/kFw3JTIjxD1GPM/5HQB86tjOBLKCCgwCQG/i/ZlwNU61v9aleFbJjFa5HnfuKxHxe5jtnspXjx6TBLV6KZUE82nNMnQYczlrUURmJ4gJ+9U4tLQVkmAERhq8HbCnO5wNeKkgPfKT1L3lRZP17Rh6WNQsOlUksJG6m/e8xR/BkZ0yHQuZPDUlcl7c94pL84CW1qJ7PcH3Mbi+AK/MnSDE4qjz1xCyoXvlklAOe6QrzYYLV9uvBpNJAldfr4vKHHdmWACWj03y+1pbHUB9edXZhv+skmQfpWBh4wxC/dQ= , CA1-2 : MIIC4DCCAcigAwIBAwIBATANBgkqhkiG9w0BAQsFADAQMQ4wDAYDVQQDDAVDQTEtMjAeFw0xNzA3MDQxNDAzMzVaFw0yMjA3MDMxNDAzMzVaMBAxDjAMBgNVBAMMBUNBMS0yMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArS4eanUAEhbTtFi2zxo1YJYFG0IU/A7CD0WKyQL3TMK5HmAJY0rOth5MniTcx7OHCo4zcoMCTGXwtcfTHNnNyL3DKWoPpmjE0W8NbQpycgbcg8Wf/wBPXQ9eUKIlU7OUbIgWCOoxldr98A97N6sqxoo1u5EeNSUORYMiaEsbsgmKMxKj+jqwwJejTYL9sQLwktcXyW/sT27wBoiFeLWMpKEPp81qziub0dN42fSMgh0ZSBE68uAcwVAM3i6uT+4s+/5KoGehZ6KVjNT07TddSEcmc84Bb83oiKEThhc9xWyUOLVoIhQV/4PT6PA8fmpc1a6YfFRPSMj/Kzpl9clc9QIDAQABo0UwQzASBgNVHRMBAf8ECDAGAQH/AgEBMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUVRLUZoMbGkH6PXwIFgv578NwXi8wDQYJKoZIhvcNAQELBQADggEBAJ4oYQOIR4RLsHUGGYI9IOaki0Pvfg9DvD61wTBfkypsIc4wYI0TVeggzloxSG9DVSMuV3UYXYF5xCV24oY4CTzIazZXKsg200g/vICDdxO4hpQDgihzdUkGRRCT+zR2zi5lnWS1TZ59F0fdaGH8jEySjU8YdGv7NPKshtTFN2tx02ZoyJBa0S239L46eT7dJeJeAo3MSvNJDrwP+IE3gjL+nOLjMUreZzz94Ueqzgg7dlpFeyKJFvQvv2tUQ+SUQCUJkWZIlaOKEdMExxSKmEyI+grbLPqXtl9yVAr5WzjQQCNqRFEf/XucKLXFWV5sC+BaoWPJCcmpwbhidHAhmZo= }, Version : 0, QuorumEEPKI : 2 }","title":"Command-line AS Visualization"},{"location":"as_visualization/running_asviz/","text":"Setup and Run AS Visualizations Introduction SCION-viz is a web-based visualization tool of the SCION topology. Connecting to a running AS infrastructure, it reads and displays information about the network topology. Note If you are running SCION in a VM or from a downloaded ARM image, SCION-viz is already installed and running. Skip to step 4 to see how to use it. 1. Setup on a local system If you are using the SCIONLab VM distribution you can skip this step, as SCION-viz is already installed. First, check if PYTHONPATH is set: echo $PYTHONPATH . If it is set, ensure that the scion directory and scion/python directories are both included. If they are missing, you can set PYTHONPATH as follows: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile Next, you will need to clone the repository as follows: cd $SC/sub git clone git@github.com:netsec-ethz/scion-viz cd scion-viz/python/web pip3 install --user --require-hashes -r requirements.txt python3 ./manage.py migrate 2. Source Update This step applies to all uses Local and SCIONLab VM. Update the source for the scion and scion-viz repositories. ./scion.sh stop ./scion.sh clean cd $SC git pull ./scion.sh run cd sub/scion-viz git pull 3. Running To start SCION-viz, you need to provide the local IP address and port number. Note that SCION-viz is automatically started in the SCIONLab VM environment. cd $SC/sub/scion-viz/python/web python3 ./manage.py runserver 10.0.2.15:8000 4. Using The AS Visualization can be used from the browser or from the command line .","title":"Running AS Visualizations"},{"location":"as_visualization/running_asviz/#setup-and-run-as-visualizations","text":"","title":"Setup and Run AS Visualizations"},{"location":"as_visualization/running_asviz/#introduction","text":"SCION-viz is a web-based visualization tool of the SCION topology. Connecting to a running AS infrastructure, it reads and displays information about the network topology. Note If you are running SCION in a VM or from a downloaded ARM image, SCION-viz is already installed and running. Skip to step 4 to see how to use it.","title":"Introduction"},{"location":"as_visualization/running_asviz/#1-setup-on-a-local-system","text":"If you are using the SCIONLab VM distribution you can skip this step, as SCION-viz is already installed. First, check if PYTHONPATH is set: echo $PYTHONPATH . If it is set, ensure that the scion directory and scion/python directories are both included. If they are missing, you can set PYTHONPATH as follows: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile Next, you will need to clone the repository as follows: cd $SC/sub git clone git@github.com:netsec-ethz/scion-viz cd scion-viz/python/web pip3 install --user --require-hashes -r requirements.txt python3 ./manage.py migrate","title":"1. Setup on a local system"},{"location":"as_visualization/running_asviz/#2-source-update","text":"This step applies to all uses Local and SCIONLab VM. Update the source for the scion and scion-viz repositories. ./scion.sh stop ./scion.sh clean cd $SC git pull ./scion.sh run cd sub/scion-viz git pull","title":"2. Source Update"},{"location":"as_visualization/running_asviz/#3-running","text":"To start SCION-viz, you need to provide the local IP address and port number. Note that SCION-viz is automatically started in the SCIONLab VM environment. cd $SC/sub/scion-viz/python/web python3 ./manage.py runserver 10.0.2.15:8000","title":"3. Running"},{"location":"as_visualization/running_asviz/#4-using","text":"The AS Visualization can be used from the browser or from the command line .","title":"4. Using"},{"location":"general_scion_configuration/influence_path_selection/","text":"Configuring path selection TBA","title":"Configuring path selection"},{"location":"general_scion_configuration/influence_path_selection/#configuring-path-selection","text":"TBA","title":"Configuring path selection"},{"location":"general_scion_configuration/local_top/","text":"Running the SCION infrastructure on a local topology Introduction This tutorial will guide you through the steps required to generate a local topology and run a SCION network locally on your system. Prerequisites This tutorial assumes that SCION is already installed on your system. If this is not the case, please follow How to build SCION on Ubuntu 16.04 x86-64 or How to build SCION on Raspberry PI . Generating topology Before continuing with the following steps, you should first navigate to the SCION root directory: cd $SC The SCION installation comes with a command to generate the local topology from 'topo' configuration files. A default topology is defined in topology/Default.topo and it is depicted in the following figure: Creating a topology overwrites the existing installation When running the topology command deletes the current topology, which is stored in the gen folder. We thus advise to back up the current gen directory before calling the topology creation command. In case the gen folder was accidentally overwritten, you need to re-establish it after running the local topology if you want to get back to your previous installation. In case of re-creating the SCIONLab topology running in a VM, re-establishing is easy: shell cd $SC rm -rf gen cp -r /vagrant/gen . Reset runtime environment after topology changes Every time a new topology is instantiated, the SCION runtime environment needs to be reset as described here . To generate the default topology, you can run ./scion.sh topology This command will generate the topology information in the gen directory. The structure of the gen directory will be: ./gen/ISD{X}/AS{Y}/ {elem}{X}-{Y}-{Z}/ as.yml path_policy.yml supervisord.conf topology.yml certs/ ISD{X}-AS{Y}-V0.crt ISD{X}-V0.trc keys/ as-sig.key Running large topology Running the default SCION topology requires significant amount of system resources . This might not be possible on IoT devices like Raspberry PI or on a resource-limited virtual machine. For this reason, using a smaller topology is recommended. To generate a small topology with only a single ISD and 3 ASes, you can use the predefined definition of tiny topology as follows: ./scion.sh topology -c topology/Tiny.topo Some notes about the topology definition in topology/Default.topo defaults.subnet (optional): override the default subnet of 127.0.0.0/8 . core (optional): specify if this is a core AS or not (defaults to 'false'). beacon_servers , certificate_servers , path_servers , (all optional): number of such servers in a specific AS (override the default value 1). links : keys are ISD_ID-AS_ID (format also used for the keys of the JSON file itself) and values can either be PARENT , CHILD , PEER , or CORE . Running SCION Running the SCION infrastructure: ./scion.sh run Stopping the SCION infrastructure: ./scion.sh stop Testing the infrastructure: ./scion.sh test Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Running SCION on a local topology"},{"location":"general_scion_configuration/local_top/#running-the-scion-infrastructure-on-a-local-topology","text":"","title":"Running the SCION infrastructure on a local topology"},{"location":"general_scion_configuration/local_top/#introduction","text":"This tutorial will guide you through the steps required to generate a local topology and run a SCION network locally on your system.","title":"Introduction"},{"location":"general_scion_configuration/local_top/#prerequisites","text":"This tutorial assumes that SCION is already installed on your system. If this is not the case, please follow How to build SCION on Ubuntu 16.04 x86-64 or How to build SCION on Raspberry PI .","title":"Prerequisites"},{"location":"general_scion_configuration/local_top/#generating-topology","text":"Before continuing with the following steps, you should first navigate to the SCION root directory: cd $SC The SCION installation comes with a command to generate the local topology from 'topo' configuration files. A default topology is defined in topology/Default.topo and it is depicted in the following figure: Creating a topology overwrites the existing installation When running the topology command deletes the current topology, which is stored in the gen folder. We thus advise to back up the current gen directory before calling the topology creation command. In case the gen folder was accidentally overwritten, you need to re-establish it after running the local topology if you want to get back to your previous installation. In case of re-creating the SCIONLab topology running in a VM, re-establishing is easy: shell cd $SC rm -rf gen cp -r /vagrant/gen . Reset runtime environment after topology changes Every time a new topology is instantiated, the SCION runtime environment needs to be reset as described here . To generate the default topology, you can run ./scion.sh topology This command will generate the topology information in the gen directory. The structure of the gen directory will be: ./gen/ISD{X}/AS{Y}/ {elem}{X}-{Y}-{Z}/ as.yml path_policy.yml supervisord.conf topology.yml certs/ ISD{X}-AS{Y}-V0.crt ISD{X}-V0.trc keys/ as-sig.key Running large topology Running the default SCION topology requires significant amount of system resources . This might not be possible on IoT devices like Raspberry PI or on a resource-limited virtual machine. For this reason, using a smaller topology is recommended. To generate a small topology with only a single ISD and 3 ASes, you can use the predefined definition of tiny topology as follows: ./scion.sh topology -c topology/Tiny.topo Some notes about the topology definition in topology/Default.topo defaults.subnet (optional): override the default subnet of 127.0.0.0/8 . core (optional): specify if this is a core AS or not (defaults to 'false'). beacon_servers , certificate_servers , path_servers , (all optional): number of such servers in a specific AS (override the default value 1). links : keys are ISD_ID-AS_ID (format also used for the keys of the JSON file itself) and values can either be PARENT , CHILD , PEER , or CORE .","title":"Generating topology"},{"location":"general_scion_configuration/local_top/#running-scion","text":"Running the SCION infrastructure: ./scion.sh run Stopping the SCION infrastructure: ./scion.sh stop Testing the infrastructure: ./scion.sh test","title":"Running SCION"},{"location":"general_scion_configuration/local_top/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"general_scion_configuration/public_ip/","text":"Connecting to SCIONLab with a static public IP address Note This page needs to be updated. Use with care. Introduction This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you have a static public IP address and that your machine can receive UDP traffic from the Internet on port 50000. If this is not the case, please follow Connecting to SCION Lab over OpenVPN Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial . Prerequisites In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here. Step One - downloading SCION Lab configuration In order to download necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure running a SCION infrastructure on a native system. After logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archived content: cd ~/Downloads tar -xvzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need the directory gen , which contains the SCION infrastructure configuration. Step Two - copying SCION Lab configuration Before copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC/gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC/ cd $SC Step Three - Restarting SCION infrastructure After the new configuration is copied, you need to restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Set up an AS and connect to the SCION network"},{"location":"general_scion_configuration/public_ip/#connecting-to-scionlab-with-a-static-public-ip-address","text":"Note This page needs to be updated. Use with care.","title":"Connecting to SCIONLab with a static public IP address"},{"location":"general_scion_configuration/public_ip/#introduction","text":"This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you have a static public IP address and that your machine can receive UDP traffic from the Internet on port 50000. If this is not the case, please follow Connecting to SCION Lab over OpenVPN Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial .","title":"Introduction"},{"location":"general_scion_configuration/public_ip/#prerequisites","text":"In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.","title":"Prerequisites"},{"location":"general_scion_configuration/public_ip/#step-one-downloading-scion-lab-configuration","text":"In order to download necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure running a SCION infrastructure on a native system. After logging in, select \"My Host has a static public IP address and can receive traffic at port 50000\" checkbox and enter your public IP in the text field. Afterwards click on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archived content: cd ~/Downloads tar -xvzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need the directory gen , which contains the SCION infrastructure configuration.","title":"Step One - downloading SCION Lab configuration"},{"location":"general_scion_configuration/public_ip/#step-two-copying-scion-lab-configuration","text":"Before copying new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC/gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC/ cd $SC","title":"Step Two - copying SCION Lab configuration"},{"location":"general_scion_configuration/public_ip/#step-three-restarting-scion-infrastructure","text":"After the new configuration is copied, you need to restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Step Three - Restarting SCION infrastructure"},{"location":"general_scion_configuration/public_ip/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"general_scion_configuration/public_ip_nat/","text":"Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a Network Address Translation (NAT) device Introduction The machine should be set up as described in the tutorial of the host with a public IP address . Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made. Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial . Setup The first step is to find out the internal IP address of your host, as well as the external IP address outside the NAT. Several web sites offer a service that displays the external IP address of a host, for instance whatismyip . You will need to provide the displayed IPv4 address on the SCIONLab web site in the second step. The internal IPv4 address can be found with ifconfig and spotting the address of the main network connection. The second step is to complete Steps 1 and 2 of the installation of the basic system as explained in the earlier tutorial of the host with a public IP address , using the external IP address found in the previous step. The third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the topology.json file in your gen folder, for instance at this location: gen/ISD1/AS1026/br1-1026-1/ , adjusting the ISD and AS numbers to your case. In that file, search for the term Remote , which specifies the IP address and UDP port from which the connecting packets originate. Hint Some networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device). The fourth step re-maps the IP address of the SCION infrastructure devices to the internal address of your host. For this, you can execute the following command from your main SCION directory ( cd $SC to get there), replacing 192.168.1.24 with the internal IPv4 address of your host. BIND_IP=192.168.1.24; sed -e '/ Bind /{n;n;s/: .* /: '${BIND_IP}' /}' -i ./gen/*/*/*/topology.json This completes the installation! You can restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Set up an AS and connect to the SCION network behind a NAT"},{"location":"general_scion_configuration/public_ip_nat/#connecting-to-scionlab-where-the-network-has-a-static-public-ip-address-but-the-machine-itself-is-behind-a-network-address-translation-nat-device","text":"","title":"Connecting to SCIONLab where the network has a static public IP address, but the machine itself is behind a Network Address Translation (NAT) device"},{"location":"general_scion_configuration/public_ip_nat/#introduction","text":"The machine should be set up as described in the tutorial of the host with a public IP address . Since the machine itself is behind a Network Address Translation (NAT) device, however, some adjustments need to be made. Hint Sometimes, providers change the IP address of customers unexpectedly. If the IP address changes, then unfortunately the SCION connection to the border router also fails, and then the connection needs to be torn down and re-established from the SCIONLab.org web site. Another approach is to use the approach using a OpenVPN connection, described in the OpenVPN connection tutorial .","title":"Introduction"},{"location":"general_scion_configuration/public_ip_nat/#setup","text":"The first step is to find out the internal IP address of your host, as well as the external IP address outside the NAT. Several web sites offer a service that displays the external IP address of a host, for instance whatismyip . You will need to provide the displayed IPv4 address on the SCIONLab web site in the second step. The internal IPv4 address can be found with ifconfig and spotting the address of the main network connection. The second step is to complete Steps 1 and 2 of the installation of the basic system as explained in the earlier tutorial of the host with a public IP address , using the external IP address found in the previous step. The third step is to install port forwarding, so that the two SCION border routers can communicate. Ideally, you can set up port forwarding on your NAT device for UDP port 50000 to the internal IPv4 address of your system. If you also need to specify the IP address and UDP of the other border router that originates the packets, you can look at the topology.json file in your gen folder, for instance at this location: gen/ISD1/AS1026/br1-1026-1/ , adjusting the ISD and AS numbers to your case. In that file, search for the term Remote , which specifies the IP address and UDP port from which the connecting packets originate. Hint Some networks have several layers of NATs. In those cases, you will need to set up port forwarding for each NAT layer (specifying at each layer the IPv4 address of the next NAT device). The fourth step re-maps the IP address of the SCION infrastructure devices to the internal address of your host. For this, you can execute the following command from your main SCION directory ( cd $SC to get there), replacing 192.168.1.24 with the internal IPv4 address of your host. BIND_IP=192.168.1.24; sed -e '/ Bind /{n;n;s/: .* /: '${BIND_IP}' /}' -i ./gen/*/*/*/topology.json This completes the installation! You can restart the infrastructure in the following way: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Setup"},{"location":"general_scion_configuration/public_ip_nat/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"general_scion_configuration/setup_endhost/","text":"Set up SCION endhost and connect to local AS infrastructure Introduction In this tutorial we will cover the steps necessary to configure a SCION endhost that will connect to an already running SCION AS. This is useful in situations where your host can take advantage of an existing local SCION infrastructure. Depending on how the SCION AS is set up, the steps for configuring the endhost will slightly differ. Running AS infrastructure executes in a VM In the first way, the SCION AS runs inside a virtual machine (VM). The following figure depicts this scenario. The installation steps of the AS are covered in the following tutorials: Running SCION VM with dynamic IP Running SCION VM with static IP Running AS infrastructure natively on a system In the second way, the SCION AS is executing natively on a host machine. The following figure depicts this scenario. The installation steps for this setup is described in the following tutorial pages: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN Prerequisites Throughout this setup we will use host and endhost IP addresses on both machines. In order to make everything easier to follow it is necessary to create two environment variables HOST_IP and ENDHOST_IP with respective addresses on both machines as they will be used throughout this setup. Execute following commands replacing correct IP addresses with correct ones: export HOST_IP= 10.42.0.1 export ENDHOST_IP= 10.42.0.180 Step One - Installing SCION on endhost Any platform that runs SCION can be used as an endhost. To install SCION on different platforms you can follow one of the tutorials: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Also, SCION VMs can be configured to be used as endhost. Step Two - Copy initial configuration After the SCION environment is successfully installed on your endhost device, we can start the configuration process. First of all, we need to stop the currently running SCION environment and remove the old gen directory. cd $SC ./scion.sh stop rm -rf gen The next step is to make sure both endhost and SCION AS share the same AS configuration, i.e., the same gen directory. This can be done in several ways, but the easiest is to copy it directly from the AS system. Executing the following command from SCION AS copies the complete gen directory to endhost. Note that you will need to replace endhost_user with appropriate user name on the endhost. scp -r ${SC}/gen endhost_user@${ENDHOST_IP}:/home/endhost_user/go/src/github.com/scionproto/scion/gen Step Three - Remove unnecessary services The next step is to disable unnecessary SCION services, like the border router, beacon server, etc., on the endhost device. This can be done by editing configuration file on the endhost's system : vim $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/supervisord.conf It is sufficient to remove last 2 lines that look similar to this: [group:as1-1029] programs = br1-1029-1,bs1-1029-1,cs1-1029-1,ps1-1029-1,sd1-1029 In the same file edit following line: command = bash -c 'exec bin/sciond --api-addr /run/shm/sciond/.... By adding additional addr argument to look like this: command = bash -c 'exec bin/sciond --addr 10.42.0.180 --api-addr /run/shm/sciond/ Make sure you replace 10.42.0.180 to correct endhost's IP address. Next we need to remove all directories except endhost from $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/ directory. cd $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER} rm -rf *-* Step Four - Iptable rules Warning This step is only necessary if you are running the AS SCION infrastructure inside a Virtual Machine . If this is not the case, proceed to step five. Configuration files we copied from VM in first step contain address 10.0.2.15 . This address is not accessible outside the VM and we need to rewrite it to the host's IP address, so that packets get routed correctly. This can be done with iptables. sudo apt install netfilter-persistent iptables-persistent sudo iptables -t nat -A OUTPUT -m udp -p udp -d 10.0.2.15 -j DNAT --to-destination ${HOST_IP} sudo netfilter-persistent save Step Five - Restart SCION Last step is to reload configuration and restart SCION on your endhost system. ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps The best way to verify endhost configuration is by running properly is by running some demo applications: Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Set up SCION endhost and connect to local AS"},{"location":"general_scion_configuration/setup_endhost/#set-up-scion-endhost-and-connect-to-local-as-infrastructure","text":"","title":"Set up SCION endhost and connect to local AS infrastructure"},{"location":"general_scion_configuration/setup_endhost/#introduction","text":"In this tutorial we will cover the steps necessary to configure a SCION endhost that will connect to an already running SCION AS. This is useful in situations where your host can take advantage of an existing local SCION infrastructure. Depending on how the SCION AS is set up, the steps for configuring the endhost will slightly differ.","title":"Introduction"},{"location":"general_scion_configuration/setup_endhost/#running-as-infrastructure-executes-in-a-vm","text":"In the first way, the SCION AS runs inside a virtual machine (VM). The following figure depicts this scenario. The installation steps of the AS are covered in the following tutorials: Running SCION VM with dynamic IP Running SCION VM with static IP","title":"Running AS infrastructure executes in a VM"},{"location":"general_scion_configuration/setup_endhost/#running-as-infrastructure-natively-on-a-system","text":"In the second way, the SCION AS is executing natively on a host machine. The following figure depicts this scenario. The installation steps for this setup is described in the following tutorial pages: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Configuring AS and connecting to SCION network for devices with public static IP Configuring AS and connecting to SCION network for devices with public static IP behind a NAT Configuring AS and connecting to SCION network using OpenVPN","title":"Running AS infrastructure natively on a system"},{"location":"general_scion_configuration/setup_endhost/#prerequisites","text":"Throughout this setup we will use host and endhost IP addresses on both machines. In order to make everything easier to follow it is necessary to create two environment variables HOST_IP and ENDHOST_IP with respective addresses on both machines as they will be used throughout this setup. Execute following commands replacing correct IP addresses with correct ones: export HOST_IP= 10.42.0.1 export ENDHOST_IP= 10.42.0.180","title":"Prerequisites"},{"location":"general_scion_configuration/setup_endhost/#step-one-installing-scion-on-endhost","text":"Any platform that runs SCION can be used as an endhost. To install SCION on different platforms you can follow one of the tutorials: Installing SCION on Ubuntu 16.04 x86 machine Installing SCION on Ubuntu MATE 16.04 - Raspberry PI Also, SCION VMs can be configured to be used as endhost.","title":"Step One - Installing SCION on endhost"},{"location":"general_scion_configuration/setup_endhost/#step-two-copy-initial-configuration","text":"After the SCION environment is successfully installed on your endhost device, we can start the configuration process. First of all, we need to stop the currently running SCION environment and remove the old gen directory. cd $SC ./scion.sh stop rm -rf gen The next step is to make sure both endhost and SCION AS share the same AS configuration, i.e., the same gen directory. This can be done in several ways, but the easiest is to copy it directly from the AS system. Executing the following command from SCION AS copies the complete gen directory to endhost. Note that you will need to replace endhost_user with appropriate user name on the endhost. scp -r ${SC}/gen endhost_user@${ENDHOST_IP}:/home/endhost_user/go/src/github.com/scionproto/scion/gen","title":"Step Two - Copy initial configuration"},{"location":"general_scion_configuration/setup_endhost/#step-three-remove-unnecessary-services","text":"The next step is to disable unnecessary SCION services, like the border router, beacon server, etc., on the endhost device. This can be done by editing configuration file on the endhost's system : vim $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/supervisord.conf It is sufficient to remove last 2 lines that look similar to this: [group:as1-1029] programs = br1-1029-1,bs1-1029-1,cs1-1029-1,ps1-1029-1,sd1-1029 In the same file edit following line: command = bash -c 'exec bin/sciond --api-addr /run/shm/sciond/.... By adding additional addr argument to look like this: command = bash -c 'exec bin/sciond --addr 10.42.0.180 --api-addr /run/shm/sciond/ Make sure you replace 10.42.0.180 to correct endhost's IP address. Next we need to remove all directories except endhost from $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER}/ directory. cd $SC/gen/ISD{ISD_NUMBER}/AS{AS_NUMBER} rm -rf *-*","title":"Step Three - Remove unnecessary services"},{"location":"general_scion_configuration/setup_endhost/#step-four-iptable-rules","text":"Warning This step is only necessary if you are running the AS SCION infrastructure inside a Virtual Machine . If this is not the case, proceed to step five. Configuration files we copied from VM in first step contain address 10.0.2.15 . This address is not accessible outside the VM and we need to rewrite it to the host's IP address, so that packets get routed correctly. This can be done with iptables. sudo apt install netfilter-persistent iptables-persistent sudo iptables -t nat -A OUTPUT -m udp -p udp -d 10.0.2.15 -j DNAT --to-destination ${HOST_IP} sudo netfilter-persistent save","title":"Step Four - Iptable rules"},{"location":"general_scion_configuration/setup_endhost/#step-five-restart-scion","text":"Last step is to reload configuration and restart SCION on your endhost system. ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Step Five - Restart SCION"},{"location":"general_scion_configuration/setup_endhost/#next-steps","text":"The best way to verify endhost configuration is by running properly is by running some demo applications: Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Next steps"},{"location":"general_scion_configuration/setup_sig/","text":"Configuring SCION IP Gateway TBA","title":"Configuring SCION IP Gateway"},{"location":"general_scion_configuration/setup_sig/#configuring-scion-ip-gateway","text":"TBA","title":"Configuring SCION IP Gateway"},{"location":"general_scion_configuration/verifying_scion_installation/","text":"Verifying SCION installation Introduction After running your SCION infrastructure, it is necessary to verify that it is working correctly. There are several methods of doing this. Some of them are described in this post. Running SCION-viz The recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool SCION-viz Inspecting log files The SCION log files can be accessed with the following command: tail -f $SC/logs/bs*.DEBUG What to look for? TBA Tip If you are running the SCION virtual machine image, you can display the logs by running: checkbeacons from any directory","title":"Verifying the installation"},{"location":"general_scion_configuration/verifying_scion_installation/#verifying-scion-installation","text":"","title":"Verifying SCION installation"},{"location":"general_scion_configuration/verifying_scion_installation/#introduction","text":"After running your SCION infrastructure, it is necessary to verify that it is working correctly. There are several methods of doing this. Some of them are described in this post.","title":"Introduction"},{"location":"general_scion_configuration/verifying_scion_installation/#running-scion-viz","text":"The recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool SCION-viz","title":"Running SCION-viz"},{"location":"general_scion_configuration/verifying_scion_installation/#inspecting-log-files","text":"The SCION log files can be accessed with the following command: tail -f $SC/logs/bs*.DEBUG","title":"Inspecting log files"},{"location":"general_scion_configuration/verifying_scion_installation/#what-to-look-for","text":"TBA Tip If you are running the SCION virtual machine image, you can display the logs by running: checkbeacons from any directory","title":"What to look for?"},{"location":"general_scion_configuration/vpn_setup/","text":"Connecting to SCIONLab via VPN Note This page needs to be updated. Use with care. Introduction This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you do not have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from the Internet. If this is not the case, you should consider the tutorial Connecting to SCION Lab with public IP or Connecting to SCION Lab with public IP behind a NAT . Prerequisites In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here. Step One - installing OpenVPN In order to circumvent the problem of not having a publicly accessible IP address, we create an OpenVPN tunnel to carry the SCION traffic between the two SCION border routers. In order to install the openvpn client, you can simply run: sudo apt install openvpn Step Two - downloading SCION Lab configuration In order to download the necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure the running SCION infrastructure. After logging in, download a VM configuration by clicking on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archive content: cd ~/Downloads tar -vxzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need: file client.conf - client OpenVPN configuration directory gen - SCION infrastructure configuration Step Three - Connecting to OpenVPN server Adding the OpenVPN configuration is accomplished by copying files to the openvpn directory: sudo cp client.conf /etc/openvpn sudo chmod 600 /etc/openvpn/client.conf Next, we need to automatically launch the OpenVPN service on startup of the system: systemctl start openvpn@client systemctl enable openvpn@client After this, you should verify that new tun interface is added. The command: ip a should display the newly added interface, in this case tun0 as in this example: 9: tun0: POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10.0.8.40/24 brd 10.0.8.255 scope global tun0 valid_lft forever preferred_lft forever inet6 fe80::2337:a0c4:7fa7:78b3/64 scope link flags 800 valid_lft forever preferred_lft forever In this case, the client's OpenVPN IP address is: 10.0.8.40 . Step Four - copying SCION Lab configuration Before copying the new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC/gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC/ cd $SC Step Five - Restarting SCION Infrastructure After the OpenVPN connection is established and the new configuration is copied, you need to restart the infrastructure as follows: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Set up an AS and connect to the SCION network via VPN"},{"location":"general_scion_configuration/vpn_setup/#connecting-to-scionlab-via-vpn","text":"Note This page needs to be updated. Use with care.","title":"Connecting to SCIONLab via VPN"},{"location":"general_scion_configuration/vpn_setup/#introduction","text":"This tutorial will cover the steps required for connecting a SCION installation to SCIONLab. In the end, you will be running one SCION autonomous system connected to the SCIONLab network. For the purpose of this tutorial, we assume that you do not have static public IP address, or that your machine cannot receive UDP traffic on port 50000 from the Internet. If this is not the case, you should consider the tutorial Connecting to SCION Lab with public IP or Connecting to SCION Lab with public IP behind a NAT .","title":"Introduction"},{"location":"general_scion_configuration/vpn_setup/#prerequisites","text":"In order to follow this tutorial, we will assume that you already installed the SCION infrastructure and that you are able to run a local topology . Hint If you are running one of the SCION Virtual Machine setups, the configuration covered in this tutorial is already implemented in the system image, so you don't need the steps described here.","title":"Prerequisites"},{"location":"general_scion_configuration/vpn_setup/#step-one-installing-openvpn","text":"In order to circumvent the problem of not having a publicly accessible IP address, we create an OpenVPN tunnel to carry the SCION traffic between the two SCION border routers. In order to install the openvpn client, you can simply run: sudo apt install openvpn","title":"Step One - installing OpenVPN"},{"location":"general_scion_configuration/vpn_setup/#step-two-downloading-scion-lab-configuration","text":"In order to download the necessary configuration you must login to SCION Coordination Service . In case you don't yet have an account, follow the registration process. Since the current version of the Coordination Service only generates VM configuration scripts, we will use them in the following steps to configure the running SCION infrastructure. After logging in, download a VM configuration by clicking on Create and Download SCIONLab VM Configuration as presented in the image below: Navigate to the download directory and extract the archive content: cd ~/Downloads tar -vxzf scion_lab_ user_email .tar.gz cd user_email The extracted content should have the following file structure: \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 README.md \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 ... \u251c\u2500\u2500 scion-viz.service \u2514\u2500\u2500 Vagrantfile For the purpose of this tutorial we will just need: file client.conf - client OpenVPN configuration directory gen - SCION infrastructure configuration","title":"Step Two - downloading SCION Lab configuration"},{"location":"general_scion_configuration/vpn_setup/#step-three-connecting-to-openvpn-server","text":"Adding the OpenVPN configuration is accomplished by copying files to the openvpn directory: sudo cp client.conf /etc/openvpn sudo chmod 600 /etc/openvpn/client.conf Next, we need to automatically launch the OpenVPN service on startup of the system: systemctl start openvpn@client systemctl enable openvpn@client After this, you should verify that new tun interface is added. The command: ip a should display the newly added interface, in this case tun0 as in this example: 9: tun0: POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 100 link/none inet 10.0.8.40/24 brd 10.0.8.255 scope global tun0 valid_lft forever preferred_lft forever inet6 fe80::2337:a0c4:7fa7:78b3/64 scope link flags 800 valid_lft forever preferred_lft forever In this case, the client's OpenVPN IP address is: 10.0.8.40 .","title":"Step Three - Connecting to OpenVPN server"},{"location":"general_scion_configuration/vpn_setup/#step-four-copying-scion-lab-configuration","text":"Before copying the new configuration to your SCION directory, you should delete the old one. If necessary back it up previously. rm -rf $SC/gen Copy new configuration and navigate to SCION root directory: cp -r gen $SC/ cd $SC","title":"Step Four - copying SCION Lab configuration"},{"location":"general_scion_configuration/vpn_setup/#step-five-restarting-scion-infrastructure","text":"After the OpenVPN connection is established and the new configuration is copied, you need to restart the infrastructure as follows: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Step Five - Restarting SCION Infrastructure"},{"location":"general_scion_configuration/vpn_setup/#next-steps","text":"After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next steps"},{"location":"native_setup/android/","text":"Installing SCION on an Android device Introduction It is possible to run SCION on an Android device. The easiest way is to install SCION as an Android app . The other alternative is to manually install SCION on your Android device . Both variants are based on Termux , which emulates a Terminal environment with the Linux base system that Android is based upon. This tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described here . Prerequisites It is recommended to make yourself familiar with Termux by reading the Wiki to learn how the app can be used comfortably. SCION App Hint The SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the manual setup won't be necessary anymore. To install the SCION app, please contact Stefan Schwarz to get an invite to the App testing group. Once you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done through the HockeyApp website (it is not available on the Google Play Store). Install SCION with the SCION App Once the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended): ./install That\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue. Hint If the folder selection doesn't show up, run the following script to trigger it manually: ./import_folder That means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB. Warning SCION for Android currently only supports a SCION endhost configuration, as described in this tutorial Warning SCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described here Manual setup To setup SCION on Android manually, the Termux app needs to be installed from the Google Play Store. To install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH. Access Termux via SSH First install the openssh package within Termux with pkg install openssh , then start the server with sshd . Password authentication is not supported, so you need to add your public key to $HOME/.ssh/authorized_keys . The ssh server runs by default on port 8022, so connect to it with ssh -p 8022 DEVICE_IP . You can find the device IP address with ip addr list wlan0 . For more information: Run an SSH server on your Android with Termux Access Termux via USB Install necessary packages Install the required packages from within Termux: apt update apt upgrade pkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl To access the SD card from Termux, it is required to run termux-setup-storage from the Termux console. Configure Go workspace SCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7 ARMv8/aarch64 architectures: For ARMv7: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb For aarch64: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb Setup the Go workspace and add it to your path: echo 'export GOPATH= $HOME/go ' ~/.profile source ~/.profile mkdir -p $GOPATH/bin echo 'PATH=$PATH:$GOPATH/bin' ~/.profile source ~/.profile Install SCION Step One clone the SCION repository After the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands: mkdir -p $GOPATH/src/github.com/scionproto/scion cd $GOPATH/src/github.com/scionproto/scion git config --global url.https://github.com/.insteadOf git@github.com: git clone --recursive -b termux-modifications git@github.com:stschwar/scion . curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch patch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch rm lwip-contrib.patch This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo 'export SC= $GOPATH/src/github.com/scionproto/scion ' ~/.profile source ~/.profile cd $SC Step Two configure Python path variable Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile Step Three install required packages/patches SCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually. Cap'n Proto To install Cap'n Proto in Termux run the following commands in the home/ directory: curl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz tar zxf capnproto-c++-0.6.1.tar.gz cd capnproto-c++-0.6.1 On Termux Cap'n Proto requires some patching to compile: cd src/kj/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch patch debug.c++ debug.c++.patch rm debug.c++.patch Back in the capnproto-c++-0.6.1/ root directory run: ./configure --prefix=$PREFIX TMPDIR=$PREFIX/tmp make make install zlog Install zlog by following its install instructions mostly. It requires some more patching and the installation of libandroid-glob-dev : curl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz tar -zxf zlog-latest-stable.tar.gz cd zlog-latest-stable/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch patch src/makefile zlog-makefile.patch rm zlog-makefile.patch pkg install -y libandroid-glob-dev make PREFIX=$PREFIX make PREFIX=$PREFIX install uthash Install the uthash library from your home/ directory: curl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master unzip uthash-master.zip cp uthash-master/src/*.h $PREFIX/include rm -rf uthash-master/ SCION Python dependencies Most of the Python dependencies can easily be installed through pip : cd $SC pip2 install -r env/pip2/requirements.txt pip3 install -r env/pip3/requirements.txt TMPDIR=$PREFIX/tmp pip3 install lz4 PyNaCl PyYAML Pygments Supervisor In case the pip installation of the package \"Supervisor\" fails, you can install it manually: curl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz tar -xzf supervisor-3.3.4.tar.gz cd supervisor-3.3.4/ python2 setup.py install SCION Go dependencies With Go correctly installed it is easy to install the SCION dependencies as well: cd $SC/env/go ./deps Next steps After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab as an endhost Connect to the already running SCION topology as a mobile endhost through an existing SCION setup. Changes to gen folder Note that in gen/ISDx/AS10xx/supervisord.conf the path of the SCION Deamon socket needs to be changed as follows: \"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\" . VPN Connection to SCIONLab Unfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the Open VPN app can be installed to connect to SCIONLab via VPN. The client.conf file that is provided by the SCIONLab coordinator needs to be renamed to client.ovpn before it can be imported into the app. Additionally, the line route 10.0.8.0/24 needs to be added to the file. Endhost configuration vs. full AS It is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage. If you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.","title":"Android devices"},{"location":"native_setup/android/#installing-scion-on-an-android-device","text":"","title":"Installing SCION on an Android device"},{"location":"native_setup/android/#introduction","text":"It is possible to run SCION on an Android device. The easiest way is to install SCION as an Android app . The other alternative is to manually install SCION on your Android device . Both variants are based on Termux , which emulates a Terminal environment with the Linux base system that Android is based upon. This tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described here .","title":"Introduction"},{"location":"native_setup/android/#prerequisites","text":"It is recommended to make yourself familiar with Termux by reading the Wiki to learn how the app can be used comfortably.","title":"Prerequisites"},{"location":"native_setup/android/#scion-app","text":"Hint The SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the manual setup won't be necessary anymore. To install the SCION app, please contact Stefan Schwarz to get an invite to the App testing group. Once you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done through the HockeyApp website (it is not available on the Google Play Store).","title":"SCION App"},{"location":"native_setup/android/#install-scion-with-the-scion-app","text":"Once the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended): ./install That\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue. Hint If the folder selection doesn't show up, run the following script to trigger it manually: ./import_folder That means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB. Warning SCION for Android currently only supports a SCION endhost configuration, as described in this tutorial Warning SCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described here","title":"Install SCION with the SCION App"},{"location":"native_setup/android/#manual-setup","text":"To setup SCION on Android manually, the Termux app needs to be installed from the Google Play Store. To install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH.","title":"Manual setup"},{"location":"native_setup/android/#access-termux-via-ssh","text":"First install the openssh package within Termux with pkg install openssh , then start the server with sshd . Password authentication is not supported, so you need to add your public key to $HOME/.ssh/authorized_keys . The ssh server runs by default on port 8022, so connect to it with ssh -p 8022 DEVICE_IP . You can find the device IP address with ip addr list wlan0 . For more information: Run an SSH server on your Android with Termux Access Termux via USB","title":"Access Termux via SSH"},{"location":"native_setup/android/#install-necessary-packages","text":"Install the required packages from within Termux: apt update apt upgrade pkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl To access the SD card from Termux, it is required to run termux-setup-storage from the Termux console.","title":"Install necessary packages"},{"location":"native_setup/android/#configure-go-workspace","text":"SCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7 ARMv8/aarch64 architectures: For ARMv7: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb For aarch64: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb Setup the Go workspace and add it to your path: echo 'export GOPATH= $HOME/go ' ~/.profile source ~/.profile mkdir -p $GOPATH/bin echo 'PATH=$PATH:$GOPATH/bin' ~/.profile source ~/.profile","title":"Configure Go workspace"},{"location":"native_setup/android/#install-scion","text":"","title":"Install SCION"},{"location":"native_setup/android/#step-one-clone-the-scion-repository","text":"After the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands: mkdir -p $GOPATH/src/github.com/scionproto/scion cd $GOPATH/src/github.com/scionproto/scion git config --global url.https://github.com/.insteadOf git@github.com: git clone --recursive -b termux-modifications git@github.com:stschwar/scion . curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch patch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch rm lwip-contrib.patch This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo 'export SC= $GOPATH/src/github.com/scionproto/scion ' ~/.profile source ~/.profile cd $SC","title":"Step One &ndash; clone the SCION repository"},{"location":"native_setup/android/#step-two-configure-python-path-variable","text":"Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile","title":"Step Two &ndash; configure Python path variable"},{"location":"native_setup/android/#step-three-install-required-packagespatches","text":"SCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually.","title":"Step Three &ndash; install required packages/patches"},{"location":"native_setup/android/#capn-proto","text":"To install Cap'n Proto in Termux run the following commands in the home/ directory: curl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz tar zxf capnproto-c++-0.6.1.tar.gz cd capnproto-c++-0.6.1 On Termux Cap'n Proto requires some patching to compile: cd src/kj/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch patch debug.c++ debug.c++.patch rm debug.c++.patch Back in the capnproto-c++-0.6.1/ root directory run: ./configure --prefix=$PREFIX TMPDIR=$PREFIX/tmp make make install","title":"Cap'n Proto"},{"location":"native_setup/android/#zlog","text":"Install zlog by following its install instructions mostly. It requires some more patching and the installation of libandroid-glob-dev : curl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz tar -zxf zlog-latest-stable.tar.gz cd zlog-latest-stable/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch patch src/makefile zlog-makefile.patch rm zlog-makefile.patch pkg install -y libandroid-glob-dev make PREFIX=$PREFIX make PREFIX=$PREFIX install","title":"zlog"},{"location":"native_setup/android/#uthash","text":"Install the uthash library from your home/ directory: curl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master unzip uthash-master.zip cp uthash-master/src/*.h $PREFIX/include rm -rf uthash-master/","title":"uthash"},{"location":"native_setup/android/#scion-python-dependencies","text":"Most of the Python dependencies can easily be installed through pip : cd $SC pip2 install -r env/pip2/requirements.txt pip3 install -r env/pip3/requirements.txt TMPDIR=$PREFIX/tmp pip3 install lz4 PyNaCl PyYAML Pygments Supervisor In case the pip installation of the package \"Supervisor\" fails, you can install it manually: curl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz tar -xzf supervisor-3.3.4.tar.gz cd supervisor-3.3.4/ python2 setup.py install","title":"SCION Python dependencies"},{"location":"native_setup/android/#scion-go-dependencies","text":"With Go correctly installed it is easy to install the SCION dependencies as well: cd $SC/env/go ./deps","title":"SCION Go dependencies"},{"location":"native_setup/android/#next-steps","text":"After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab as an endhost Connect to the already running SCION topology as a mobile endhost through an existing SCION setup.","title":"Next steps"},{"location":"native_setup/android/#changes-to-gen-folder","text":"Note that in gen/ISDx/AS10xx/supervisord.conf the path of the SCION Deamon socket needs to be changed as follows: \"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\" .","title":"Changes to gen folder"},{"location":"native_setup/android/#vpn-connection-to-scionlab","text":"Unfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the Open VPN app can be installed to connect to SCIONLab via VPN. The client.conf file that is provided by the SCIONLab coordinator needs to be renamed to client.ovpn before it can be imported into the app. Additionally, the line route 10.0.8.0/24 needs to be added to the file.","title":"VPN Connection to SCIONLab"},{"location":"native_setup/android/#endhost-configuration-vs-full-as","text":"It is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage. If you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.","title":"Endhost configuration vs. full AS"},{"location":"native_setup/image_builder/","text":"Running SCION on an ARM minicomputer using a prebuilt image Introduction This tutorial will guide you through the steps required to run the SCION infrastructure on ARM minicomputers such as a Raspberry Pi or an Odroid XU4. The list below shows all currently supported devices and what OS will be installed: Raspberry Pi Ubuntu MATE Rasbperry Pi 2 Ubuntu Raspberry Pi 3 Ubuntu Odroid XU4 Ubuntu minimal installation Odroid XU4 Ubuntu MATE Running SCION Running SCION consists of several steps: registering an account on SCIONLab Coordination Service , downloading the image corresponding to your device, installing it, and finally running the SCION infrastructure. Step One downloading a SCION image In order to download an image, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point and give it a label (optional). Choose Install on a dedicated SCION system (for experts) . Unless your device has a static, public routable IP address (not behind a NAT), choose Use an OpenVPN connection for this AS . Otherwise enter the IP address under wich your device can be reached. Then, under Create SCION image for IoT device select your device from the dropdown list and click Build image . The procedure may take a few minutes. After it finishes a download link appears from which you can download your generated image. A screenshot of the user interface is shown below: Step Two installing the image The easiest way to install the image on your device is by using Etcher . Etcher is a graphical SD card writing tool available for Windows, Linux, and macOS. In Etcher select your downloaded scion.img.bz2 file and flash it to your SD card. Step Three run the SCION infrastructure Your device is now ready. You can connect to it via SSH like this (where you replace the IP address with the actual address of your device): ssh scion@192.168.1.1 The password for the scion user is scion . It's recommended to change it after the first login. SCION infrastructer and SCION-viz are started automatically on start up. Next steps After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Images for ARM minicomputers"},{"location":"native_setup/image_builder/#running-scion-on-an-arm-minicomputer-using-a-prebuilt-image","text":"","title":"Running SCION on an ARM minicomputer using a prebuilt image"},{"location":"native_setup/image_builder/#introduction","text":"This tutorial will guide you through the steps required to run the SCION infrastructure on ARM minicomputers such as a Raspberry Pi or an Odroid XU4. The list below shows all currently supported devices and what OS will be installed: Raspberry Pi Ubuntu MATE Rasbperry Pi 2 Ubuntu Raspberry Pi 3 Ubuntu Odroid XU4 Ubuntu minimal installation Odroid XU4 Ubuntu MATE","title":"Introduction"},{"location":"native_setup/image_builder/#running-scion","text":"Running SCION consists of several steps: registering an account on SCIONLab Coordination Service , downloading the image corresponding to your device, installing it, and finally running the SCION infrastructure.","title":"Running SCION"},{"location":"native_setup/image_builder/#step-one-downloading-a-scion-image","text":"In order to download an image, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point and give it a label (optional). Choose Install on a dedicated SCION system (for experts) . Unless your device has a static, public routable IP address (not behind a NAT), choose Use an OpenVPN connection for this AS . Otherwise enter the IP address under wich your device can be reached. Then, under Create SCION image for IoT device select your device from the dropdown list and click Build image . The procedure may take a few minutes. After it finishes a download link appears from which you can download your generated image. A screenshot of the user interface is shown below:","title":"Step One &ndash; downloading a SCION image"},{"location":"native_setup/image_builder/#step-two-installing-the-image","text":"The easiest way to install the image on your device is by using Etcher . Etcher is a graphical SD card writing tool available for Windows, Linux, and macOS. In Etcher select your downloaded scion.img.bz2 file and flash it to your SD card.","title":"Step Two &ndash; installing the image"},{"location":"native_setup/image_builder/#step-three-run-the-scion-infrastructure","text":"Your device is now ready. You can connect to it via SSH like this (where you replace the IP address with the actual address of your device): ssh scion@192.168.1.1 The password for the scion user is scion . It's recommended to change it after the first login. SCION infrastructer and SCION-viz are started automatically on start up.","title":"Step Three &ndash; run the SCION infrastructure"},{"location":"native_setup/image_builder/#next-steps","text":"After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Next steps"},{"location":"native_setup/rpi_ubuntu/","text":"Building SCION for a Raspberry Pi Ubuntu MATE Introduction The SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the regular x86 build , although there are a few additional steps required to make everything work. Prerequisites In this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the installation guide . Update packages to latest version It is recommended to update all packages before starting the installation process of SCION: sudo apt update sudo apt upgrade Install necessary tools Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username. Install necessary packages sudo apt install git curl Configure Go workspace Tip You can skip this step if you have Go workspaces already configured. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo 'export GOPATH= $HOME/go ' ~/.profile source ~/.profile mkdir -p $GOPATH/bin echo 'PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' ~/.profile source ~/.profile Install SCION Step One clone the SCION repository After the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH/src/github.com/scionproto/scion cd $GOPATH/src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo 'export SC= $GOPATH/src/github.com/scionproto/scion ' ~/.profile source ~/.profile cd $SC Step Two apply necessary patches On ARM architectures, it is necessary to apply two patches as follows: curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/421d8bfecdd225a3b17a18ec1c1e1bf86c436b35/arm-scionlab-update2.patch | patch -p1 In order to enable updating the system, we commit the patched changes into the local arm-modified branch: git commit -am Modified to compile on ARM systems Troubleshooting If your git identity is not configured, commits won't be possible. Configuring the user identity on a newly installed git can be done as follows: cd $SC git config user.name John Doe git config user.email johndoe@example.com Step Three configure Python path variable Some SCION components like SCIONviz require Python libraries which are located in the scion root directory. In order to make them accessible, exporting the PYTHONPATH environment variable is required: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile Step Four finish installing the required packages The build process is quite demanding in memory, so the machine has to have more than the 1GB of main memory that it comes with. To add one more gigabyte from the swap follow these steps: sudo fallocate -l 1G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile free -h In order to instal dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c 'yes | GO_INSTALL=true ./env/deps' ./scion.sh build Note You might be asked to enter the sudo password after running the command This will finish installing the required dependencies and system packages. Step Five configure the host Zookeeper instance Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). sudo cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg Next steps After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Ubuntu MATE Raspberry PI"},{"location":"native_setup/rpi_ubuntu/#building-scion-for-a-raspberry-pi-ubuntu-mate","text":"","title":"Building SCION for a Raspberry Pi &ndash; Ubuntu MATE"},{"location":"native_setup/rpi_ubuntu/#introduction","text":"The SCION infrastructure can also be run on IoT devices like a Raspberry Pi. Building SCION for a Raspberry Pi is similar to the regular x86 build , although there are a few additional steps required to make everything work.","title":"Introduction"},{"location":"native_setup/rpi_ubuntu/#prerequisites","text":"In this tutorial, we assume that you already have a Raspberry Pi running Ubuntu MATE (or similar Ubuntu Xenial based distribution). In order to install Ubuntu MATE, please follow the installation guide . Update packages to latest version It is recommended to update all packages before starting the installation process of SCION: sudo apt update sudo apt upgrade","title":"Prerequisites"},{"location":"native_setup/rpi_ubuntu/#install-necessary-tools","text":"Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username.","title":"Install necessary tools"},{"location":"native_setup/rpi_ubuntu/#install-necessary-packages","text":"sudo apt install git curl","title":"Install necessary packages"},{"location":"native_setup/rpi_ubuntu/#configure-go-workspace","text":"Tip You can skip this step if you have Go workspaces already configured. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo 'export GOPATH= $HOME/go ' ~/.profile source ~/.profile mkdir -p $GOPATH/bin echo 'PATH=$PATH:/usr/local/go/bin:$GOPATH/bin' ~/.profile source ~/.profile","title":"Configure Go workspace"},{"location":"native_setup/rpi_ubuntu/#install-scion","text":"","title":"Install SCION"},{"location":"native_setup/rpi_ubuntu/#step-one-clone-the-scion-repository","text":"After the Go workspace has been configured, we can checkout the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH/src/github.com/scionproto/scion cd $GOPATH/src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo 'export SC= $GOPATH/src/github.com/scionproto/scion ' ~/.profile source ~/.profile cd $SC","title":"Step One &ndash; clone the SCION repository"},{"location":"native_setup/rpi_ubuntu/#step-two-apply-necessary-patches","text":"On ARM architectures, it is necessary to apply two patches as follows: curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/421d8bfecdd225a3b17a18ec1c1e1bf86c436b35/arm-scionlab-update2.patch | patch -p1 In order to enable updating the system, we commit the patched changes into the local arm-modified branch: git commit -am Modified to compile on ARM systems Troubleshooting If your git identity is not configured, commits won't be possible. Configuring the user identity on a newly installed git can be done as follows: cd $SC git config user.name John Doe git config user.email johndoe@example.com","title":"Step Two &ndash; apply necessary patches"},{"location":"native_setup/rpi_ubuntu/#step-three-configure-python-path-variable","text":"Some SCION components like SCIONviz require Python libraries which are located in the scion root directory. In order to make them accessible, exporting the PYTHONPATH environment variable is required: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile","title":"Step Three &ndash; configure Python path variable"},{"location":"native_setup/rpi_ubuntu/#step-four-finish-installing-the-required-packages","text":"The build process is quite demanding in memory, so the machine has to have more than the 1GB of main memory that it comes with. To add one more gigabyte from the swap follow these steps: sudo fallocate -l 1G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile free -h In order to instal dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c 'yes | GO_INSTALL=true ./env/deps' ./scion.sh build Note You might be asked to enter the sudo password after running the command This will finish installing the required dependencies and system packages.","title":"Step Four &ndash; finish installing the required packages"},{"location":"native_setup/rpi_ubuntu/#step-five-configure-the-host-zookeeper-instance","text":"Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). sudo cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg","title":"Step Five &ndash; configure the host Zookeeper instance"},{"location":"native_setup/rpi_ubuntu/#next-steps","text":"After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Next steps"},{"location":"native_setup/ubuntu_x86_build/","text":"Building SCION on Ubuntu 16.04 x86-64 Introduction This tutorial will guide you through the steps required to install SCION on an x86 system running Ubuntu 16.04. For details on how to build SCION on a Raspberry Pi, please take a look at how to build SCION on a Raspberry Pi . Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username. Easy Way (using the SCION install script) The easy way to install SCION is to use the SCION install script: wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_install_script.sh chmod +x scion_install_script.sh The SCION install script supports various ways to connect to SCION: Running the SCION infrastructure on a local topology If the SCION install script is executed without any arguments, SCION will be run on a local topology: ./scion_install_script.sh For more information, check out Running the SCION infrastructure on a local topology . Connecting to SCIONLab Installing a SCION AS and connecting it to SCIONLab requires that you have already downloaded the necessary configuration from the SCION Coordination Service . To do so, please follow one of the following options, depending on the network configuration of the system on which SCION will be installed until you have the configuration files: Connecting to SCIONLab with a static public IP address Connecting to SCIONLab with a static IP address, but behind a NAT Connecting to SCIONLab via VPN (without a static IP address) The configuration downloaded from the SCION Coordination Service includes a gen folder that needs to be uploaded to the target system and provided as an argument to the install script: export BIDIR=`pwd` ./scion_install_script.sh -g $BIDIR/gen/ In case of connecting to SCIONLab via VPN, the OpenVPN client configurationi ( client.conf ), that is included in the configuration downloaded from the SCION Coordination Service needs to be provided as argument additionally: export BIDIR=`pwd` ./scion_install_script.sh -g $BIDIR/gen/ -v $BIDIR/client.conf Next Steps The scion_install_script.sh execution declares new variable definitions (e.g. $SC ) in ~/.profile . It is advised to log out and log in again for them to take effect. After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation . Advanced Way (manual installation) The following steps will guide you through the manual installation of the tools necessary for running SCION. Step One install Go In order to run SCION, you must have Go version 1.9.x installed. The installation steps below will automatically install the correct GO version, but be aware that if you are running a different Go version or are using a different gopath, the following steps may break other Go software that you are running. Step Two configure your Go workspace Tip You can skip this step if you already have a Go workspace configured on your machine. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo 'export GOPATH= $HOME/go ' ~/.profile source ~/.profile mkdir -p $GOPATH/bin echo 'PATH=$PATH:$GOPATH/bin' ~/.profile source ~/.profile SCION installation Step One clone the SCION repository After the Go workspace has been configured, we can check out the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH/src/github.com/scionproto/scion cd $GOPATH/src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo 'export SC= $GOPATH/src/github.com/scionproto/scion ' ~/.profile source ~/.profile cd $SC Step Two configure Python path variable Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile Step Three finish installing the required packages In order to install all the dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c 'yes | GO_INSTALL=true ./env/deps' Note You might be asked for your sudo password after running the command This will finish installing the required dependencies and system packages. Step Four configure the host Zookeeper instance Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg Next steps After finishing the installation of SCION, you can run the architecture on several different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Ubuntu 16.04 x86-64"},{"location":"native_setup/ubuntu_x86_build/#building-scion-on-ubuntu-1604-x86-64","text":"","title":"Building SCION on Ubuntu 16.04 x86-64"},{"location":"native_setup/ubuntu_x86_build/#introduction","text":"This tutorial will guide you through the steps required to install SCION on an x86 system running Ubuntu 16.04. For details on how to build SCION on a Raspberry Pi, please take a look at how to build SCION on a Raspberry Pi . Note about sudo Many of our build and installation scripts will use sudo in them. The user has to belong to the sudo group: sudo usermod -aG sudo scionuser And it is highly recommended to enable sudo without password: echo 'scionuser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/99-scionuser-user Remember to replace scionuser with your username.","title":"Introduction"},{"location":"native_setup/ubuntu_x86_build/#easy-way-using-the-scion-install-script","text":"The easy way to install SCION is to use the SCION install script: wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scion_install_script.sh chmod +x scion_install_script.sh The SCION install script supports various ways to connect to SCION:","title":"Easy Way (using the SCION install script)"},{"location":"native_setup/ubuntu_x86_build/#running-the-scion-infrastructure-on-a-local-topology","text":"If the SCION install script is executed without any arguments, SCION will be run on a local topology: ./scion_install_script.sh For more information, check out Running the SCION infrastructure on a local topology .","title":"Running the SCION infrastructure on a local topology"},{"location":"native_setup/ubuntu_x86_build/#connecting-to-scionlab","text":"Installing a SCION AS and connecting it to SCIONLab requires that you have already downloaded the necessary configuration from the SCION Coordination Service . To do so, please follow one of the following options, depending on the network configuration of the system on which SCION will be installed until you have the configuration files: Connecting to SCIONLab with a static public IP address Connecting to SCIONLab with a static IP address, but behind a NAT Connecting to SCIONLab via VPN (without a static IP address) The configuration downloaded from the SCION Coordination Service includes a gen folder that needs to be uploaded to the target system and provided as an argument to the install script: export BIDIR=`pwd` ./scion_install_script.sh -g $BIDIR/gen/ In case of connecting to SCIONLab via VPN, the OpenVPN client configurationi ( client.conf ), that is included in the configuration downloaded from the SCION Coordination Service needs to be provided as argument additionally: export BIDIR=`pwd` ./scion_install_script.sh -g $BIDIR/gen/ -v $BIDIR/client.conf","title":"Connecting to SCIONLab"},{"location":"native_setup/ubuntu_x86_build/#next-steps","text":"The scion_install_script.sh execution declares new variable definitions (e.g. $SC ) in ~/.profile . It is advised to log out and log in again for them to take effect. After running the SCION infrastructure, it is necessary to verify that it is running properly. This is covered in the tutorial Verifying SCION Installation .","title":"Next Steps"},{"location":"native_setup/ubuntu_x86_build/#advanced-way-manual-installation","text":"The following steps will guide you through the manual installation of the tools necessary for running SCION.","title":"Advanced Way (manual installation)"},{"location":"native_setup/ubuntu_x86_build/#step-one-install-go","text":"In order to run SCION, you must have Go version 1.9.x installed. The installation steps below will automatically install the correct GO version, but be aware that if you are running a different Go version or are using a different gopath, the following steps may break other Go software that you are running.","title":"Step One &ndash; install Go"},{"location":"native_setup/ubuntu_x86_build/#step-two-configure-your-go-workspace","text":"Tip You can skip this step if you already have a Go workspace configured on your machine. It is necessary to set up your Go workspace . The following commands will create a default workspace at ~/go and export it as the $GOPATH environment variable: echo 'export GOPATH= $HOME/go ' ~/.profile source ~/.profile mkdir -p $GOPATH/bin echo 'PATH=$PATH:$GOPATH/bin' ~/.profile source ~/.profile","title":"Step Two &ndash; configure your Go workspace"},{"location":"native_setup/ubuntu_x86_build/#scion-installation","text":"","title":"SCION installation"},{"location":"native_setup/ubuntu_x86_build/#step-one-clone-the-scion-repository","text":"After the Go workspace has been configured, we can check out the SCION repository from github.com with all dependencies using the following commands: mkdir -p $GOPATH/src/github.com/scionproto/scion cd $GOPATH/src/github.com/scionproto/scion git clone --recursive -b scionlab git@github.com:netsec-ethz/netsec-scion . Troubleshooting If your account does not have an SSH key and that SSH key is not assigned to the github account, the checkout will fail with the error Permission denied (publickey) . There are two ways to resolve this problem: Changing the checkout using https instead of ssh: git config --global url.https://github.com/.insteadOf git@github.com: Assign an SSH key to your Github account, detailed instructions can be found on Github help . This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo 'export SC= $GOPATH/src/github.com/scionproto/scion ' ~/.profile source ~/.profile cd $SC","title":"Step One &ndash; clone the SCION repository"},{"location":"native_setup/ubuntu_x86_build/#step-two-configure-python-path-variable","text":"Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo 'export PYTHONPATH= $SC/python:$SC ' ~/.profile source ~/.profile","title":"Step Two &ndash; configure Python path variable"},{"location":"native_setup/ubuntu_x86_build/#step-three-finish-installing-the-required-packages","text":"In order to install all the dependencies, simply issue the following command while in the root directory of the SCION installation: bash -c 'yes | GO_INSTALL=true ./env/deps' Note You might be asked for your sudo password after running the command This will finish installing the required dependencies and system packages.","title":"Step Three &ndash; finish installing the required packages"},{"location":"native_setup/ubuntu_x86_build/#step-four-configure-the-host-zookeeper-instance","text":"Replacing /etc/zookeeper/conf/zoo.cfg with the file docker/zoo.cfg is recommended. This has the standard parameters set, as well as using a ram disk for the data log, which greatly improves the performance of Zookeeper (at the cost of reliability, so it should only be done in a testing environment). cp docker/zoo.cfg /etc/zookeeper/conf/zoo.cfg","title":"Step Four &ndash; configure the host Zookeeper instance"},{"location":"native_setup/ubuntu_x86_build/#next-steps_1","text":"After finishing the installation of SCION, you can run the architecture on several different topologies. The following tutorials will cover this in further detail: Configure SCION to run on system boot Use systemd to run SCION and SCION-viz when the system is started. Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab with a static public IP address Connect to the already running SCION topology. Connecting to SCIONLab with a static public IP address, but behind a NAT Connecting to SCIONLab without a static public IP address Connect to the already running SCION topology through an OpenVPN tunnel.","title":"Next steps"},{"location":"sample_projects/access_camera/","text":"Access camera images over SCION network The camerapp application contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the README.md . imagefetcher To install imagefetcher: go get github.com/perrig/scionlab/camerapp/imagefetcher Note If you are running SCION in a VM this app is already installed. To use the image fetcher, you will need to pass your local host's address as a SCION address (in the format ISD-AS,[IPv4]:port ) and specify the address of an image server, for instance 17-ffaa:0:1102,[192.33.93.166]:42002 . The local ISD and AS number can be seen for instance from files in the logs directory: br17-ffaa_0_1102.log indicates that we are in AS ffaa:0:1102 in ISD 17. Another way is to look at the gen directory, which in this case contains a subdirectory called ISD17 , which contains subdirectory ASffaa_0_1102 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port. A sample image server that can be contacted by any client is set up at 17-ffaa:0:1102,[192.33.93.166]:42002 . The client address is passed with -c and the server address with -s : imagefetcher -s 17-ffaa:0:1102,[192.33.93.166]:42002 -c 17-ffaa:0:1108,[10.0.2.15]:42001 The fetched image is then saved in the local directory. A sample image is shown below: imageserver To install imageserver: go get github.com/perrig/scionlab/camerapp/imageserver The imageserver application keeps looking for .jpg files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used. Included is a simple paparazzi.py application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows: python3 ${GOPATH}/src/github.com/perrig/scionlab/camerapp/imageserver/paparazzi.py imageserver -s 17-ffaa:0:1102,[192.33.93.166]:42002","title":"Access a video camera over the SCION network"},{"location":"sample_projects/access_camera/#access-camera-images-over-scion-network","text":"The camerapp application contains image fetcher and server applications, using the SCION network. Documentation on the code is available in the README.md .","title":"Access camera images over SCION network"},{"location":"sample_projects/access_camera/#imagefetcher","text":"To install imagefetcher: go get github.com/perrig/scionlab/camerapp/imagefetcher Note If you are running SCION in a VM this app is already installed. To use the image fetcher, you will need to pass your local host's address as a SCION address (in the format ISD-AS,[IPv4]:port ) and specify the address of an image server, for instance 17-ffaa:0:1102,[192.33.93.166]:42002 . The local ISD and AS number can be seen for instance from files in the logs directory: br17-ffaa_0_1102.log indicates that we are in AS ffaa:0:1102 in ISD 17. Another way is to look at the gen directory, which in this case contains a subdirectory called ISD17 , which contains subdirectory ASffaa_0_1102 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port. A sample image server that can be contacted by any client is set up at 17-ffaa:0:1102,[192.33.93.166]:42002 . The client address is passed with -c and the server address with -s : imagefetcher -s 17-ffaa:0:1102,[192.33.93.166]:42002 -c 17-ffaa:0:1108,[10.0.2.15]:42001 The fetched image is then saved in the local directory. A sample image is shown below:","title":"imagefetcher"},{"location":"sample_projects/access_camera/#imageserver","text":"To install imageserver: go get github.com/perrig/scionlab/camerapp/imageserver The imageserver application keeps looking for .jpg files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used. Included is a simple paparazzi.py application, which reads and saves the camera image on a Raspberry Pi. The system is launched as follows: python3 ${GOPATH}/src/github.com/perrig/scionlab/camerapp/imageserver/paparazzi.py imageserver -s 17-ffaa:0:1102,[192.33.93.166]:42002","title":"imageserver"},{"location":"sample_projects/bwtester/","text":"The bwtester application The bandwidth testing application bwtester enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester README . bwtestclient To install bwtestclient and get dependencies as listed in vendor file: go get github.com/perrig/scionlab/bwtester/bwtestclient cd $GOPATH/src/github.com/perrig/scionlab/ govendor sync For govendor, see note [1]. Note If you are running SCION in a VM this app is already installed. Sample servers are installed at the following locations: 17-ffaa:0:1102,[192.33.93.177]:30100 17-ffaa:1:13,[192.168.1.111]:30100 17-ffaa:1:f,[10.0.2.15]:30100 19-ffaa:1:22,[141.44.25.146]:30100 And at the attachment points: 17-ffaa:0:1107,[10.0.8.1]:30100 18-ffaa:0:1202,[10.0.8.1]:30100 19-ffaa:0:1303,[10.0.8.1]:30100 20-ffaa:0:1404,[10.0.8.1]:30100 You can test the application as follows, replacing the client address with your own address after the -c option (you can select any available port number for the client): bwtestclient -s 17-ffaa:0:1102,[192.33.93.177]:30100 -c 17-ffaa:1:6,[10.0.2.15]:30102 The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), the total number of packets that will be sent, and the target bandwidth. For instance, 5,100,10,1600bps specifies that 10 packets of size 100 bytes will be sent over 5 seconds, resulting in a bandwidth of 1600bps. The question mark ? character can be used as wildcard for any of these parameters. Its value is then computed according to the other parameters. The parameters for the test in the client-to-server direction are specified with -cs , and the server-to-client direction with -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command: bwtestclient -s 17-ffaa:0:1102,[192.33.93.177]:30100 -c 17-ffaa:1:6,[10.0.2.15]:30102 -cs 10,1000,1250,1Mbps -sc 10,1000,12500,10Mbps For more information run the application without arguments to print its usage. bwtestserver To install bwtestserver and get dependencies as listed in vendor file: go get github.com/perrig/scionlab/bwtester/bwtestserver cd $GOPATH/src/github.com/perrig/scionlab/ govendor sync For govendor, see note [1]. The server is started as follows, where the address needs to be adjusted as for other applications: bwtestserver -s 17-ffaa:0:1102,[192.33.93.177]:30100 [1] govendor: govendor is already installed by the main SCION installation with the supported version. If you don't have govendor installed, you can do so using the following steps: mkdir $GOPATH/kardianos; cd $GOPATH/kardianos/ git clone https://github.com/kardianos/govendor.git cd ./govendor/ git fetch; git checkout fbbc78e8d1b533dfcf81c2a4be2cec2617a926f7 go install -v","title":"Bandwidth tester application"},{"location":"sample_projects/bwtester/#the-bwtester-application","text":"The bandwidth testing application bwtester enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester README .","title":"The bwtester application"},{"location":"sample_projects/bwtester/#bwtestclient","text":"To install bwtestclient and get dependencies as listed in vendor file: go get github.com/perrig/scionlab/bwtester/bwtestclient cd $GOPATH/src/github.com/perrig/scionlab/ govendor sync For govendor, see note [1]. Note If you are running SCION in a VM this app is already installed. Sample servers are installed at the following locations: 17-ffaa:0:1102,[192.33.93.177]:30100 17-ffaa:1:13,[192.168.1.111]:30100 17-ffaa:1:f,[10.0.2.15]:30100 19-ffaa:1:22,[141.44.25.146]:30100 And at the attachment points: 17-ffaa:0:1107,[10.0.8.1]:30100 18-ffaa:0:1202,[10.0.8.1]:30100 19-ffaa:0:1303,[10.0.8.1]:30100 20-ffaa:0:1404,[10.0.8.1]:30100 You can test the application as follows, replacing the client address with your own address after the -c option (you can select any available port number for the client): bwtestclient -s 17-ffaa:0:1102,[192.33.93.177]:30100 -c 17-ffaa:1:6,[10.0.2.15]:30102 The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), the total number of packets that will be sent, and the target bandwidth. For instance, 5,100,10,1600bps specifies that 10 packets of size 100 bytes will be sent over 5 seconds, resulting in a bandwidth of 1600bps. The question mark ? character can be used as wildcard for any of these parameters. Its value is then computed according to the other parameters. The parameters for the test in the client-to-server direction are specified with -cs , and the server-to-client direction with -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command: bwtestclient -s 17-ffaa:0:1102,[192.33.93.177]:30100 -c 17-ffaa:1:6,[10.0.2.15]:30102 -cs 10,1000,1250,1Mbps -sc 10,1000,12500,10Mbps For more information run the application without arguments to print its usage.","title":"bwtestclient"},{"location":"sample_projects/bwtester/#bwtestserver","text":"To install bwtestserver and get dependencies as listed in vendor file: go get github.com/perrig/scionlab/bwtester/bwtestserver cd $GOPATH/src/github.com/perrig/scionlab/ govendor sync For govendor, see note [1]. The server is started as follows, where the address needs to be adjusted as for other applications: bwtestserver -s 17-ffaa:0:1102,[192.33.93.177]:30100 [1] govendor: govendor is already installed by the main SCION installation with the supported version. If you don't have govendor installed, you can do so using the following steps: mkdir $GOPATH/kardianos; cd $GOPATH/kardianos/ git clone https://github.com/kardianos/govendor.git cd ./govendor/ git fetch; git checkout fbbc78e8d1b533dfcf81c2a4be2cec2617a926f7 go install -v","title":"bwtestserver"},{"location":"sample_projects/fetch_sensor_readings/","text":"Read sensor readings over SCION network The sensorapp application contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response, containing the readings. sensorfetcher To install sensorfetcher: go get github.com/perrig/scionlab/sensorapp/sensorfetcher Note If you are running SCION in a VM this app is already installed. The sensorfetcher application sends a 0-length SCION UDP packet to the sensorserver application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try. To run the sensorfetcher application, you will need to express your local host's address as a SCION address (in the format ISD-AS,[IPv4]:port ) and specify the address of a sensor server, for instance 17-ffaa:0:1102,[192.33.93.177]:42003 . The local ISD and AS number can be seen for instance from files in the logs directory: br17-ffaa_0_1102.log indicates that we are in AS ffaa:0:1102 in ISD 17. Another way is to look at the gen directory, which in this case contains a subdirectory called ISD17 , which contains subdirectory ASffaa_0_1102 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port. Sample servers are at: 17-ffaa:0:1102,[192.33.93.177]:42003 17-ffaa:1:13,[192.168.1.111]:42003 Their readings can be fetched as follows (need to replace client address with actual client address, with an arbitrary free port): sensorfetcher -s 17-ffaa:0:1102,[192.33.93.177]:42003 -c 17-ffaa:0:1108,[10.0.2.15]:42001 sensorserver To install sensorserver: go get github.com/perrig/scionlab/sensorapp/sensorserver We use sensors from Tinkerforge, and the sensorreader.py Python application fetches the sensor values and writes them to stdout . The sensorserver application collects the readings, and serves them as a string to client requests. To start, we use the following command: python3 ${GOPATH}/src/github.com/perrig/scionlab/sensorapp/sensorserver/sensorreader.py | sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003 If you do not have any sensor information available, then you can use a simple time application that reports the current time on your system: python3 ${GOPATH}/src/github.com/perrig/scionlab/sensorapp/sensorserver/timereader.py | sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003","title":"Read a temperature sensor over the SCION network"},{"location":"sample_projects/fetch_sensor_readings/#read-sensor-readings-over-scion-network","text":"The sensorapp application contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple, and sends a single packet to request the information, and obtains typically a single packet in response, containing the readings.","title":"Read sensor readings over SCION network"},{"location":"sample_projects/fetch_sensor_readings/#sensorfetcher","text":"To install sensorfetcher: go get github.com/perrig/scionlab/sensorapp/sensorfetcher Note If you are running SCION in a VM this app is already installed. The sensorfetcher application sends a 0-length SCION UDP packet to the sensorserver application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try. To run the sensorfetcher application, you will need to express your local host's address as a SCION address (in the format ISD-AS,[IPv4]:port ) and specify the address of a sensor server, for instance 17-ffaa:0:1102,[192.33.93.177]:42003 . The local ISD and AS number can be seen for instance from files in the logs directory: br17-ffaa_0_1102.log indicates that we are in AS ffaa:0:1102 in ISD 17. Another way is to look at the gen directory, which in this case contains a subdirectory called ISD17 , which contains subdirectory ASffaa_0_1102 . The IPv4 address represents the local address the application binds to, and the local port number can be freely selected as any available port. Sample servers are at: 17-ffaa:0:1102,[192.33.93.177]:42003 17-ffaa:1:13,[192.168.1.111]:42003 Their readings can be fetched as follows (need to replace client address with actual client address, with an arbitrary free port): sensorfetcher -s 17-ffaa:0:1102,[192.33.93.177]:42003 -c 17-ffaa:0:1108,[10.0.2.15]:42001","title":"sensorfetcher"},{"location":"sample_projects/fetch_sensor_readings/#sensorserver","text":"To install sensorserver: go get github.com/perrig/scionlab/sensorapp/sensorserver We use sensors from Tinkerforge, and the sensorreader.py Python application fetches the sensor values and writes them to stdout . The sensorserver application collects the readings, and serves them as a string to client requests. To start, we use the following command: python3 ${GOPATH}/src/github.com/perrig/scionlab/sensorapp/sensorserver/sensorreader.py | sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003 If you do not have any sensor information available, then you can use a simple time application that reports the current time on your system: python3 ${GOPATH}/src/github.com/perrig/scionlab/sensorapp/sensorserver/timereader.py | sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003","title":"sensorserver"},{"location":"sample_projects/multipath/","text":"Using multipath in SCION TBA","title":"Using multipath in SCION"},{"location":"sample_projects/multipath/#using-multipath-in-scion","text":"TBA","title":"Using multipath in SCION"},{"location":"scion_tricks/changing_gen_dir/","text":"Updating gen directory Introduction The complete configuration for SCION infrastructure is stored in gen directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data. Content for this directory can be created in several ways: Using topology definition from topology directory. Described in Running SCION on local topology Downloading from SCIONLab Coordination Service . Described in Configuring SCION Lab with OpenVPN . Manually creating topology Restarting SCION infrastructure Every time gen directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands: cd $SC ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run Next steps After topology has been updated it is recommended to verify that its working correctly","title":"Updating gen directory"},{"location":"scion_tricks/changing_gen_dir/#updating-gen-directory","text":"","title":"Updating gen directory"},{"location":"scion_tricks/changing_gen_dir/#introduction","text":"The complete configuration for SCION infrastructure is stored in gen directory. This includes topology definition, dispatcher, border router and SCION services configuration. It also includes certificates and other unique AS data. Content for this directory can be created in several ways: Using topology definition from topology directory. Described in Running SCION on local topology Downloading from SCIONLab Coordination Service . Described in Configuring SCION Lab with OpenVPN . Manually creating topology","title":"Introduction"},{"location":"scion_tricks/changing_gen_dir/#restarting-scion-infrastructure","text":"Every time gen directory is changed, it is necessary to restart SCION infrastructure so changes will take effect. This is done with following commands: cd $SC ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh run","title":"Restarting SCION infrastructure"},{"location":"scion_tricks/changing_gen_dir/#next-steps","text":"After topology has been updated it is recommended to verify that its working correctly","title":"Next steps"},{"location":"scion_tricks/setup_startup/","text":"Run SCION and SCION-viz automatically on boot Prerequisites It is necessary to have SCION successfully installed on your system before proceeding with this tutorial. Necessary steps for installing SCION can be found on following pages: Installing SCION on Ubuntu x86-64 Installing SCION on Raspberry PI Ubuntu Tip If you are using SCION VM, SCION is already running on system boot so following steps are not required to be done manually. Installation We will create systemd service that will be configured to run SCION infrastructure on system boot. Step One - Get template service files To avoid creating service files from scratch, we can download templates from SCION Lab repository and customize them for current system. Downloaded template files have value _USER_ instead of real system user so we will have to adjust it. Complete process can be finished with following commands: mkdir -p /tmp/scion_services cd /tmp/scion_services wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion.service wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion-viz.service sed -i s/_USER_/$USER/g *.service Step Two - Register services with systemd We need to copy newly created services to systemd directory and enable them. This can be done with following commands: sudo cp *.service /etc/systemd/system/ sudo systemctl enable scion.service sudo systemctl enable scion-viz.service Conclusion These steps should be sufficient to make SCION run on your system boot. Reboot the system and verify that everything works as expected.","title":"Running SCION on system boot"},{"location":"scion_tricks/setup_startup/#run-scion-and-scion-viz-automatically-on-boot","text":"","title":"Run SCION and SCION-viz automatically on boot"},{"location":"scion_tricks/setup_startup/#prerequisites","text":"It is necessary to have SCION successfully installed on your system before proceeding with this tutorial. Necessary steps for installing SCION can be found on following pages: Installing SCION on Ubuntu x86-64 Installing SCION on Raspberry PI Ubuntu Tip If you are using SCION VM, SCION is already running on system boot so following steps are not required to be done manually.","title":"Prerequisites"},{"location":"scion_tricks/setup_startup/#installation","text":"We will create systemd service that will be configured to run SCION infrastructure on system boot.","title":"Installation"},{"location":"scion_tricks/setup_startup/#step-one-get-template-service-files","text":"To avoid creating service files from scratch, we can download templates from SCION Lab repository and customize them for current system. Downloaded template files have value _USER_ instead of real system user so we will have to adjust it. Complete process can be finished with following commands: mkdir -p /tmp/scion_services cd /tmp/scion_services wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion.service wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/vagrant/scion-viz.service sed -i s/_USER_/$USER/g *.service","title":"Step One - Get template service files"},{"location":"scion_tricks/setup_startup/#step-two-register-services-with-systemd","text":"We need to copy newly created services to systemd directory and enable them. This can be done with following commands: sudo cp *.service /etc/systemd/system/ sudo systemctl enable scion.service sudo systemctl enable scion-viz.service","title":"Step Two - Register services with systemd"},{"location":"scion_tricks/setup_startup/#conclusion","text":"These steps should be sufficient to make SCION run on your system boot. Reboot the system and verify that everything works as expected.","title":"Conclusion"},{"location":"scion_tricks/updating_scion/","text":"Updating SCION to newest version Introduction Our implementation of SCION is still under development, and ScionLab sometimes upgrades the services to use new features from new versions. Some of these changes will break compatibility with past releases. In these cases, we will send an email notifying all the users of such changes. Note There is important information at the last section of this page regarding the change of addresses in SCIONLab. If you are running a dedicated machine, you probably want to read it. Running SCION in a VM If you run SCION inside a VM, SCION should be kept up to date automatically. With this automatic process you don't have to worry about the updates. Still, if you are interested in knowing how we do it, read the next subsection. How is my SCION VM kept up to date? You can always check that is the case by listing the running timers and looking for the one upgrading SCION: sudo systemctl list-timers NEXT LEFT LAST PASSED UNIT ACTIVATES Wed 2018-04-18 16:35:24 UTC 8min left Wed 2018-04-18 16:25:23 UTC 1min 36s ago scionupgrade.timer scionupgrade.service This indicates we have the upgrade service installed. The upgrade service is checking every day that the local git repository is up to date with the scionlab branch. This is done by rebasing the local copy on top of the branch: cd $SC git fetch origin scionlab git rebase origin/scionlab We do this to maximize the chances of successfully updating even if you had local changes done on top. The automatic process will restart SCION if it detected that we downloaded a new version. Running SCION in a dedicated machine This type of installations need manual update. If you received an email from us saying that we are going to update the infrastructure, and that the update contains breaking changes , you will need to follow these steps if you want to continue using SCION in ScionLab. Manual steps to update We can do manually what we automatically do inside the SCION VMs, and these simple steps will update your installation of SCION. As our SCION implementation is hosted on git, updating to the latest version is as simple as pull -ing changes or rebase -ing. To download the newest version first navigate to SCION root directory: cd $SC then fetch newest changes from remote scionlab branch and rebase: git fetch origin scionlab git rebase origin/scionlab ARM devices If this is an ARM devices and we have the sources previously patched (probably they are if this is ARM), we will need to apply another patch as explained in Installing SCION on Ubuntu MATE 16.04 - Raspberry PI curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/421d8bfecdd225a3b17a18ec1c1e1bf86c436b35/arm-scionlab-update2.patch | patch -p1 You may find some some output informing that some hunks failed to patch. This is typically okay, as it represents portions of code that we had patched before the update and don't need to be patched again. As an example of such output we have: patching file c/dispatcher/dispatcher.c Hunk #1 FAILED at 837. 1 out of 1 hunk FAILED -- saving rejects to file c/dispatcher/dispatcher.c.rej patching file c/lib/scion/address.h patching file c/lib/scion/checksum_bench.c Hunk #1 FAILED at 40. Hunk #2 FAILED at 57. 2 out of 2 hunks FAILED -- saving rejects to file c/lib/scion/checksum_bench.c.rej If the patch fails to apply, ensure you check out a clean version of the scionlab branch and patch from there. Rebuild SCION If git reports that new modifications were downloaded when we rebased, it is necessary to restart scion infrastructure: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh clean mv ./go/vendor/vendor.json /tmp/ rm -r ./go/vendor/* mv /tmp/vendor.json ./go/vendor/ ./env/deps ./scion.sh build Your SCION installation should be now up to date. Once SCION is built without problems, we can start the AS services again: ./scion.sh start if running services fails If building SCION succeeded but running the services did not, there might be a misconfiguration in the gen folder. If this was a manual update to support the SCIONLab update done in the summer of 2018, you will probably need to remap the identity of your AS; please keep reading to learn how to do that manually. And the SCION services will start running. Last step to finish the update After the update, the applications that are not delivered directly with SCION (e.g. bwtester or your own applications) will need to be rebuilt. You will have to follow the appropriate steps for each one of them reading their own documentation. E.g. bwtester has its own tutorial on how to build it. There has been an important update in SCIONLab during the Summer of 2018. All the SCION addresses will be allocated in the segment ffaa:0:0/24 to accommodate a larger number of ASes than originally expected. The representation of the addresses has also changed, following the standard convention now. Details on https://github.com/scionproto/scion/wiki/ISD-and-AS-numbering . To update manually your dedicated system, you would get the remap script and run it: cd /tmp wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scripts/remap_as_identity.sh bash remap_as_identity.sh This will complete the AS ID remapping step securely, which is necessary for the AS to work again. The remapping ensures your AS is requesting it by verifying data signed with the AS certificate. This step should reconfigure your AS in the Coordinator and return a gen configuration. OpenVPN If your AS was using openvpn the Coordinator should give you exactly the same IP address as the one you have running in your tunnel interface; but, if you encounter any problem regarding the border router failing to bind to a different IP address, re-download the configuration from the Coordinator and replace the openvpn /etc/openvpn/client.conf file with that one inside the downloaded configuration. This will ensure that the IP you obtain at the openvpn tunnel corresponds to that of the topology.json file. If you experience a problem with the update, please contact us in the community mailing list. Visit the SCION Community for more details.","title":"Updating SCION"},{"location":"scion_tricks/updating_scion/#updating-scion-to-newest-version","text":"","title":"Updating SCION to newest version"},{"location":"scion_tricks/updating_scion/#introduction","text":"Our implementation of SCION is still under development, and ScionLab sometimes upgrades the services to use new features from new versions. Some of these changes will break compatibility with past releases. In these cases, we will send an email notifying all the users of such changes. Note There is important information at the last section of this page regarding the change of addresses in SCIONLab. If you are running a dedicated machine, you probably want to read it.","title":"Introduction"},{"location":"scion_tricks/updating_scion/#running-scion-in-a-vm","text":"If you run SCION inside a VM, SCION should be kept up to date automatically. With this automatic process you don't have to worry about the updates. Still, if you are interested in knowing how we do it, read the next subsection.","title":"Running SCION in a VM"},{"location":"scion_tricks/updating_scion/#how-is-my-scion-vm-kept-up-to-date","text":"You can always check that is the case by listing the running timers and looking for the one upgrading SCION: sudo systemctl list-timers NEXT LEFT LAST PASSED UNIT ACTIVATES Wed 2018-04-18 16:35:24 UTC 8min left Wed 2018-04-18 16:25:23 UTC 1min 36s ago scionupgrade.timer scionupgrade.service This indicates we have the upgrade service installed. The upgrade service is checking every day that the local git repository is up to date with the scionlab branch. This is done by rebasing the local copy on top of the branch: cd $SC git fetch origin scionlab git rebase origin/scionlab We do this to maximize the chances of successfully updating even if you had local changes done on top. The automatic process will restart SCION if it detected that we downloaded a new version.","title":"How is my SCION VM kept up to date?"},{"location":"scion_tricks/updating_scion/#running-scion-in-a-dedicated-machine","text":"This type of installations need manual update. If you received an email from us saying that we are going to update the infrastructure, and that the update contains breaking changes , you will need to follow these steps if you want to continue using SCION in ScionLab.","title":"Running SCION in a dedicated machine"},{"location":"scion_tricks/updating_scion/#manual-steps-to-update","text":"We can do manually what we automatically do inside the SCION VMs, and these simple steps will update your installation of SCION. As our SCION implementation is hosted on git, updating to the latest version is as simple as pull -ing changes or rebase -ing. To download the newest version first navigate to SCION root directory: cd $SC then fetch newest changes from remote scionlab branch and rebase: git fetch origin scionlab git rebase origin/scionlab","title":"Manual steps to update"},{"location":"scion_tricks/updating_scion/#arm-devices","text":"If this is an ARM devices and we have the sources previously patched (probably they are if this is ARM), we will need to apply another patch as explained in Installing SCION on Ubuntu MATE 16.04 - Raspberry PI curl https://gist.githubusercontent.com/juagargi/f007a3a80058895d81a72651af32cb44/raw/421d8bfecdd225a3b17a18ec1c1e1bf86c436b35/arm-scionlab-update2.patch | patch -p1 You may find some some output informing that some hunks failed to patch. This is typically okay, as it represents portions of code that we had patched before the update and don't need to be patched again. As an example of such output we have: patching file c/dispatcher/dispatcher.c Hunk #1 FAILED at 837. 1 out of 1 hunk FAILED -- saving rejects to file c/dispatcher/dispatcher.c.rej patching file c/lib/scion/address.h patching file c/lib/scion/checksum_bench.c Hunk #1 FAILED at 40. Hunk #2 FAILED at 57. 2 out of 2 hunks FAILED -- saving rejects to file c/lib/scion/checksum_bench.c.rej If the patch fails to apply, ensure you check out a clean version of the scionlab branch and patch from there.","title":"ARM devices"},{"location":"scion_tricks/updating_scion/#rebuild-scion","text":"If git reports that new modifications were downloaded when we rebased, it is necessary to restart scion infrastructure: ./scion.sh stop ~/.local/bin/supervisorctl -c supervisor/supervisord.conf shutdown ./scion.sh clean mv ./go/vendor/vendor.json /tmp/ rm -r ./go/vendor/* mv /tmp/vendor.json ./go/vendor/ ./env/deps ./scion.sh build Your SCION installation should be now up to date. Once SCION is built without problems, we can start the AS services again: ./scion.sh start if running services fails If building SCION succeeded but running the services did not, there might be a misconfiguration in the gen folder. If this was a manual update to support the SCIONLab update done in the summer of 2018, you will probably need to remap the identity of your AS; please keep reading to learn how to do that manually. And the SCION services will start running.","title":"Rebuild SCION"},{"location":"scion_tricks/updating_scion/#last-step-to-finish-the-update","text":"After the update, the applications that are not delivered directly with SCION (e.g. bwtester or your own applications) will need to be rebuilt. You will have to follow the appropriate steps for each one of them reading their own documentation. E.g. bwtester has its own tutorial on how to build it. There has been an important update in SCIONLab during the Summer of 2018. All the SCION addresses will be allocated in the segment ffaa:0:0/24 to accommodate a larger number of ASes than originally expected. The representation of the addresses has also changed, following the standard convention now. Details on https://github.com/scionproto/scion/wiki/ISD-and-AS-numbering . To update manually your dedicated system, you would get the remap script and run it: cd /tmp wget https://raw.githubusercontent.com/netsec-ethz/scion-coord/master/scripts/remap_as_identity.sh bash remap_as_identity.sh This will complete the AS ID remapping step securely, which is necessary for the AS to work again. The remapping ensures your AS is requesting it by verifying data signed with the AS certificate. This step should reconfigure your AS in the Coordinator and return a gen configuration. OpenVPN If your AS was using openvpn the Coordinator should give you exactly the same IP address as the one you have running in your tunnel interface; but, if you encounter any problem regarding the border router failing to bind to a different IP address, re-download the configuration from the Coordinator and replace the openvpn /etc/openvpn/client.conf file with that one inside the downloaded configuration. This will ensure that the IP you obtain at the openvpn tunnel corresponds to that of the topology.json file. If you experience a problem with the update, please contact us in the community mailing list. Visit the SCION Community for more details.","title":"Last step to finish the update"},{"location":"scion_tricks/wireshark/","text":"Adding Wireshark and Tshark SCION protocol dissector Introduction In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging of SCION protocol. You can read more on what protocol dissector does on Wireshark docs Prerequisites In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system. Tip Running Wireshark is recommended on machines with graphical interface. Install Wireshark In order to install Wireshark, follow installation guide on Wireshark website for your platform. Alternatively on Ubuntu system you can run following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark Install Tshark In case you want to install Tshark on Ubuntu simply run: sudo apt install tshark Step One - Finding plugin directory We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there. Wireshark From Help menu select About Wireshark and in newly opened window select Folders tab. There are paths to global and local plugin directory. In this tutorial we will use global plugin directory which is usually: /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6 Plugins from global plugin directory are available to all users, while local is only for currently running user. Tshark In order to find the directory where Tshark is loading plugins from we can run following command: tshark -G plugins Output will look something like this: opcua.so 1.1.0 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so irda.so 0.0.6 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so mate.so 1.0.0a dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so ... Examining output we can conclude that plugins are being loaded from /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ So we will use that for our plugin directory. Step Two - Adding plugin Wireshark/Tshark plugin is located in SCION project at tools/wireshark/scion.lua . It is necessary to download scion.lua file and place it in plugin directory acquired in previous step. In Ubuntu system this can be done with following command: sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua","title":"Adding Wireshark dissector"},{"location":"scion_tricks/wireshark/#adding-wireshark-and-tshark-scion-protocol-dissector","text":"","title":"Adding Wireshark and Tshark SCION protocol dissector"},{"location":"scion_tricks/wireshark/#introduction","text":"In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging of SCION protocol. You can read more on what protocol dissector does on Wireshark docs","title":"Introduction"},{"location":"scion_tricks/wireshark/#prerequisites","text":"In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system. Tip Running Wireshark is recommended on machines with graphical interface.","title":"Prerequisites"},{"location":"scion_tricks/wireshark/#install-wireshark","text":"In order to install Wireshark, follow installation guide on Wireshark website for your platform. Alternatively on Ubuntu system you can run following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark","title":"Install Wireshark"},{"location":"scion_tricks/wireshark/#install-tshark","text":"In case you want to install Tshark on Ubuntu simply run: sudo apt install tshark","title":"Install Tshark"},{"location":"scion_tricks/wireshark/#step-one-finding-plugin-directory","text":"We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there.","title":"Step One - Finding plugin directory"},{"location":"scion_tricks/wireshark/#wireshark","text":"From Help menu select About Wireshark and in newly opened window select Folders tab. There are paths to global and local plugin directory. In this tutorial we will use global plugin directory which is usually: /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6 Plugins from global plugin directory are available to all users, while local is only for currently running user.","title":"Wireshark"},{"location":"scion_tricks/wireshark/#tshark","text":"In order to find the directory where Tshark is loading plugins from we can run following command: tshark -G plugins Output will look something like this: opcua.so 1.1.0 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so irda.so 0.0.6 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so mate.so 1.0.0a dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so ... Examining output we can conclude that plugins are being loaded from /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ So we will use that for our plugin directory.","title":"Tshark"},{"location":"scion_tricks/wireshark/#step-two-adding-plugin","text":"Wireshark/Tshark plugin is located in SCION project at tools/wireshark/scion.lua . It is necessary to download scion.lua file and place it in plugin directory acquired in previous step. In Ubuntu system this can be done with following command: sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua","title":"Step Two - Adding plugin"},{"location":"scionbox/scionbox/","text":"SCION Box Note The SCION box feature is currently not operational. Please come back later. Introduction This tutorial introduces you to SCION box, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request here in particular. Setting up the PCEngines device You received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface). You can then check on the scion-coordinator on your user page that you device status is online. Hint In case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface. The SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it. Make use of the device The SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the SCION book . In addition, SCION boxes also run ithe SCIONviz server which allows you to visualize the paths you AS knows about. You can connect to SCIONviz by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use SCIONviz, please see the SCIONviz tutorial (but make sure to use the address mentioned here). Setup an endhost and connect it via the SCION box Setup an endhost and configure it as described in Configuring SCION endhost topology . Then connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address. Next steps Check out the SCION code base and start contributing.","title":"SCION box first steps"},{"location":"scionbox/scionbox/#scion-box","text":"Note The SCION box feature is currently not operational. Please come back later.","title":"SCION Box"},{"location":"scionbox/scionbox/#introduction","text":"This tutorial introduces you to SCION box, shows you what you can do with a device connected to a SCION attachment point and with a PCEngines device you might request here in particular.","title":"Introduction"},{"location":"scionbox/scionbox/#setting-up-the-pcengines-device","text":"You received the preconfigured PCEngines device. In the best case, the setup is as single as connecting the device to a network with Internet connectivity via the labelled network interface (the one closest to the serial interface). You can then check on the scion-coordinator on your user page that you device status is online. Hint In case you local network implements MAC filtering, you need to request your network administrator to allow the PCEngines device to access the network. You will find the MAC address of the device on a sticker next to the network interface. The SCION boxes use OpenVPN to connect to SCION attachment points in case you selected this options. Hence OpenVPN needs to be able to make outgoing connections to its attachment point on port 1194. Since the exact address of the attachment point varies depending on your region and might change over time, please request assistance on the user group if you need it to whitelist it.","title":"Setting up the PCEngines device"},{"location":"scionbox/scionbox/#make-use-of-the-device","text":"The SCION is running a full AS connected to the SCIONLab infrastructure. This means the device is running the following services: a border router, a beacon server, a certificate server, a path server and a SIBRA server. You can read about the function of each service in the SCION book . In addition, SCION boxes also run ithe SCIONviz server which allows you to visualize the paths you AS knows about. You can connect to SCIONviz by connecting a regular IP device to one of the remaining interfaces. The open the webpage http://172.16.1.1:8000 and the SCIONviz will load. For instructions on how to use SCIONviz, please see the SCIONviz tutorial (but make sure to use the address mentioned here).","title":"Make use of the device"},{"location":"scionbox/scionbox/#setup-an-endhost-and-connect-it-via-the-scion-box","text":"Setup an endhost and configure it as described in Configuring SCION endhost topology . Then connect the machine to one of the secondary interfaces of you SCION box. Your devices will be allocated a local address.","title":"Setup an endhost and connect it via the SCION box"},{"location":"scionbox/scionbox/#next-steps","text":"Check out the SCION code base and start contributing.","title":"Next steps"},{"location":"virtual_machine_setup/dynamic_ip/","text":"Running SCION in a virtual machine VPN approach Introduction This tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to connect to the neighboring AS border router. Tip If you have a static public IP address and you can receive traffic on UDP port 50000, you could consider running the VM without VPN . In summary, the steps you will read about three installation steps, and how to log into your Virtual Machine: 1) Configure a Virtual Machine with SCION 2) Install VirtualBox and Vagrant 3) Run that Virtual Machine 4) Log into your Virtual Machine Tip Skip some steps: if your host machine is running MacOS or a Debian based Linux, you could do the first step, and then directly execute the run.sh script available within the configuration file you have downloaded from the SCIONLab Coordination Service . This run.sh script will download VirtualBox and Vagrant for you and install them (in Debian-Linux it uses apt-get and in MacOS, Homebrew ; you might be asked for your host machine user password when installing), and then it will run the Virtual Machine for you, effectively completing steps 2 and 3. But if something does not work with the script, you don't have the required OS, or you want to do it manually, you can also do all the steps without run.sh . Step One downloading a SCION VM In order to download a VM, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point, and choose Install inside a virtual machine . Choose Use an OpenVPN connection for this AS . Then download a VM configuration by clicking on Create and Download SCIONLab VM Configuration . A screenshot of the user interface is shown below: You have downloaded the configuration directory in the form of a compressed tar file ( tgz ). You will need to uncompress this folder. For this, create a directory that will host your SCIONLab content. For instance: mkdir ~/scionlab And move the contents to your SCIONLab directory, in the example: cd ~/scionlab mv ~/Download/scion_lab_my_filename.tar.gz . Next, extract the archive content. On a Linux system, simply running tar command will extract the contents: tar -xvzf scion_lab_my_filename.tar.gz Tip If you experience any issue while extracting or uncompressing the file, check if your browser has uncompress it for you by typing file scion_lab_*.t* If your downloader automatically uncompressed the downloaded file, the .gz extension is many times missing, or the type of the file not specifying compressed. You can extract the contents with: tar -xvf scion_lab_my_filename.tar After extraction, the extracted directory has the following structure: my_filename \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 AS1029 \u2502 \u2514 ... \u2502 \u251c\u2500\u2500 README \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion-viz.service \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 scionupgrade.service \u251c\u2500\u2500 scionupgrade.sh \u251c\u2500\u2500 scionupgrade.timer \u2514\u2500\u2500 Vagrantfile It is now when you can execute run.sh , as we have mentioned in the introduction, and skip the next two steps. Otherwise, keep on reading. Step Two Install VirtualBox and Vagrant You need to this only once in your host machine; if you have already done it, skip this step. Running SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system. Install VirtualBox To install VirtualBox, follow the steps on the VirtualBox download page for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager: sudo apt-get install virtualbox Install Vagrant To install Vagrant, follow the steps on the Vagrant download page for your system. Also, on Ubuntu you could install it via your package manager: sudo apt-get install vagrant Step Three run the Virtual Machine Verifying the structure, you can begin the setup by running: cd my_filename vagrant box add scion/ubuntu-16.04-64-scion vagrant box update vagrant up The installation process will take around 10 minutes. Wait, what has just happened? If you are interested, this is exactly what those steps are doing: vagrant box add scion/ubuntu-16.04-64-scion will add the base SCION box to your filesystem. You only need to do this once, as the same base box is used for all SCION Virtual Machines. vagrant box update will ensure that the base box is the latest one. You would run this every time you want to install a new VM, but it is not necessary to do it if you only want to use one of your already installed Virtual Machines. vagrant up will run the Virtual Machine. You need to do this every time you install a new Virtual Machine, or if you stop your host machine. This, essentially, is booting up the Virtual Machine, and installing it if it was the first time. If you want to stop your Virtual Machine, you will run vagrant halt . Then, to boot it up again, vagrant up . These two commands stop and start the Virtual Machine. Warning If for whatever reason you want to completely destroy and remove your existing Virtual Machine, you would run vagrant destroy . Be careful, as you would remove everything that was inside that Virtual Machine. Step Four Use the SCION Virtual Machine After successful installation of the VM, you can ssh into your VM: vagrant ssh The SCION infrastructure is automatically started at boot time of your VM. You can control it using the scion.sh script located at ~/go/src/github.com/scionproto/scion/ . You can easily get to that directory with cd $SC . To shut the system down, you can type sudo shutdown now inside the VM, or vagrant halt in the host terminal. After the installation, to start the VM, you can use vagrant up , followed by vagrant ssh to start a VM shell. Almost Done: Validate and More After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Virtual machine with VPN"},{"location":"virtual_machine_setup/dynamic_ip/#running-scion-in-a-virtual-machine-vpn-approach","text":"","title":"Running SCION in a virtual machine &ndash; VPN approach"},{"location":"virtual_machine_setup/dynamic_ip/#introduction","text":"This tutorial will guide you through the steps required to run the SCION infrastructure in a virtual machine. This tutorial assumes that you don't have a static public IP address or cannot receive traffic on UDP port 50000 from the outside network, and therefore it will use OpenVPN to connect to the neighboring AS border router. Tip If you have a static public IP address and you can receive traffic on UDP port 50000, you could consider running the VM without VPN . In summary, the steps you will read about three installation steps, and how to log into your Virtual Machine: 1) Configure a Virtual Machine with SCION 2) Install VirtualBox and Vagrant 3) Run that Virtual Machine 4) Log into your Virtual Machine Tip Skip some steps: if your host machine is running MacOS or a Debian based Linux, you could do the first step, and then directly execute the run.sh script available within the configuration file you have downloaded from the SCIONLab Coordination Service . This run.sh script will download VirtualBox and Vagrant for you and install them (in Debian-Linux it uses apt-get and in MacOS, Homebrew ; you might be asked for your host machine user password when installing), and then it will run the Virtual Machine for you, effectively completing steps 2 and 3. But if something does not work with the script, you don't have the required OS, or you want to do it manually, you can also do all the steps without run.sh .","title":"Introduction"},{"location":"virtual_machine_setup/dynamic_ip/#step-one-downloading-a-scion-vm","text":"In order to download a VM, you must login to SCIONLab Coordination Service . In case you don't have an account yet, follow the registration process. After logging in, create a new AS by clicking on Generate a new SCIONLab AS , select a desired attachment point, and choose Install inside a virtual machine . Choose Use an OpenVPN connection for this AS . Then download a VM configuration by clicking on Create and Download SCIONLab VM Configuration . A screenshot of the user interface is shown below: You have downloaded the configuration directory in the form of a compressed tar file ( tgz ). You will need to uncompress this folder. For this, create a directory that will host your SCIONLab content. For instance: mkdir ~/scionlab And move the contents to your SCIONLab directory, in the example: cd ~/scionlab mv ~/Download/scion_lab_my_filename.tar.gz . Next, extract the archive content. On a Linux system, simply running tar command will extract the contents: tar -xvzf scion_lab_my_filename.tar.gz Tip If you experience any issue while extracting or uncompressing the file, check if your browser has uncompress it for you by typing file scion_lab_*.t* If your downloader automatically uncompressed the downloaded file, the .gz extension is many times missing, or the type of the file not specifying compressed. You can extract the contents with: tar -xvf scion_lab_my_filename.tar After extraction, the extracted directory has the following structure: my_filename \u251c\u2500\u2500 client.conf \u251c\u2500\u2500 gen \u2502 \u251c\u2500\u2500 dispatcher \u2502 \u2502 \u251c\u2500\u2500 dispatcher.zlog.conf \u2502 \u2502 \u2514\u2500\u2500 supervisord.conf \u2502 \u2514\u2500\u2500 ISD1 \u2502 \u2514\u2500\u2500 AS1029 \u2502 \u2514 ... \u2502 \u251c\u2500\u2500 README \u251c\u2500\u2500 run.sh \u251c\u2500\u2500 scion-viz.service \u251c\u2500\u2500 scion.service \u251c\u2500\u2500 scionupgrade.service \u251c\u2500\u2500 scionupgrade.sh \u251c\u2500\u2500 scionupgrade.timer \u2514\u2500\u2500 Vagrantfile It is now when you can execute run.sh , as we have mentioned in the introduction, and skip the next two steps. Otherwise, keep on reading.","title":"Step One &ndash; downloading a SCION VM"},{"location":"virtual_machine_setup/dynamic_ip/#step-two-install-virtualbox-and-vagrant","text":"You need to this only once in your host machine; if you have already done it, skip this step. Running SCION in a virtual machine requires VirtualBox and Vagrant to be installed on your system.","title":"Step Two &ndash; Install VirtualBox and Vagrant"},{"location":"virtual_machine_setup/dynamic_ip/#install-virtualbox","text":"To install VirtualBox, follow the steps on the VirtualBox download page for your system. On Ubuntu or similar Linux distributions, you could also install VirtualBox using your package manager: sudo apt-get install virtualbox","title":"Install VirtualBox"},{"location":"virtual_machine_setup/dynamic_ip/#install-vagrant","text":"To install Vagrant, follow the steps on the Vagrant download page for your system. Also, on Ubuntu you could install it via your package manager: sudo apt-get install vagrant","title":"Install Vagrant"},{"location":"virtual_machine_setup/dynamic_ip/#step-three-run-the-virtual-machine","text":"Verifying the structure, you can begin the setup by running: cd my_filename vagrant box add scion/ubuntu-16.04-64-scion vagrant box update vagrant up The installation process will take around 10 minutes.","title":"Step Three &ndash; run the Virtual Machine"},{"location":"virtual_machine_setup/dynamic_ip/#wait-what-has-just-happened","text":"If you are interested, this is exactly what those steps are doing: vagrant box add scion/ubuntu-16.04-64-scion will add the base SCION box to your filesystem. You only need to do this once, as the same base box is used for all SCION Virtual Machines. vagrant box update will ensure that the base box is the latest one. You would run this every time you want to install a new VM, but it is not necessary to do it if you only want to use one of your already installed Virtual Machines. vagrant up will run the Virtual Machine. You need to do this every time you install a new Virtual Machine, or if you stop your host machine. This, essentially, is booting up the Virtual Machine, and installing it if it was the first time. If you want to stop your Virtual Machine, you will run vagrant halt . Then, to boot it up again, vagrant up . These two commands stop and start the Virtual Machine. Warning If for whatever reason you want to completely destroy and remove your existing Virtual Machine, you would run vagrant destroy . Be careful, as you would remove everything that was inside that Virtual Machine.","title":"Wait, what has just happened?"},{"location":"virtual_machine_setup/dynamic_ip/#step-four-use-the-scion-virtual-machine","text":"After successful installation of the VM, you can ssh into your VM: vagrant ssh The SCION infrastructure is automatically started at boot time of your VM. You can control it using the scion.sh script located at ~/go/src/github.com/scionproto/scion/ . You can easily get to that directory with cd $SC . To shut the system down, you can type sudo shutdown now inside the VM, or vagrant halt in the host terminal. After the installation, to start the VM, you can use vagrant up , followed by vagrant ssh to start a VM shell.","title":"Step Four &ndash; Use the SCION Virtual Machine"},{"location":"virtual_machine_setup/dynamic_ip/#almost-done-validate-and-more","text":"After running SCION infrastructure it is necessary to verify that it is running properly. This is covered in tutorial Verifying SCION Installation . When the infrastructure is properly running, you have established your SCION AS, congratulations! You can now follow the tutorials listed on the main page under \"Using SCION in projects\".","title":"Almost Done: Validate and More"},{"location":"virtual_machine_setup/static_ip/","text":"Running SCION in a virtual machine static public IP address Warning If you do not have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead connect to the SCION network via VPN . Simply follow all the steps under Prerequisites in the tutorial for a VPN-based setup until the end of Step One download a SCION VM . There, instead of directly clicking on Create and Download SCIONLab VM Configuration , unselect Use an OpenVPN connection for this AS and and enter your host's public IP address in the input field. Afterwards, follow all subsequent steps in the tutorial for a VPN-based setup . Troubleshooting Make sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running. If you have tshark installed, you can verify the arrival of the SCION beacon messages from the neighboring border router with tshark udp and port 50000 .","title":"Virtual machine with static public IP"},{"location":"virtual_machine_setup/static_ip/#running-scion-in-a-virtual-machine-static-public-ip-address","text":"Warning If you do not have a static public IP address or you cannot receive traffic on UDP port 50000, you should instead connect to the SCION network via VPN . Simply follow all the steps under Prerequisites in the tutorial for a VPN-based setup until the end of Step One download a SCION VM . There, instead of directly clicking on Create and Download SCIONLab VM Configuration , unselect Use an OpenVPN connection for this AS and and enter your host's public IP address in the input field. Afterwards, follow all subsequent steps in the tutorial for a VPN-based setup . Troubleshooting Make sure that your router properly forwards UDP port 50000 to the machine where the SCION VM is running. If you have tshark installed, you can verify the arrival of the SCION beacon messages from the neighboring border router with tshark udp and port 50000 .","title":"Running SCION in a virtual machine &ndash; static public IP address"}]}