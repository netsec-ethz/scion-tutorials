{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SCION Tutorials This website provides step-by-step instructions on how to run a SCION autonomous system (AS) in SCIONLab . It also provides a list of interesting projects that are using the SCION infrastructure for communication. Quick Start The following steps describe the quickest path to success to run a SCIONLab AS. For more detailed information, follow the instructions in the Installation and Configuration sections. Register on the SCIONLab coordination website Navigate to My ASes and click Create a new SCIONLab AS : Select any of the available attachment points; pick the closest one for shorter latency Enable Use VPN and select the installation type Run SCION in a Vagrant virtual machine Confirm by clicking Create AS Install Vagrant and VirtualBox Download the generated tarfile, extract the Vagrantfile and start the VM by executing vagrant up . Introduction A brief overview of SCION SCION ( S calability, CO ntrol and I solation on next-generation N etworks) is an inter-domain network architecture, designed to provide route control, failure isolation, and explicit trust information for end-to-end communication. SCION organizes ASes into groups of independent routing planes, called isolation domains (ISDs), which interconnect to provide global connectivity. Its path-aware architecture allows end hosts to learn about available network path segments, and combine them into end-to-end paths that are carried in packet headers. Furthermore, thanks to embedded cryptographic mechanisms, path construction is constrained to the route policies of ISPs and receivers, offering path choice to all the parties: senders, receivers, and ISPs. These features also enable multi-path communication , which is an important approach for: high availability , rapid failover in case of network failures, increased end-to-end bandwidth , dynamic traffic optimization , and DDoS attack resilience SCION is designed to interoperate with the existing networking infrastructure. Deployment of SCION can utilize existing internal routing and forwarding infrastructure of an AS, and only require installation or upgrade of a few border routers. A SCION-IP-Gateway (SIG) in the local infrastructure allows legacy end hosts and applications to be unaware of SCION. References SCION Architecture website Summary paper: The SCION Internet Architecture Book: SCION: A Secure Internet Architecture (Open Access PDF) Implementation: scionproto/scion on GitHub SCIONLab, the SCION testbed SCIONLab is a global research network to test and experiment with the SCION internet architecture. As a participant of SCIONLab, you will be able to create your own ASes that actively participate in the SCION inter-domain routing. Cool, but what is an AS? An autonomous system (AS) is a network under the control of a single administrative entity or domain. In SCION, ASes are connected only in well defined locations and links are defined by a provider/customer or a peering relation. Each AS is in charge of providing essential informations to the collection of devices connected to it, called end hosts (e.g Smartphones, Laptops and so on). The ASes in SCION are fundamental in the two main phases of the architecture: the control plane, which is the process responsible for discovering paths and making those paths available to end hosts; and the data plane, which is the process responsible for the transmission of the packets. For the control plane, each AS hosts different infrastructure services (beacon server, path server, certificate server and possibly others) that actually perform the process. For the data plane, the inter-AS traffic is routed through the SCION border routers of the ASes along a path. SCION is agnostic about the intra-AS routing, typically ASes run IP internally. What does it mean to run an AS? Running an AS means running the various AS control plane services and running border routers that connect the AS to other ASes. For the sake of simplicity, a SCIONLab AS network typically consists of only a single host, which is running both all control plane services, border routers and end host applications at the same time. Practically speaking your AS will be running on your own hardware, under your full control, and it is as simple as bringing up a Vagrant VM. What is an attachment point (AP)? As already mentioned, the infrastructure of SCIONLab comprises a network of globally connected ASes, and number of these are configured to act as \"Attachment Points\", and you can choose some as the uplink for your AS. The link between your AS and the attachment point AS is established as an overlay link over the legacy Internet. You can choose whether to instantiate this connection publicly (through a static public IP) or through a VPN offered by the Attachment Point itself (allowing also devices behind a NAT to act as AS). Whenever a change is made to the configuration of a SCIONLab AS, the configuration of the attachment point AS is automatically updated. What is the relation of SCIONLab and SCION? The SCIONLab website serves to simplify and coordinate the setup of experimental SCION ASes. SCIONLab is not connected to the production SCION network and all the SCIONLab ASes have AS-IDs specifically set aside for experimentation. In order to simplify the management of ASes and lower the entry-barrier for participation, the design of SCIONLab deliberately has some restrictions that are not present in the production deployment of SCION: SCIONLab centralizes management of the control plane public key infrastructure. In the real deployment of SCION, there is no such single point of failure. Overlay links over the publicly routed Internet are used both in the infrastructure and between the infrastructure and user-owned ASes. Therefore, the security, availability, and performance properties of SCION are not fully realized. Contact For questions on running your SCIONLab AS and general discussion about SCION-related topics, visit our SCION community mailing list For bug reports, please post them on the scionlab GitHub site For suggestion on these pages, please post them on the scion-tutorials GitHub site","title":"Home"},{"location":"#welcome-to-scion-tutorials","text":"This website provides step-by-step instructions on how to run a SCION autonomous system (AS) in SCIONLab . It also provides a list of interesting projects that are using the SCION infrastructure for communication.","title":"Welcome to SCION Tutorials"},{"location":"#quick-start","text":"The following steps describe the quickest path to success to run a SCIONLab AS. For more detailed information, follow the instructions in the Installation and Configuration sections. Register on the SCIONLab coordination website Navigate to My ASes and click Create a new SCIONLab AS : Select any of the available attachment points; pick the closest one for shorter latency Enable Use VPN and select the installation type Run SCION in a Vagrant virtual machine Confirm by clicking Create AS Install Vagrant and VirtualBox Download the generated tarfile, extract the Vagrantfile and start the VM by executing vagrant up .","title":"Quick Start"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#a-brief-overview-of-scion","text":"SCION ( S calability, CO ntrol and I solation on next-generation N etworks) is an inter-domain network architecture, designed to provide route control, failure isolation, and explicit trust information for end-to-end communication. SCION organizes ASes into groups of independent routing planes, called isolation domains (ISDs), which interconnect to provide global connectivity. Its path-aware architecture allows end hosts to learn about available network path segments, and combine them into end-to-end paths that are carried in packet headers. Furthermore, thanks to embedded cryptographic mechanisms, path construction is constrained to the route policies of ISPs and receivers, offering path choice to all the parties: senders, receivers, and ISPs. These features also enable multi-path communication , which is an important approach for: high availability , rapid failover in case of network failures, increased end-to-end bandwidth , dynamic traffic optimization , and DDoS attack resilience SCION is designed to interoperate with the existing networking infrastructure. Deployment of SCION can utilize existing internal routing and forwarding infrastructure of an AS, and only require installation or upgrade of a few border routers. A SCION-IP-Gateway (SIG) in the local infrastructure allows legacy end hosts and applications to be unaware of SCION.","title":"A brief overview of SCION"},{"location":"#references","text":"SCION Architecture website Summary paper: The SCION Internet Architecture Book: SCION: A Secure Internet Architecture (Open Access PDF) Implementation: scionproto/scion on GitHub","title":"References"},{"location":"#scionlab-the-scion-testbed","text":"SCIONLab is a global research network to test and experiment with the SCION internet architecture. As a participant of SCIONLab, you will be able to create your own ASes that actively participate in the SCION inter-domain routing.","title":"SCIONLab, the SCION testbed"},{"location":"#cool-but-what-is-an-as","text":"An autonomous system (AS) is a network under the control of a single administrative entity or domain. In SCION, ASes are connected only in well defined locations and links are defined by a provider/customer or a peering relation. Each AS is in charge of providing essential informations to the collection of devices connected to it, called end hosts (e.g Smartphones, Laptops and so on). The ASes in SCION are fundamental in the two main phases of the architecture: the control plane, which is the process responsible for discovering paths and making those paths available to end hosts; and the data plane, which is the process responsible for the transmission of the packets. For the control plane, each AS hosts different infrastructure services (beacon server, path server, certificate server and possibly others) that actually perform the process. For the data plane, the inter-AS traffic is routed through the SCION border routers of the ASes along a path. SCION is agnostic about the intra-AS routing, typically ASes run IP internally.","title":"Cool, but what is an AS?"},{"location":"#what-does-it-mean-to-run-an-as","text":"Running an AS means running the various AS control plane services and running border routers that connect the AS to other ASes. For the sake of simplicity, a SCIONLab AS network typically consists of only a single host, which is running both all control plane services, border routers and end host applications at the same time. Practically speaking your AS will be running on your own hardware, under your full control, and it is as simple as bringing up a Vagrant VM.","title":"What does it mean to run an AS?"},{"location":"#what-is-an-attachment-point-ap","text":"As already mentioned, the infrastructure of SCIONLab comprises a network of globally connected ASes, and number of these are configured to act as \"Attachment Points\", and you can choose some as the uplink for your AS. The link between your AS and the attachment point AS is established as an overlay link over the legacy Internet. You can choose whether to instantiate this connection publicly (through a static public IP) or through a VPN offered by the Attachment Point itself (allowing also devices behind a NAT to act as AS). Whenever a change is made to the configuration of a SCIONLab AS, the configuration of the attachment point AS is automatically updated.","title":"What is an attachment point (AP)?"},{"location":"#what-is-the-relation-of-scionlab-and-scion","text":"The SCIONLab website serves to simplify and coordinate the setup of experimental SCION ASes. SCIONLab is not connected to the production SCION network and all the SCIONLab ASes have AS-IDs specifically set aside for experimentation. In order to simplify the management of ASes and lower the entry-barrier for participation, the design of SCIONLab deliberately has some restrictions that are not present in the production deployment of SCION: SCIONLab centralizes management of the control plane public key infrastructure. In the real deployment of SCION, there is no such single point of failure. Overlay links over the publicly routed Internet are used both in the infrastructure and between the infrastructure and user-owned ASes. Therefore, the security, availability, and performance properties of SCION are not fully realized.","title":"What is the relation of SCIONLab and SCION?"},{"location":"#contact","text":"For questions on running your SCIONLab AS and general discussion about SCION-related topics, visit our SCION community mailing list For bug reports, please post them on the scionlab GitHub site For suggestion on these pages, please post them on the scion-tutorials GitHub site","title":"Contact"},{"location":"join_infrastructure/","text":"Join the SCIONLab Infrastructure If you are part of an organization and/or you are committed to do research with SCION, and using user ASes is not enough for your plans, then you could join SCIONLab with a dedicated host. We have compiled a short guide to document the requirements. You can join the SCIONLab network as an infrastructure AS with one or more machines, or you can start as small as dedicating only a simple commodity PC. Procedure Get in contact with us. Send us an email to telling us you want to join the infrastructure. Once the node(s) are ready, create a user with the name scionlab and permission to run sudo . Grant the SCIONLab admins ssh access to the machine via a key for that scionlab user. The SCIONLab admins will perform some measurements to find the appropriate neighbors to your AS. We will notify you of the result. Once the neighboring ASes have been decided, the administrators will install the necessary services of SCION and monitoring. This is typically done by us using Ansible . We deploy the configuration of the node(s) in the AS at the same time. Your AS is now connected to the infrastructure of SCIONLab and hosts within your network now have direct access to SCIONLab. Requirements There are a few requirements for you or your organization to join SCIONLab as an infrastructure node: Infrastructure ASes and nodes are required to be active 24 hours a day, 7 days a week. The SCIONLab administrators can typically handle all SCION related problems, but sometimes they will contact you if they cannot perform certain tasks. An example would be to change a drive if it failed, etc. The machine should have a minimum of 4 GB of RAM. A VM can suffice, given sufficient resources. Currently the SCION code works with Ubuntu 16.04. The border router node(s) must have a public static IP. The following ports need to be accessible: For each configured SCION inter-domain connection one UDP port for SCION inter-domain traffic, preferrably in the 50000~50010 range. Preferrably, these ports should be open for any source IP, as this simplifies changing the SCIONLab topology. However, we can provide the specific allowed source IP for each port if necessary. As the SCION border routers send a continuous trickle of keep-alive messages, it may be enough if a firewall allows return traffic to the same port. SSH access for management of the node by the SCIONLab-team: TCP 22: source 192.33.96.0/20, 192.33.88.0/21, 192.33.87.0/24, 54.176.0.0/12 As an alternative, we can also operate the connections over a tunnel, e.g. OpenVPN, Wireguard or SSH tunnels. Recommendations The following are not requirements, but recommendations: The border router should be near (latency wise) the IP border of your AS or organization. Co-locating the node or nodes in your datacenter is usually a good idea in terms of network latency. To join the SCION network, we have a specific hardware recommendation: HP Proliant DL20 gen9 . We further customize the machine with additional 8G ECC Ram and SSD, but a regular HDD also works. Instead of a blade type server machine, a regular PC with a similar spec works as well.","title":"Join the SCIONLab Infrastructure"},{"location":"join_infrastructure/#join-the-scionlab-infrastructure","text":"If you are part of an organization and/or you are committed to do research with SCION, and using user ASes is not enough for your plans, then you could join SCIONLab with a dedicated host. We have compiled a short guide to document the requirements. You can join the SCIONLab network as an infrastructure AS with one or more machines, or you can start as small as dedicating only a simple commodity PC.","title":"Join the SCIONLab Infrastructure"},{"location":"join_infrastructure/#procedure","text":"Get in contact with us. Send us an email to telling us you want to join the infrastructure. Once the node(s) are ready, create a user with the name scionlab and permission to run sudo . Grant the SCIONLab admins ssh access to the machine via a key for that scionlab user. The SCIONLab admins will perform some measurements to find the appropriate neighbors to your AS. We will notify you of the result. Once the neighboring ASes have been decided, the administrators will install the necessary services of SCION and monitoring. This is typically done by us using Ansible . We deploy the configuration of the node(s) in the AS at the same time. Your AS is now connected to the infrastructure of SCIONLab and hosts within your network now have direct access to SCIONLab.","title":"Procedure"},{"location":"join_infrastructure/#requirements","text":"There are a few requirements for you or your organization to join SCIONLab as an infrastructure node: Infrastructure ASes and nodes are required to be active 24 hours a day, 7 days a week. The SCIONLab administrators can typically handle all SCION related problems, but sometimes they will contact you if they cannot perform certain tasks. An example would be to change a drive if it failed, etc. The machine should have a minimum of 4 GB of RAM. A VM can suffice, given sufficient resources. Currently the SCION code works with Ubuntu 16.04. The border router node(s) must have a public static IP. The following ports need to be accessible: For each configured SCION inter-domain connection one UDP port for SCION inter-domain traffic, preferrably in the 50000~50010 range. Preferrably, these ports should be open for any source IP, as this simplifies changing the SCIONLab topology. However, we can provide the specific allowed source IP for each port if necessary. As the SCION border routers send a continuous trickle of keep-alive messages, it may be enough if a firewall allows return traffic to the same port. SSH access for management of the node by the SCIONLab-team: TCP 22: source 192.33.96.0/20, 192.33.88.0/21, 192.33.87.0/24, 54.176.0.0/12 As an alternative, we can also operate the connections over a tunnel, e.g. OpenVPN, Wireguard or SSH tunnels.","title":"Requirements"},{"location":"join_infrastructure/#recommendations","text":"The following are not requirements, but recommendations: The border router should be near (latency wise) the IP border of your AS or organization. Co-locating the node or nodes in your datacenter is usually a good idea in terms of network latency. To join the SCION network, we have a specific hardware recommendation: HP Proliant DL20 gen9 . We further customize the machine with additional 8G ECC Ram and SSD, but a regular HDD also works. Instead of a blade type server machine, a regular PC with a similar spec works as well.","title":"Recommendations"},{"location":"apps/access_camera/","text":"Access camera images over SCION network The camerapp application contains image fetcher and server applications which use the SCION network. Documentation on the code is available in the README.md . Packaged Setup We provide a camerapp Debian package to easily install and run camerapp in the SCIONLab environment. To install the camerapp package, run: sudo apt install scion-apps-camerapp See Installation for details. imagefetcher To use the image fetcher, you will need to specify the address of an image server. A sample image server that can be contacted by any client is set up at 17-ffaa:0:1102,[192.33.93.166]:42002 . Images can be fetched like this: scion-imagefetcher -c 17-ffaa:1:89,[127.0.0.1]:0 -s 17-ffaa:0:1102,[192.33.93.166]:42002 Here, -s specifies the image server whereas -c specifies your machine. The -c flag can be omitted if a SCION localhost address is configured. To do this, add your SCION host to the /etc/hosts file. Below you can see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 17-ffaa:0:1,[192.168.1.1] localhost Tip imagefetcher is also available via the webapp . imageserver The imageserver application keeps looking for .jpg files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used. The image server is launched as follows: scion-imageserver -s 17-ffaa:1:89,[127.0.0.1]:40002 Here -s specifies your server address. Again, it can be omitted by specifying a SCION localhost like above. The server then uses localhost to bind to. In this case, the port can be specified with the -p flag. scion-imageserver -p 40002","title":"Access camera images over SCION network"},{"location":"apps/access_camera/#access-camera-images-over-scion-network","text":"The camerapp application contains image fetcher and server applications which use the SCION network. Documentation on the code is available in the README.md .","title":"Access camera images over SCION network"},{"location":"apps/access_camera/#packaged-setup","text":"We provide a camerapp Debian package to easily install and run camerapp in the SCIONLab environment. To install the camerapp package, run: sudo apt install scion-apps-camerapp See Installation for details.","title":"Packaged Setup"},{"location":"apps/access_camera/#imagefetcher","text":"To use the image fetcher, you will need to specify the address of an image server. A sample image server that can be contacted by any client is set up at 17-ffaa:0:1102,[192.33.93.166]:42002 . Images can be fetched like this: scion-imagefetcher -c 17-ffaa:1:89,[127.0.0.1]:0 -s 17-ffaa:0:1102,[192.33.93.166]:42002 Here, -s specifies the image server whereas -c specifies your machine. The -c flag can be omitted if a SCION localhost address is configured. To do this, add your SCION host to the /etc/hosts file. Below you can see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 17-ffaa:0:1,[192.168.1.1] localhost Tip imagefetcher is also available via the webapp .","title":"imagefetcher"},{"location":"apps/access_camera/#imageserver","text":"The imageserver application keeps looking for .jpg files in the current directory, and offers them for download to clients on the SCION network. The assumption is that the application is used in conjunction with an application that periodically writes an image to the file system. After an amount of time (currently set to 10 minutes), the image files are deleted to limit the amount of storage used. The image server is launched as follows: scion-imageserver -s 17-ffaa:1:89,[127.0.0.1]:40002 Here -s specifies your server address. Again, it can be omitted by specifying a SCION localhost like above. The server then uses localhost to bind to. In this case, the port can be specified with the -p flag. scion-imageserver -p 40002","title":"imageserver"},{"location":"apps/bat/","text":"bat (\"cURL for SCION\") The bat application is a cURL-like tool for sending HTTP requests to SCION enabled webservers and retrieve information in a human-readable format. Documentation is available in the README.md . Install To install bat , run: sudo apt install scion-apps-bat See Installation for details. Usage The general usage of bat is: bat [flags] [Method] URL [Item] Flags Flag Meaning -l local bind address -b benchmarking mode -b.N number of benchmark requests to send (default 1000) -b.C number of parallel clients in benchmark (default 100) -body Send raw data as body -d download mode with progress bar -f send data application/x-www-form-urlencoded (default false) -j send data application/json encoded (default true) -p pretty print JSON responses (default true) -print A (all), H (request header), B (request body), h (response header), b (response body), any combination possible -v show version number Method The method can be any of the regular HTTP methods. It defaults to GET if there is no data to send and to POST otherwise. URL bat accepts both, SCION addresses and hostnames as URLs. Hostnames are resolved by scanning the /etc/hosts/ file. New hosts can be added by simply including a line in that file. Below you see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 18-ffaa:1:2,[10.0.8.10] localhost 17-ffaa:0:1,[192.168.1.1] host1 host2 20-ffaa:c0ff:ee12,[0:0:0ff1:ce00:dead:10cc:baad:f00d] host4 Consequently, these two calls are equivalent: scion-bat https://17-ffaa:0:1,[192.168.1.1]:8080/route scion-bat https://host1:8080/route If no SCION localhost is defined in the /etc/hosts file like above, the local address needs to be provided with the -l flag. E.g.: scion-bat -l 18-ffaa:1:2,[10.0.8.10]:0 https://host1:8080/route Note The scheme defaults to HTTPS, unencrypted HTTP is not supported Item Item key=value JSON/form-encoded key-value pair key:value custom header key=@/path/to/file send file content as value IO redirects ( , ) work as usual. Example servers Two example server applications can be found in scion-apps repository . Minimal starts a server which defines two routes: /download downloads a small HTML file from the server. /upload prints the form encoded content of the request body to the console. They show the basic GET and POST capabilities of bat. Image-server has a single route, /image which lets the user download an image from the server and save it to disk. This example shows the download capabilities of bat. To start any of the servers, run these commands in the respective folder: openssl req -x509 -newkey rsa:1024 -keyout key.pem -nodes -out cert.pem -days 365 -subj /CN=server server -local 17-ffaa:1:1,[10.0.0.15]:40002 -cert cert.pem -key key.pem Make sure you give your server a name (e.g. server) by adding a line to /etc/hosts . Then query it like so: For the minimal server: scion-bat server:40002/download It should produce output similar to this: scion-bat -f server:40002/upload foo=bar Which prints foo=bar in the server's console, and scion-bat -b server:40002/download which runs a benchmark, producing output like this: For the image server: scion-bat -d server:40002/image This places the downloaded image file in your current directory.","title":"bat (\"cURL for SCION\")"},{"location":"apps/bat/#bat-curl-for-scion","text":"The bat application is a cURL-like tool for sending HTTP requests to SCION enabled webservers and retrieve information in a human-readable format. Documentation is available in the README.md .","title":"bat (\"cURL for SCION\")"},{"location":"apps/bat/#install","text":"To install bat , run: sudo apt install scion-apps-bat See Installation for details.","title":"Install"},{"location":"apps/bat/#usage","text":"The general usage of bat is: bat [flags] [Method] URL [Item]","title":"Usage"},{"location":"apps/bat/#flags","text":"Flag Meaning -l local bind address -b benchmarking mode -b.N number of benchmark requests to send (default 1000) -b.C number of parallel clients in benchmark (default 100) -body Send raw data as body -d download mode with progress bar -f send data application/x-www-form-urlencoded (default false) -j send data application/json encoded (default true) -p pretty print JSON responses (default true) -print A (all), H (request header), B (request body), h (response header), b (response body), any combination possible -v show version number","title":"Flags"},{"location":"apps/bat/#method","text":"The method can be any of the regular HTTP methods. It defaults to GET if there is no data to send and to POST otherwise.","title":"Method"},{"location":"apps/bat/#url","text":"bat accepts both, SCION addresses and hostnames as URLs. Hostnames are resolved by scanning the /etc/hosts/ file. New hosts can be added by simply including a line in that file. Below you see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 18-ffaa:1:2,[10.0.8.10] localhost 17-ffaa:0:1,[192.168.1.1] host1 host2 20-ffaa:c0ff:ee12,[0:0:0ff1:ce00:dead:10cc:baad:f00d] host4 Consequently, these two calls are equivalent: scion-bat https://17-ffaa:0:1,[192.168.1.1]:8080/route scion-bat https://host1:8080/route If no SCION localhost is defined in the /etc/hosts file like above, the local address needs to be provided with the -l flag. E.g.: scion-bat -l 18-ffaa:1:2,[10.0.8.10]:0 https://host1:8080/route Note The scheme defaults to HTTPS, unencrypted HTTP is not supported","title":"URL"},{"location":"apps/bat/#item","text":"Item key=value JSON/form-encoded key-value pair key:value custom header key=@/path/to/file send file content as value IO redirects ( , ) work as usual.","title":"Item"},{"location":"apps/bat/#example-servers","text":"Two example server applications can be found in scion-apps repository . Minimal starts a server which defines two routes: /download downloads a small HTML file from the server. /upload prints the form encoded content of the request body to the console. They show the basic GET and POST capabilities of bat. Image-server has a single route, /image which lets the user download an image from the server and save it to disk. This example shows the download capabilities of bat. To start any of the servers, run these commands in the respective folder: openssl req -x509 -newkey rsa:1024 -keyout key.pem -nodes -out cert.pem -days 365 -subj /CN=server server -local 17-ffaa:1:1,[10.0.0.15]:40002 -cert cert.pem -key key.pem Make sure you give your server a name (e.g. server) by adding a line to /etc/hosts . Then query it like so: For the minimal server: scion-bat server:40002/download It should produce output similar to this: scion-bat -f server:40002/upload foo=bar Which prints foo=bar in the server's console, and scion-bat -b server:40002/download which runs a benchmark, producing output like this: For the image server: scion-bat -d server:40002/image This places the downloaded image file in your current directory.","title":"Example servers"},{"location":"apps/bwtester/","text":"Bandwidth Tester The bandwidth testing application bwtester enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester README . Install To install bwtestclient and bwtestserver , run: sudo apt install scion-apps-bwtester See Installation for details. bwtestclient Sample servers are installed at the following locations: 17-ffaa:0:1102,[192.33.93.177]:30100 17-ffaa:1:13,[192.168.1.79]:30100 17-ffaa:1:f,[10.0.2.15]:30100 19-ffaa:1:22,[141.44.25.146]:30100 And at the attachment points: 17-ffaa:0:1107,[10.0.8.1]:30100 18-ffaa:0:1202,[10.0.8.1]:30100 19-ffaa:0:1303,[10.0.8.1]:30100 20-ffaa:0:1404,[10.0.8.1]:30100 You can test the application as follows: scion-bwtestclient -c 17-ffaa:1:89,[127.0.0.1]:0 -s 17-ffaa:0:1102,[192.33.93.177]:30100 Here, -s specifies the bandwidth server whereas -c specifies your machine. The -c flag can be omitted if a SCION localhost address is configured. To do this, add your SCION host to the /etc/hosts file. Below you can see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 17-ffaa:0:1,[192.168.1.1] localhost Controlling the bandwidth The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), the total number of packets that will be sent, and the target bandwidth. For instance, 5,100,10,1600bps specifies that 10 packets of size 100 bytes will be sent over 5 seconds, resulting in a bandwidth of 1600bps. The question mark ? character can be used as wildcard for any of these parameters. Its value is then computed according to the other parameters. The parameters for the test in the client-to-server direction are specified with -cs , and the server-to-client direction with -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command: scion-bwtestclient -s 17-ffaa:0:1102,[192.33.93.177]:30100 -cs 10,1000,1250,1Mbps -sc 10,1000,12500,10Mbps For more information run the application without arguments to print its usage. Tip bwtestclient is also available via the webapp . bwtestserver The server is started as follows: scion-bwtestserver -s 17-ffaa:0:1102,[192.33.93.177]:30100 Here -s specifies your server address. Again, it can be omitted by specifying a SCION localhost like above. The server then uses localhost to bind to. In this case, the port can be specified with the -p flag. scion-bwtestserver -p 30100","title":"Bandwidth Tester"},{"location":"apps/bwtester/#bandwidth-tester","text":"The bandwidth testing application bwtester enables a variety of bandwidth tests on the SCION network. Installation and usage are described below. Documentation of the code and protocol are described in the bwtester README .","title":"Bandwidth Tester"},{"location":"apps/bwtester/#install","text":"To install bwtestclient and bwtestserver , run: sudo apt install scion-apps-bwtester See Installation for details.","title":"Install"},{"location":"apps/bwtester/#bwtestclient","text":"Sample servers are installed at the following locations: 17-ffaa:0:1102,[192.33.93.177]:30100 17-ffaa:1:13,[192.168.1.79]:30100 17-ffaa:1:f,[10.0.2.15]:30100 19-ffaa:1:22,[141.44.25.146]:30100 And at the attachment points: 17-ffaa:0:1107,[10.0.8.1]:30100 18-ffaa:0:1202,[10.0.8.1]:30100 19-ffaa:0:1303,[10.0.8.1]:30100 20-ffaa:0:1404,[10.0.8.1]:30100 You can test the application as follows: scion-bwtestclient -c 17-ffaa:1:89,[127.0.0.1]:0 -s 17-ffaa:0:1102,[192.33.93.177]:30100 Here, -s specifies the bandwidth server whereas -c specifies your machine. The -c flag can be omitted if a SCION localhost address is configured. To do this, add your SCION host to the /etc/hosts file. Below you can see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 17-ffaa:0:1,[192.168.1.1] localhost","title":"bwtestclient"},{"location":"apps/bwtester/#controlling-the-bandwidth","text":"The application supports specification of the test duration (up to 10 seconds), the packet size to be used (at least 4 bytes), the total number of packets that will be sent, and the target bandwidth. For instance, 5,100,10,1600bps specifies that 10 packets of size 100 bytes will be sent over 5 seconds, resulting in a bandwidth of 1600bps. The question mark ? character can be used as wildcard for any of these parameters. Its value is then computed according to the other parameters. The parameters for the test in the client-to-server direction are specified with -cs , and the server-to-client direction with -sc . So for instance to send 1 Mbps for 10 seconds from the client to the server, and 10 Mbps from the server to the client, you can use this command: scion-bwtestclient -s 17-ffaa:0:1102,[192.33.93.177]:30100 -cs 10,1000,1250,1Mbps -sc 10,1000,12500,10Mbps For more information run the application without arguments to print its usage. Tip bwtestclient is also available via the webapp .","title":"Controlling the bandwidth"},{"location":"apps/bwtester/#bwtestserver","text":"The server is started as follows: scion-bwtestserver -s 17-ffaa:0:1102,[192.33.93.177]:30100 Here -s specifies your server address. Again, it can be omitted by specifying a SCION localhost like above. The server then uses localhost to bind to. In this case, the port can be specified with the -p flag. scion-bwtestserver -p 30100","title":"bwtestserver"},{"location":"apps/fetch_sensor_readings/","text":"Sensor reading over SCION The sensorapp application contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple: It sends a single packet to request information and typically obtains a single packet containing the readings in response. Install To install sensorfetcher and sensorserver , run: sudo apt install scion-apps-sensorapp See Installation for details. sensorfetcher The sensorfetcher application sends a 0-length SCION UDP packet to the sensorserver application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try. Sample servers are at: 17-ffaa:0:1102,[192.33.93.177]:42003 17-ffaa:1:13,[192.168.1.79]:42003 Their readings can be fetched as follows: scion-sensorfetcher -c 17-ffaa:1:89,[127.0.0.1]:0 -s 17-ffaa:0:1102,[192.33.93.177]:42003 Here, -s specifies the sensor server whereas -c specifies your machine. The -c flag can be omitted if a SCION localhost address is configured. To do this, add your SCION host to the /etc/hosts file. Below you can see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 17-ffaa:0:1,[192.168.1.1] localhost sensorserver We use sensors from Tinkerforge, and the sensorreader Python application to fetch the sensor values and write them to stdout . The sensorserver application collects the readings and serves them as a string to client requests. To start, we use the following command: scion-sensorreader | scion-sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003 If you do not have any sensor information available, then you can use a simple time application that reports the current time on your system: scion-timereader | scion-sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003 In these examples, -s specifies your server address. Again, it can be omitted by specifying a SCION localhost like above. The server then uses localhost to bind to. In this case, the port can be specified with the -p flag. scion-sensorreader | scion-sensorserver -p 42003 scion-timereader | scion-sensorserver -p 42003","title":"Sensor reading over SCION"},{"location":"apps/fetch_sensor_readings/#sensor-reading-over-scion","text":"The sensorapp application contains fetcher and server applications for sensor readings, using the SCION network. The application is very simple: It sends a single packet to request information and typically obtains a single packet containing the readings in response.","title":"Sensor reading over SCION"},{"location":"apps/fetch_sensor_readings/#install","text":"To install sensorfetcher and sensorserver , run: sudo apt install scion-apps-sensorapp See Installation for details.","title":"Install"},{"location":"apps/fetch_sensor_readings/#sensorfetcher","text":"The sensorfetcher application sends a 0-length SCION UDP packet to the sensorserver application to fetch the sensor readings. A string is returned containing all the sensor readings. To keep the application as simple as possible, no reliability is built in -- in case of packet loss, the user needs to abort and re-try. Sample servers are at: 17-ffaa:0:1102,[192.33.93.177]:42003 17-ffaa:1:13,[192.168.1.79]:42003 Their readings can be fetched as follows: scion-sensorfetcher -c 17-ffaa:1:89,[127.0.0.1]:0 -s 17-ffaa:0:1102,[192.33.93.177]:42003 Here, -s specifies the sensor server whereas -c specifies your machine. The -c flag can be omitted if a SCION localhost address is configured. To do this, add your SCION host to the /etc/hosts file. Below you can see an example: # regular IPv4 hosts # .... # regular IPv6 hosts # .... # SCION hosts 17-ffaa:0:1,[192.168.1.1] localhost","title":"sensorfetcher"},{"location":"apps/fetch_sensor_readings/#sensorserver","text":"We use sensors from Tinkerforge, and the sensorreader Python application to fetch the sensor values and write them to stdout . The sensorserver application collects the readings and serves them as a string to client requests. To start, we use the following command: scion-sensorreader | scion-sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003 If you do not have any sensor information available, then you can use a simple time application that reports the current time on your system: scion-timereader | scion-sensorserver -s 17-ffaa:0:1102,[192.33.93.177]:42003 In these examples, -s specifies your server address. Again, it can be omitted by specifying a SCION localhost like above. The server then uses localhost to bind to. In this case, the port can be specified with the -p flag. scion-sensorreader | scion-sensorserver -p 42003 scion-timereader | scion-sensorserver -p 42003","title":"sensorserver"},{"location":"apps/rains/","text":"RAINS, Another Internet Naming Service Todo Update check RAINS is an alternate protocol for Internet name resolution, designed as a replacement of the Domain Name System (DNS) and is used in SCIONLab. Setup The following step assume that you are already running a SCION AS. Install the tool rdig, which allows you to make RAINS queries over SCION: go get github.com/netsec-ethz/rains/cmd/rdig Display the rdig help to learn about the parameters: rdig --help Add some convenience functions to your shell to facilitate using rains with the SCION tools until rains support gets integrated natively: echo mydig() { rdig @17-ffaa:0:1107,[192.33.93.195] $@ scionip4 -p 5025 | grep :A: | awk {print \\$6} | sed s/:scionip4:// ; } ~/.profile echo myHost() { echo `cat $SC/gen/ia | tr _ : `,[127.0.0.1]; } ~/.profile source ~/.profile Making queries To the resolver running in the Attachment Point: rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ns1 . snet . scionip4 - p 5025 To a rainsd server for the zone node.snet. : rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ap17 . node . snet . scionip4 - p 55553 Using scmp with rains $SC /bin/scmp echo -c 3 -local ` myHost ` -remote ` mydig ap17.node.snet. `","title":"RAINS, Another Internet Naming Service"},{"location":"apps/rains/#rains-another-internet-naming-service","text":"Todo Update check RAINS is an alternate protocol for Internet name resolution, designed as a replacement of the Domain Name System (DNS) and is used in SCIONLab.","title":"RAINS, Another Internet Naming Service"},{"location":"apps/rains/#setup","text":"The following step assume that you are already running a SCION AS. Install the tool rdig, which allows you to make RAINS queries over SCION: go get github.com/netsec-ethz/rains/cmd/rdig Display the rdig help to learn about the parameters: rdig --help Add some convenience functions to your shell to facilitate using rains with the SCION tools until rains support gets integrated natively: echo mydig() { rdig @17-ffaa:0:1107,[192.33.93.195] $@ scionip4 -p 5025 | grep :A: | awk {print \\$6} | sed s/:scionip4:// ; } ~/.profile echo myHost() { echo `cat $SC/gen/ia | tr _ : `,[127.0.0.1]; } ~/.profile source ~/.profile","title":"Setup"},{"location":"apps/rains/#making-queries","text":"To the resolver running in the Attachment Point: rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ns1 . snet . scionip4 - p 5025 To a rainsd server for the zone node.snet. : rdig @17 - ffaa : 0 : 1107 ,[ 192.33.93.195 ] ap17 . node . snet . scionip4 - p 55553","title":"Making queries"},{"location":"apps/rains/#using-scmp-with-rains","text":"$SC /bin/scmp echo -c 3 -local ` myHost ` -remote ` mydig ap17.node.snet. `","title":"Using scmp with rains"},{"location":"apps/remote_sig/","text":"SCION IP Gateway (SIG) Todo Update check The SCION IP Gateway SIG enables legacy IP applications to communicate over SCION. This tutorial describes how to set up two SIGs locally to test the SIG can enable any IP application to communicate over SCION. Environment To test the SIG we will make use of the Vagrant configurations provided on scionlab.org . Set up a Vagrant VM on a host A and a host B using the instructions from Virtual machine with VPN . Configuring the two SIGs We will now create the configuration for two SIG instances, one on the AS you started on host A AS A which we will call sigA and one on host B in AS B , which we will call sigB. Create the configuration directories for the SIGs, build the SIG binary and set the linux capabilities on the binary: export IA = $( cat $SC /gen/ia ) export IAd = $( cat $SC /gen/ia | sed s/_/\\:/g ) export AS = $( cat $SC /gen/ia | cut --fields = 2 --delimiter = - ) export ISD = $( cat $SC /gen/ia | cut --fields = 1 --delimiter = - ) mkdir -p ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/ go build -o ${ SC } /bin/sig ${ SC } /go/sig/main.go sudo setcap cap_net_admin+eip ${ SC } /bin/sig Enable routing: sudo sysctl net.ipv4.conf.default.rp_filter = 0 sudo sysctl net.ipv4.conf.all.rp_filter = 0 sudo sysctl net.ipv4.ip_forward = 1 Create the configuration for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.config: (You need to replace ${AS}, ${IA} and ${IAd} with the actual values on your system in these configuration files.) [sig] # ID of the SIG (required) ID = sigA # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 10.0.8.A # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10081 # Encapsulation data port. (default 10080) EncapPort = 10080 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigA # Id of the routing table (default 11) TunRTableId = 11 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 You can do so with the following command: sed -i s/\\${IA}/ ${ IA } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${IAd}/ ${ IAd } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${AS}/ ${ AS } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${ISD}/ ${ ISD } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config export tunIP = $( echo $( ip a | grep global tun ) | cut --fields = 2 --delimiter = | cut --fields = 1 --delimiter = / ) sed -i s/10.0.8.A/ ${ tunIP } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config Create the traffic rules for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json: { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.11.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10084, EncapPort : 10083 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host B and 17-ffaa:1:XXX with the AS id of the remote AS B. And similarly the configuration and traffic rules for the sigB: at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.config [sig] # ID of the SIG (required) ID = sigB # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 172.16.0.12 # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10084 # Encapsulation data port. (default 10080) EncapPort = 10083 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigB # Id of the routing table (default 11) TunRTableId = 12 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 and at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.12.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10081, EncapPort : 10080 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host A and 17-ffaa:1:XXX with the AS id of the remote AS A. Since we are running our SIGs in a VM and we do not have spare physical interfaces on which to run them, we will create two dummy interfaces: sudo modprobe dummy On host A: sudo ip link set name dummy11 dev dummy0 sudo ip addr add 172 .16.0.11/32 brd + dev dummy11 label dummy11:0 On host B: sudo ip link add dummy12 type dummy sudo ip addr add 172.16.0.12/32 brd + dev dummy12 label dummy12:0 Now we need to add the routing rules for the two SIGs: On host A: sudo ip rule add to 172 .16.12.0/24 lookup 11 prio 11 On host B: sudo ip rule add to 172 .16.11.0/24 lookup 12 prio 12 Now start the two SIGs with the following commands: On Host A: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config $SC /logs/sig ${ IA } -1.log 2 1 and Host B: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigB.config $SC /logs/sig ${ IA } -1.log 2 1 To show the ip rules and routes, run: sudo ip rule show sudo ip route show table 11 sudo ip route show table 12 Testing You can test that your SIG configuration works by running some traffic over it. Add some server on host A and client on host B: Host A: sudo ip link add server type dummy sudo ip addr add 172 .16.12.1/24 brd + dev server label server:0 mkdir $SC /WWW echo Hello World! $SC /WWW/hello.html cd $SC /WWW/ python3 -m http.server --bind 172 .16.12.1 8081 Host B: sudo ip link add client type dummy sudo ip addr add 172 .16.11.1/24 brd + dev client label client:0 Query the server running on host A from host B: Host B: curl --interface 172 .16.11.1 172 .16.12.1:8081/hello.html You should see the \"Hello World!\" message as output from the last command.","title":"SCION IP Gateway (SIG)"},{"location":"apps/remote_sig/#scion-ip-gateway-sig","text":"Todo Update check The SCION IP Gateway SIG enables legacy IP applications to communicate over SCION. This tutorial describes how to set up two SIGs locally to test the SIG can enable any IP application to communicate over SCION.","title":"SCION IP Gateway (SIG)"},{"location":"apps/remote_sig/#environment","text":"To test the SIG we will make use of the Vagrant configurations provided on scionlab.org . Set up a Vagrant VM on a host A and a host B using the instructions from Virtual machine with VPN .","title":"Environment"},{"location":"apps/remote_sig/#configuring-the-two-sigs","text":"We will now create the configuration for two SIG instances, one on the AS you started on host A AS A which we will call sigA and one on host B in AS B , which we will call sigB. Create the configuration directories for the SIGs, build the SIG binary and set the linux capabilities on the binary: export IA = $( cat $SC /gen/ia ) export IAd = $( cat $SC /gen/ia | sed s/_/\\:/g ) export AS = $( cat $SC /gen/ia | cut --fields = 2 --delimiter = - ) export ISD = $( cat $SC /gen/ia | cut --fields = 1 --delimiter = - ) mkdir -p ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/ go build -o ${ SC } /bin/sig ${ SC } /go/sig/main.go sudo setcap cap_net_admin+eip ${ SC } /bin/sig Enable routing: sudo sysctl net.ipv4.conf.default.rp_filter = 0 sudo sysctl net.ipv4.conf.all.rp_filter = 0 sudo sysctl net.ipv4.ip_forward = 1 Create the configuration for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.config: (You need to replace ${AS}, ${IA} and ${IAd} with the actual values on your system in these configuration files.) [sig] # ID of the SIG (required) ID = sigA # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 10.0.8.A # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10081 # Encapsulation data port. (default 10080) EncapPort = 10080 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigA # Id of the routing table (default 11) TunRTableId = 11 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 You can do so with the following command: sed -i s/\\${IA}/ ${ IA } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${IAd}/ ${ IAd } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${AS}/ ${ AS } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config sed -i s/\\${ISD}/ ${ ISD } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config export tunIP = $( echo $( ip a | grep global tun ) | cut --fields = 2 --delimiter = | cut --fields = 1 --delimiter = / ) sed -i s/10.0.8.A/ ${ tunIP } /g ${ SC } /gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config Create the traffic rules for the sigA at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigA.json: { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.11.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10084, EncapPort : 10083 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host B and 17-ffaa:1:XXX with the AS id of the remote AS B. And similarly the configuration and traffic rules for the sigB: at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.config [sig] # ID of the SIG (required) ID = sigB # The SIG config json file. (required) SIGConfig = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json # The local IA (required) IA = ${IAd} # The bind IP address (required) IP = 172.16.0.12 # Control data port, e.g. keepalives. (default 10081) CtrlPort = 10084 # Encapsulation data port. (default 10080) EncapPort = 10083 # SCION dispatcher path. (default ) Dispatcher = # Name of TUN device to create. (default DefaultTunName) Tun = sigB # Id of the routing table (default 11) TunRTableId = 12 [sd_client] # Sciond path. It defaults to sciond.DefaultSCIONDPath. Path = /run/shm/sciond/default.sock # Maximum time spent attempting to connect to sciond on start. (default 20s) InitialConnectPeriod = 20s [logging] [logging.file] # Location of the logging file. Path = /home/ubuntu/go/src/github.com/scionproto/scion/logs/sig${IA}-1.log # File logging level (trace|debug|info|warn|error|crit) (default debug) Level = debug # Max size of log file in MiB (default 50) # Size = 50 # Max age of log file in days (default 7) # MaxAge = 7 # How frequently to flush to the log file, in seconds. If 0, all messages # are immediately flushed. If negative, messages are never flushed # automatically. (default 5) FlushInterval = 5 [logging.console] # Console logging level (trace|debug|info|warn|error|crit) (default crit) Level = debug [metrics] # The address to export prometheus metrics on. (default 127.0.0.1:1281) Prometheus = 127.0.0.1:1282 and at ${SC}/gen/ISD${ISD}/AS${AS}/sig${IA}-1/sigB.json { ASes : { 17-ffaa:1:XXX : { Nets : [ 172.16.12.0/24 ], Sigs : { remote-1 : { Addr : 10.0.8.XXX , CtrlPort : 10081, EncapPort : 10080 } } } }, ConfigVersion : 9001 } You need to replace the \"10.0.8.XXX\" IP with the actual IP of the remote host A and 17-ffaa:1:XXX with the AS id of the remote AS A. Since we are running our SIGs in a VM and we do not have spare physical interfaces on which to run them, we will create two dummy interfaces: sudo modprobe dummy On host A: sudo ip link set name dummy11 dev dummy0 sudo ip addr add 172 .16.0.11/32 brd + dev dummy11 label dummy11:0 On host B: sudo ip link add dummy12 type dummy sudo ip addr add 172.16.0.12/32 brd + dev dummy12 label dummy12:0 Now we need to add the routing rules for the two SIGs: On host A: sudo ip rule add to 172 .16.12.0/24 lookup 11 prio 11 On host B: sudo ip rule add to 172 .16.11.0/24 lookup 12 prio 12 Now start the two SIGs with the following commands: On Host A: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigA.config $SC /logs/sig ${ IA } -1.log 2 1 and Host B: $SC /bin/sig -config = /home/ubuntu/go/src/github.com/scionproto/scion/gen/ISD ${ ISD } /AS ${ AS } /sig ${ IA } -1/sigB.config $SC /logs/sig ${ IA } -1.log 2 1 To show the ip rules and routes, run: sudo ip rule show sudo ip route show table 11 sudo ip route show table 12","title":"Configuring the two SIGs"},{"location":"apps/remote_sig/#testing","text":"You can test that your SIG configuration works by running some traffic over it. Add some server on host A and client on host B: Host A: sudo ip link add server type dummy sudo ip addr add 172 .16.12.1/24 brd + dev server label server:0 mkdir $SC /WWW echo Hello World! $SC /WWW/hello.html cd $SC /WWW/ python3 -m http.server --bind 172 .16.12.1 8081 Host B: sudo ip link add client type dummy sudo ip addr add 172 .16.11.1/24 brd + dev client label client:0 Query the server running on host A from host B: Host B: curl --interface 172 .16.11.1 172 .16.12.1:8081/hello.html You should see the \"Hello World!\" message as output from the last command.","title":"Testing"},{"location":"as_visualization/webapp/","text":"Webapp AS Visualization Webapp is a Go application that will serve up a static web portal to make it easy to visualize and experiment with SCIONLab test apps on a virtual machine. Packaged Setup/Run To install webapp , run: sudo apt install scion-apps-webapp See Installation for details. Start the webapp service: sudo systemctl start scion-webapp Ensure the webapp service is running: sudo systemctl status scion-webapp Now, open a web browser at http://127.0.0.1:8000 , to begin. Logs from webapp can be monitored: journalctl -u scion-webapp -e You won't need to add all the parameters yourself as the scion-webapp.service will do this for you, but as background information the service will run with the following command-line: scion-webapp \\ -a 0 .0.0.0 \\ -p 8000 \\ -r /var/lib/scion/webapp/web/data \\ -srvroot /var/lib/scion/webapp/web \\ -sabin /usr/bin/scion \\ -sroot /etc/scion \\ -sbin /usr/bin \\ -sgen /etc/scion/gen \\ -sgenc /var/lib/scion \\ -slogs /var/log/scion Browser AS Visualizations Several menu options are available at the top of each webapp page, which are outlined below. Each of the features below use your SCIONLab IA the the source address. Health The Health tab is the landing page for webapp that will automatically test your SCIONLab configuration for configuration and communication health. Additional help is available in our troubleshooting guide , if needed. Apps The Apps tab provides a portal to SCIONLab Apps, and uses your Source IA and a Destination IA you specify to test with. Some default Destination IAs are already provided for you, but you can always change them and click Update Paths . Paths The announced paths will be displayed in a combined topology in the window. To view the details of a specific path expand the path's data by clicking on the path number in the window on right side. You may also view a global map of selected paths by clicking the Map switch. Execute See the SCIONLab Apps Visualization page for details about running SCIONLab Apps. Files The Files menu on the page will allow you to navigate and serve any files on the SCIONLab node from the read-only (-r) directory you specified (if any) when starting scion-webapp . AS Topology The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router. Tip The big circle can be clicked on as well to view details of the Source AS. ISD TRC AS Certificate Related Links Webapp SCIONLab Apps Visualization Webapp Development Tips Verifying the installation","title":"Overview"},{"location":"as_visualization/webapp/#webapp-as-visualization","text":"Webapp is a Go application that will serve up a static web portal to make it easy to visualize and experiment with SCIONLab test apps on a virtual machine.","title":"Webapp AS Visualization"},{"location":"as_visualization/webapp/#packaged-setuprun","text":"To install webapp , run: sudo apt install scion-apps-webapp See Installation for details. Start the webapp service: sudo systemctl start scion-webapp Ensure the webapp service is running: sudo systemctl status scion-webapp Now, open a web browser at http://127.0.0.1:8000 , to begin. Logs from webapp can be monitored: journalctl -u scion-webapp -e You won't need to add all the parameters yourself as the scion-webapp.service will do this for you, but as background information the service will run with the following command-line: scion-webapp \\ -a 0 .0.0.0 \\ -p 8000 \\ -r /var/lib/scion/webapp/web/data \\ -srvroot /var/lib/scion/webapp/web \\ -sabin /usr/bin/scion \\ -sroot /etc/scion \\ -sbin /usr/bin \\ -sgen /etc/scion/gen \\ -sgenc /var/lib/scion \\ -slogs /var/log/scion","title":"Packaged Setup/Run"},{"location":"as_visualization/webapp/#browser-as-visualizations","text":"Several menu options are available at the top of each webapp page, which are outlined below. Each of the features below use your SCIONLab IA the the source address.","title":"Browser AS Visualizations"},{"location":"as_visualization/webapp/#health","text":"The Health tab is the landing page for webapp that will automatically test your SCIONLab configuration for configuration and communication health. Additional help is available in our troubleshooting guide , if needed.","title":"Health"},{"location":"as_visualization/webapp/#apps","text":"The Apps tab provides a portal to SCIONLab Apps, and uses your Source IA and a Destination IA you specify to test with. Some default Destination IAs are already provided for you, but you can always change them and click Update Paths .","title":"Apps"},{"location":"as_visualization/webapp/#paths","text":"The announced paths will be displayed in a combined topology in the window. To view the details of a specific path expand the path's data by clicking on the path number in the window on right side. You may also view a global map of selected paths by clicking the Map switch.","title":"Paths"},{"location":"as_visualization/webapp/#execute","text":"See the SCIONLab Apps Visualization page for details about running SCIONLab Apps.","title":"Execute"},{"location":"as_visualization/webapp/#files","text":"The Files menu on the page will allow you to navigate and serve any files on the SCIONLab node from the read-only (-r) directory you specified (if any) when starting scion-webapp .","title":"Files"},{"location":"as_visualization/webapp/#as-topology","text":"The composition of services and border routers for the Source AS will be displayed in the AS Topology tab. Click on any circle to view the details of that server or router. Tip The big circle can be clicked on as well to view details of the Source AS.","title":"AS Topology"},{"location":"as_visualization/webapp/#isd-trc","text":"","title":"ISD TRC"},{"location":"as_visualization/webapp/#as-certificate","text":"","title":"AS Certificate"},{"location":"as_visualization/webapp/#related-links","text":"Webapp SCIONLab Apps Visualization Webapp Development Tips Verifying the installation","title":"Related Links"},{"location":"as_visualization/webapp_apps/","text":"Webapp SCIONLab Apps Visualization Webapp Features This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Two functional server tests are included to test the networks without needing specific sensor or camera hardware, imagetest and statstest . Supported client applications include camerapp , sensorapp , and bwtester . For best results, ensure the desired server-side apps are running and connected to the SCION network first. Instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps. bwtester Simply adjust the dials to the desired level, while the icon lock will allow you to keep one value constant. camerapp The retrieved image will appear scaled down and can be clicked on to open a larger size. sensorapp Related Links Webapp AS Visualization Webapp Development Tips Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Visualization for Apps"},{"location":"as_visualization/webapp_apps/#webapp-scionlab-apps-visualization","text":"","title":"Webapp SCIONLab Apps Visualization"},{"location":"as_visualization/webapp_apps/#webapp-features","text":"This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Two functional server tests are included to test the networks without needing specific sensor or camera hardware, imagetest and statstest . Supported client applications include camerapp , sensorapp , and bwtester . For best results, ensure the desired server-side apps are running and connected to the SCION network first. Instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps.","title":"Webapp Features"},{"location":"as_visualization/webapp_apps/#bwtester","text":"Simply adjust the dials to the desired level, while the icon lock will allow you to keep one value constant.","title":"bwtester"},{"location":"as_visualization/webapp_apps/#camerapp","text":"The retrieved image will appear scaled down and can be clicked on to open a larger size.","title":"camerapp"},{"location":"as_visualization/webapp_apps/#sensorapp","text":"","title":"sensorapp"},{"location":"as_visualization/webapp_apps/#related-links","text":"Webapp AS Visualization Webapp Development Tips Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Related Links"},{"location":"as_visualization/webapp_development/","text":"Webapp Development Tips The webapp tool can be used to test several aspects of any local topology. Warning Most of the steps on this page are for localhost development only. If you are running a packaged install of SCIONLab, please see the webapp package tutorial . Development Setup/Run For running webapp in a development environment for the SCION Infrastructure, follow the SCIONLab development install and run process at https://github.com/netsec-ethz/netsec-scion . Local Topology Any local topology can be used with webapp , for example, the wide test topology: cd $GOPATH /src/scionproto/scion ./scion.sh topology -c topology/Wide.topo Then, follow these steps to install SCIONLab Apps to run webapp in development. Development Install: mkdir ~/go/src/github.com/netsec-ethz cd ~/go/src/github.com/netsec-ethz git clone https://github.com/netsec-ethz/scion-apps.git Development Build: Install all SCIONLab apps and dependencies, including webapp : cd scion-apps ./deps.sh make install Development Run on Test SCION Topology: You can alter the defaults on the command line, all of which are listed below: webapp \\ -a 127 .0.0.1 \\ -p 8081 \\ -r . \\ -srvroot $GOPATH /src/github.com/netsec-ethz/scion-apps/webapp/web \\ -sabin $GOPATH /bin \\ -sroot $GOPATH /src/github.com/scionproto/scion \\ -sbin $GOPATH /src/github.com/scionproto/scion/bin \\ -sgen $GOPATH /src/github.com/scionproto/scion/gen \\ -sgenc $GOPATH /src/github.com/scionproto/scion/gen-cache \\ -slogs $GOPATH /src/github.com/scionproto/scion/logs or can you run webapp like this, which will use the defaults above: webapp Development Run on SCIONLab Topology: webapp \\ -a 0 .0.0.0 \\ -p 8080 \\ -r ~/go/src/github.com/netsec-ethz/scion-apps/webapp/web/data \\ -srvroot ~/go/src/github.com/netsec-ethz/scion-apps/webapp/web \\ -sabin $GOPATH /bin \\ -sroot /etc/scion \\ -sbin /usr/bin \\ -sgen /etc/scion/gen \\ -sgenc /var/lib/scion \\ -slogs /var/log/scion Development Watcher For developing the webapp application itself, since it is annoying to make several changes, only to have to start and stop the web server each time, a watcher library like go-watcher is recommended. go get github.com/canthefason/go-watcher go install github.com/canthefason/go-watcher/cmd/watcher After installation you can cd to the webapp.go directory and webapp will be rebuilt and rerun every time you save your source file changes, with or without command arguments. cd $GOPATH /src/github.com/netsec-ethz/scion-apps/webapp watcher -a 0 .0.0.0 -p 8080 -r .. or cd $GOPATH /src/github.com/netsec-ethz/scion-apps/webapp watcher Help Usage of webapp: -a string Address of server host. (default 127.0.0.1 ) -p int Port of server host. (default 8000) -r string Root path to read/browse from, CAUTION: read-access granted from -a and -p. (default . ) -sabin string Path to execute the installed scionlab apps binaries (default /home/ubuntu/go/bin ) -sbin string Path to execute SCION bin directory of infrastructure tools (default /home/ubuntu/go/src/github.com/scionproto/scion/bin ) -sgen string Path to read SCION gen directory of infrastructure config (default /home/ubuntu/go/src/github.com/scionproto/scion/gen ) -sgenc string Path to read SCION gen-cache directory of infrastructure run-time config (default /home/ubuntu/go/src/github.com/scionproto/scion/gen-cache ) -slogs string Path to read SCION logs directory of infrastructure logging (default /home/ubuntu/go/src/github.com/scionproto/scion/logs ) -sroot string Path to read SCION root directory of infrastructure (default /home/ubuntu/go/src/github.com/scionproto/scion ) -srvroot string Path to read/write web server files. (default /home/ubuntu/go/src/github.com/netsec-ethz/scion-apps/webapp/web ) Local Visualizations You can point the browser to your test locally and view paths, run SCIONLab client apps, examine certificates and more. Local SCIONLab App Servers This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Some functional server tests are included to test the networks without needing specific sensor or camera hardware, bwtestserver sensorserver and imageserver . The server address 1-ffaa:0:112,[127.0.0.2] is used below, but any address appropriate to your test will do. More instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps. bwtestserver This test will setup a local server to receive requests from the bandwidth tester. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/bwtester/bwtestserver go install bwtestserver.go bwtestserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :30100 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for bandwidth measurements. sensorserver This hardware-independent test will echo some remote machine stats from the Python script timereader.py , which is piped to the server for transmission to clients. On your remote SCION server node run (substituting your own address parameters): cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver go install sensorserver.go python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/timereader.py | sensorserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42003 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for remote sensor readings. imageserver This hardware-independent test will generate an image with some remote machine stats from the Go app local-image.go , which will be saved locally for transmission to clients. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver go install imageserver.go go run ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/webapp/tests/imgtest/imgserver/local-image.go imageserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42002 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for the most recently generated remote image. Related Links Webapp AS Visualization Webapp SCIONLab Apps Visualization Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Webapp Development Tips"},{"location":"as_visualization/webapp_development/#webapp-development-tips","text":"The webapp tool can be used to test several aspects of any local topology. Warning Most of the steps on this page are for localhost development only. If you are running a packaged install of SCIONLab, please see the webapp package tutorial .","title":"Webapp Development Tips"},{"location":"as_visualization/webapp_development/#development-setuprun","text":"For running webapp in a development environment for the SCION Infrastructure, follow the SCIONLab development install and run process at https://github.com/netsec-ethz/netsec-scion .","title":"Development Setup/Run"},{"location":"as_visualization/webapp_development/#local-topology","text":"Any local topology can be used with webapp , for example, the wide test topology: cd $GOPATH /src/scionproto/scion ./scion.sh topology -c topology/Wide.topo Then, follow these steps to install SCIONLab Apps to run webapp in development. Development Install: mkdir ~/go/src/github.com/netsec-ethz cd ~/go/src/github.com/netsec-ethz git clone https://github.com/netsec-ethz/scion-apps.git Development Build: Install all SCIONLab apps and dependencies, including webapp : cd scion-apps ./deps.sh make install Development Run on Test SCION Topology: You can alter the defaults on the command line, all of which are listed below: webapp \\ -a 127 .0.0.1 \\ -p 8081 \\ -r . \\ -srvroot $GOPATH /src/github.com/netsec-ethz/scion-apps/webapp/web \\ -sabin $GOPATH /bin \\ -sroot $GOPATH /src/github.com/scionproto/scion \\ -sbin $GOPATH /src/github.com/scionproto/scion/bin \\ -sgen $GOPATH /src/github.com/scionproto/scion/gen \\ -sgenc $GOPATH /src/github.com/scionproto/scion/gen-cache \\ -slogs $GOPATH /src/github.com/scionproto/scion/logs or can you run webapp like this, which will use the defaults above: webapp Development Run on SCIONLab Topology: webapp \\ -a 0 .0.0.0 \\ -p 8080 \\ -r ~/go/src/github.com/netsec-ethz/scion-apps/webapp/web/data \\ -srvroot ~/go/src/github.com/netsec-ethz/scion-apps/webapp/web \\ -sabin $GOPATH /bin \\ -sroot /etc/scion \\ -sbin /usr/bin \\ -sgen /etc/scion/gen \\ -sgenc /var/lib/scion \\ -slogs /var/log/scion","title":"Local Topology"},{"location":"as_visualization/webapp_development/#development-watcher","text":"For developing the webapp application itself, since it is annoying to make several changes, only to have to start and stop the web server each time, a watcher library like go-watcher is recommended. go get github.com/canthefason/go-watcher go install github.com/canthefason/go-watcher/cmd/watcher After installation you can cd to the webapp.go directory and webapp will be rebuilt and rerun every time you save your source file changes, with or without command arguments. cd $GOPATH /src/github.com/netsec-ethz/scion-apps/webapp watcher -a 0 .0.0.0 -p 8080 -r .. or cd $GOPATH /src/github.com/netsec-ethz/scion-apps/webapp watcher","title":"Development Watcher"},{"location":"as_visualization/webapp_development/#help","text":"Usage of webapp: -a string Address of server host. (default 127.0.0.1 ) -p int Port of server host. (default 8000) -r string Root path to read/browse from, CAUTION: read-access granted from -a and -p. (default . ) -sabin string Path to execute the installed scionlab apps binaries (default /home/ubuntu/go/bin ) -sbin string Path to execute SCION bin directory of infrastructure tools (default /home/ubuntu/go/src/github.com/scionproto/scion/bin ) -sgen string Path to read SCION gen directory of infrastructure config (default /home/ubuntu/go/src/github.com/scionproto/scion/gen ) -sgenc string Path to read SCION gen-cache directory of infrastructure run-time config (default /home/ubuntu/go/src/github.com/scionproto/scion/gen-cache ) -slogs string Path to read SCION logs directory of infrastructure logging (default /home/ubuntu/go/src/github.com/scionproto/scion/logs ) -sroot string Path to read SCION root directory of infrastructure (default /home/ubuntu/go/src/github.com/scionproto/scion ) -srvroot string Path to read/write web server files. (default /home/ubuntu/go/src/github.com/netsec-ethz/scion-apps/webapp/web )","title":"Help"},{"location":"as_visualization/webapp_development/#local-visualizations","text":"You can point the browser to your test locally and view paths, run SCIONLab client apps, examine certificates and more.","title":"Local Visualizations"},{"location":"as_visualization/webapp_development/#local-scionlab-app-servers","text":"This Go web server wraps several SCION test client apps and provides an interface for any text and/or image output received. SCIONLab Apps are on Github. Some functional server tests are included to test the networks without needing specific sensor or camera hardware, bwtestserver sensorserver and imageserver . The server address 1-ffaa:0:112,[127.0.0.2] is used below, but any address appropriate to your test will do. More instructions to setup the servers are here . The web interface launched above can be used to run the client-side apps.","title":"Local SCIONLab App Servers"},{"location":"as_visualization/webapp_development/#bwtestserver","text":"This test will setup a local server to receive requests from the bandwidth tester. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/bwtester/bwtestserver go install bwtestserver.go bwtestserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :30100 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for bandwidth measurements.","title":"bwtestserver"},{"location":"as_visualization/webapp_development/#sensorserver","text":"This hardware-independent test will echo some remote machine stats from the Python script timereader.py , which is piped to the server for transmission to clients. On your remote SCION server node run (substituting your own address parameters): cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver go install sensorserver.go python3 ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/sensorapp/sensorserver/timereader.py | sensorserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42003 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for remote sensor readings.","title":"sensorserver"},{"location":"as_visualization/webapp_development/#imageserver","text":"This hardware-independent test will generate an image with some remote machine stats from the Go app local-image.go , which will be saved locally for transmission to clients. cd ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/camerapp/imageserver go install imageserver.go go run ${ GOPATH } /src/github.com/netsec-ethz/scion-apps/webapp/tests/imgtest/imgserver/local-image.go imageserver -s 1 -ffaa:0:112, [ 127 .0.0.2 ] :42002 -sciondFromIA Now, from your webapp browser interface running on your virtual client SCION node, you can enter both client and server addresses and ask the client for the most recently generated remote image.","title":"imageserver"},{"location":"as_visualization/webapp_development/#related-links","text":"Webapp AS Visualization Webapp SCIONLab Apps Visualization Fetching sensor readings or time stamps Fetching a camera image over the SCION network Running the bandwidthtester application","title":"Related Links"},{"location":"config/check/","text":"Check AS Configuration Introduction After having configured your AS on the SCIONLab website , installed SCION and, depending on the chosen installation type, installed the configuration on your host you should now have a running SCIONLab AS. Follow the steps below to check that it is working as expected. Running Webapp If you're running a VM, the simplest and recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool SCIONLab Apps Web Visualization . This browser-based tool serves as a dashboard to your SCIONLab VM and includes various checks. Terminal based For the following steps, log into the machine hosting the SCION services (with vagrant ssh if it is a virtual machine). If any of the checks fail, head over to the Troubleshooting Guide Check VPN tunnel This only applies if you've configured your as to use an OpenVPN connection to the Attachment Point. Check that the tunnel interface exists: sudo ip address show dev tun0 Check that /etc/openvpn/client.conf exists. Check that the OpenVPN client is up: sudo systemctl status openvpn@client Check that the IP address in the topology.json file matches the IP assigned in the VPN: Open any of the topology.json files and search the Interfaces entry: $ grep Interfaces -A15 /etc/scion/gen/ISD*/AS*/endhost/topology.json Interfaces : { 1 : { Bandwidth : 1000 , ISD_AS : 17-ffaa:0:1107 , LinkTo : PARENT , MTU : 1472 , Overlay : UDP/IPv4 , PublicOverlay : { Addr : 10.0.8.133 , OverlayPort : 50000 } , RemoteOverlay : { Addr : 10.0.8.1 , OverlayPort : 50168 } } In this entry, the PublicOverlay address should correspond to the local address on your tunnel interface. Finally, check that you can ping the address listed in RemoteOverlay . Check SCION service status sudo systemctl list-dependencies scionlab.target This should show all entries as green. If there are any failed services in this list, start troubleshooting Note Ignore duplicate entries, this is a known issue in some systemd versions. If you're running a build from sources, you will need to use the developer scripts instead of systemctl . Run scion.sh status or supervisor/supervisor.sh status . Inspect log files Log files for the SCION services are located in /var/log/scion . Inspect the beacon server's log file using e.g. less -f /var/log/scion/bs*.log , to check that Interfaces are considered active : Check that the log mentions Activated interface ... , not followed by a later interface went down . Beacons are received successfully: Check that you find entries Registered beacons ... . Ping Ping somebody! Run scmp echo to send an \"SCMP echo request\"; this is just like the ping command for IP. The syntax is: scmp echo -local [my scion address] -remote [someone else s scion address] where a SCION address has the form ISD-AS,[IP] . For example, to ping any host in the attachment point AS in Korea from my SCIONLab AS, I would run: $ scmp echo -local 17 -ffaa:1:15b, [ 127 .0.0.1 ] -remote 20 -ffaa:0:1404, [ 0 .0.0.0 ] Using path: Hops: [ 17 -ffaa:1:15b 1 gt ; 169 17 -ffaa:0:1107 1 gt ; 4 17 -ffaa:0:1102 2 gt ; 2 17 -ffaa:0:1103 4 gt ; 8 17 -ffaa:0:1101 11 gt ; 3 19 -ffaa:0:1302 1 gt ; 7 19 -ffaa:0:1301 3 gt ; 5 18 -ffaa:0:1201 3 gt ; 5 20 -ffaa:0:1401 7 gt ; 1 20 -ffaa:0:1403 3 gt ; 47 20 -ffaa:0:1404 ] Mtu: 1472 200 bytes from 20 -ffaa:0:1404, [ 0 .0.0.0 ] scmp_seq = 0 time = 383 .578ms 200 bytes from 20 -ffaa:0:1404, [ 0 .0.0.0 ] scmp_seq = 1 time = 381 .763ms Note Having to enter your own SCION address is a common theme with SCION tools. We hope we'll get rid of this somewhat arcane feature eventually. Tip Check the topology map on the SCIONLab homepage for an overview over the existing ASes and their addresses. Tip If you're running the application on a local topology, make sure to specify the correct socket using the -sciond flag, e.g. by adding -sciond /run/shm/sciond/sd1-ff00_0_110.sock . Passing this test is a condition sufficient to say that your AS works as expected. If it fails, please refer to the troubleshooting section .","title":"Check AS Configuration"},{"location":"config/check/#check-as-configuration","text":"","title":"Check AS Configuration"},{"location":"config/check/#introduction","text":"After having configured your AS on the SCIONLab website , installed SCION and, depending on the chosen installation type, installed the configuration on your host you should now have a running SCIONLab AS. Follow the steps below to check that it is working as expected.","title":"Introduction"},{"location":"config/check/#running-webapp","text":"If you're running a VM, the simplest and recommended way of verifying a correct SCION infrastructure deployment is running the visualization tool SCIONLab Apps Web Visualization . This browser-based tool serves as a dashboard to your SCIONLab VM and includes various checks.","title":"Running Webapp"},{"location":"config/check/#terminal-based","text":"For the following steps, log into the machine hosting the SCION services (with vagrant ssh if it is a virtual machine). If any of the checks fail, head over to the Troubleshooting Guide","title":"Terminal based"},{"location":"config/check/#check-vpn-tunnel","text":"This only applies if you've configured your as to use an OpenVPN connection to the Attachment Point. Check that the tunnel interface exists: sudo ip address show dev tun0 Check that /etc/openvpn/client.conf exists. Check that the OpenVPN client is up: sudo systemctl status openvpn@client Check that the IP address in the topology.json file matches the IP assigned in the VPN: Open any of the topology.json files and search the Interfaces entry: $ grep Interfaces -A15 /etc/scion/gen/ISD*/AS*/endhost/topology.json Interfaces : { 1 : { Bandwidth : 1000 , ISD_AS : 17-ffaa:0:1107 , LinkTo : PARENT , MTU : 1472 , Overlay : UDP/IPv4 , PublicOverlay : { Addr : 10.0.8.133 , OverlayPort : 50000 } , RemoteOverlay : { Addr : 10.0.8.1 , OverlayPort : 50168 } } In this entry, the PublicOverlay address should correspond to the local address on your tunnel interface. Finally, check that you can ping the address listed in RemoteOverlay .","title":"Check VPN tunnel"},{"location":"config/check/#check-scion-service-status","text":"sudo systemctl list-dependencies scionlab.target This should show all entries as green. If there are any failed services in this list, start troubleshooting Note Ignore duplicate entries, this is a known issue in some systemd versions. If you're running a build from sources, you will need to use the developer scripts instead of systemctl . Run scion.sh status or supervisor/supervisor.sh status .","title":"Check SCION service status"},{"location":"config/check/#inspect-log-files","text":"Log files for the SCION services are located in /var/log/scion . Inspect the beacon server's log file using e.g. less -f /var/log/scion/bs*.log , to check that Interfaces are considered active : Check that the log mentions Activated interface ... , not followed by a later interface went down . Beacons are received successfully: Check that you find entries Registered beacons ... .","title":"Inspect log files"},{"location":"config/check/#ping","text":"Ping somebody! Run scmp echo to send an \"SCMP echo request\"; this is just like the ping command for IP. The syntax is: scmp echo -local [my scion address] -remote [someone else s scion address] where a SCION address has the form ISD-AS,[IP] . For example, to ping any host in the attachment point AS in Korea from my SCIONLab AS, I would run: $ scmp echo -local 17 -ffaa:1:15b, [ 127 .0.0.1 ] -remote 20 -ffaa:0:1404, [ 0 .0.0.0 ] Using path: Hops: [ 17 -ffaa:1:15b 1 gt ; 169 17 -ffaa:0:1107 1 gt ; 4 17 -ffaa:0:1102 2 gt ; 2 17 -ffaa:0:1103 4 gt ; 8 17 -ffaa:0:1101 11 gt ; 3 19 -ffaa:0:1302 1 gt ; 7 19 -ffaa:0:1301 3 gt ; 5 18 -ffaa:0:1201 3 gt ; 5 20 -ffaa:0:1401 7 gt ; 1 20 -ffaa:0:1403 3 gt ; 47 20 -ffaa:0:1404 ] Mtu: 1472 200 bytes from 20 -ffaa:0:1404, [ 0 .0.0.0 ] scmp_seq = 0 time = 383 .578ms 200 bytes from 20 -ffaa:0:1404, [ 0 .0.0.0 ] scmp_seq = 1 time = 381 .763ms Note Having to enter your own SCION address is a common theme with SCION tools. We hope we'll get rid of this somewhat arcane feature eventually. Tip Check the topology map on the SCIONLab homepage for an overview over the existing ASes and their addresses. Tip If you're running the application on a local topology, make sure to specify the correct socket using the -sciond flag, e.g. by adding -sciond /run/shm/sciond/sd1-ff00_0_110.sock . Passing this test is a condition sufficient to say that your AS works as expected. If it fails, please refer to the troubleshooting section .","title":"Ping"},{"location":"config/create_as/","text":"Configure your SCIONLab AS SCIONLab Portal Overview In order to create a SCIONLab AS you must login on SCIONLab . In case you don't have an account yet, please follow the registration process. After loggin in, you land on the My ASes page. The My ASes link in the navbar brings you back to this page when you navigate away. The drop-down menu under the -symbol in the navbar contains links to change your password and log-out. This view is initially empty, later you will see a list of your ASes: The columns in this summary refer to the configuration you've made for this AS, as discussed below. The link with the -symbol in the AS ID column brings you to the edit page for an AS. The link with the -symbol in the Configuration column lets you download the configuration tarfile for an AS. The tick or cross in the Active column indicate whether an AS has been deactivated (using the corresponding button in the edit page). Configure a SCIONLab AS The Create a new SCIONLab AS button or on the edit link for an existing AS will bring you to the same configuration form. Label: here you can add a short label for your AS that will be displayed on the My ASes list page. This label just helps you identify your ASes and doesn't have any other functionality. Attachment Point: this selects the provider AS for your AS. This selection also determines the ISD (isolation domain) which your AS will belong to. After creating your AS, you can still change your Attachment Point as often as you want. For lower latency, prefer to pick an Attachment Point that is closest to you -- the topology map on the SCIONLab home page has some hints on the geographical regions in which the ASes are located. The following options are the parameters for the overlay link between the border router in your AS and the border router in the Attachment Point AS. Use VPN: if enabled, an OpenVPN tunnel is configured between your AS and the chosen Attachment Point. The IP address options below will disappear, as the VPN-internal IP address will be used in the border router configuration. Use this option if: you don't have a static public IP address or you are behind a NAT or firewall and you cannot open/forward a chosen UDP port you want to \"just make it work\" , as you'll need to know no further details about your network configuration The configuration file will contain an OpenVPN configuration file client.conf . After extracting this file to /etc/openvpn/ , you can start the tunnel by running sudo systemctl start openvpn@client . Public IP Address, Bind IP Address Find your public IP e.g. by visiting whatsmyip.org or by running dig +short myip.opendns.com @resolver1.opendns.com Find your local IP address e.g. by running ip route get 8.8.8.8 | head -1 | cut -d -f8 If your host has a public IP (the public IP is identical with the local IP), only fill the Public IP Address field and leave the Bind IP Address field blank. If you are in a network behind a NAT (the public IP and local IP are different), fill the Public IP Address field with the public IP and the Bind IP Address field with the local IP address. Note Currently, IPv6 cannot be used. Even though support for IPv6 is implemented, none of the currently available Attachment Points have an IPv6 address configured. Public Port, Bind Port: Choose a UDP port on which your Border Router will be reachable. We typically use ports in the range 50000-51000 by convention, but you're free to choose any other. If you are behind a NAT or firewall, make sure to open/forward the chosen port. For this you may need to contact your network administrator. If you have a port forwarding rule that rewrites the port number, enter the local port number in the Bind Port field, otherwise leave it blank. Finally, select the type of SCION installation for which the configuration should be created. Installation Type: please refer to Installation/Pick an Option . Download and install configuration After creating or modifying your AS as described above, you can deploy the generated configuration to your machine. The procedure for this depends on which type of SCION installation you chose. Please follow the instructions on the individual pages. Instructions for Run SCION in Vagrant virtual machine Instructions for SCION installation from packages Instructions for SCION installation from sources","title":"Configure your SCIONLab AS"},{"location":"config/create_as/#configure-your-scionlab-as","text":"","title":"Configure your SCIONLab AS"},{"location":"config/create_as/#scionlab-portal-overview","text":"In order to create a SCIONLab AS you must login on SCIONLab . In case you don't have an account yet, please follow the registration process. After loggin in, you land on the My ASes page. The My ASes link in the navbar brings you back to this page when you navigate away. The drop-down menu under the -symbol in the navbar contains links to change your password and log-out. This view is initially empty, later you will see a list of your ASes: The columns in this summary refer to the configuration you've made for this AS, as discussed below. The link with the -symbol in the AS ID column brings you to the edit page for an AS. The link with the -symbol in the Configuration column lets you download the configuration tarfile for an AS. The tick or cross in the Active column indicate whether an AS has been deactivated (using the corresponding button in the edit page).","title":"SCIONLab Portal Overview"},{"location":"config/create_as/#configure-a-scionlab-as","text":"The Create a new SCIONLab AS button or on the edit link for an existing AS will bring you to the same configuration form. Label: here you can add a short label for your AS that will be displayed on the My ASes list page. This label just helps you identify your ASes and doesn't have any other functionality. Attachment Point: this selects the provider AS for your AS. This selection also determines the ISD (isolation domain) which your AS will belong to. After creating your AS, you can still change your Attachment Point as often as you want. For lower latency, prefer to pick an Attachment Point that is closest to you -- the topology map on the SCIONLab home page has some hints on the geographical regions in which the ASes are located. The following options are the parameters for the overlay link between the border router in your AS and the border router in the Attachment Point AS. Use VPN: if enabled, an OpenVPN tunnel is configured between your AS and the chosen Attachment Point. The IP address options below will disappear, as the VPN-internal IP address will be used in the border router configuration. Use this option if: you don't have a static public IP address or you are behind a NAT or firewall and you cannot open/forward a chosen UDP port you want to \"just make it work\" , as you'll need to know no further details about your network configuration The configuration file will contain an OpenVPN configuration file client.conf . After extracting this file to /etc/openvpn/ , you can start the tunnel by running sudo systemctl start openvpn@client . Public IP Address, Bind IP Address Find your public IP e.g. by visiting whatsmyip.org or by running dig +short myip.opendns.com @resolver1.opendns.com Find your local IP address e.g. by running ip route get 8.8.8.8 | head -1 | cut -d -f8 If your host has a public IP (the public IP is identical with the local IP), only fill the Public IP Address field and leave the Bind IP Address field blank. If you are in a network behind a NAT (the public IP and local IP are different), fill the Public IP Address field with the public IP and the Bind IP Address field with the local IP address. Note Currently, IPv6 cannot be used. Even though support for IPv6 is implemented, none of the currently available Attachment Points have an IPv6 address configured. Public Port, Bind Port: Choose a UDP port on which your Border Router will be reachable. We typically use ports in the range 50000-51000 by convention, but you're free to choose any other. If you are behind a NAT or firewall, make sure to open/forward the chosen port. For this you may need to contact your network administrator. If you have a port forwarding rule that rewrites the port number, enter the local port number in the Bind Port field, otherwise leave it blank. Finally, select the type of SCION installation for which the configuration should be created. Installation Type: please refer to Installation/Pick an Option .","title":"Configure a SCIONLab AS"},{"location":"config/create_as/#download-and-install-configuration","text":"After creating or modifying your AS as described above, you can deploy the generated configuration to your machine. The procedure for this depends on which type of SCION installation you chose. Please follow the instructions on the individual pages. Instructions for Run SCION in Vagrant virtual machine Instructions for SCION installation from packages Instructions for SCION installation from sources","title":"Download and install configuration"},{"location":"config/setup_endhost/","text":"Set up an end host Introduction In this tutorial we will cover the steps necessary to configure a SCION end host in a SCIONLab AS. An SCION end host is a simply a computer running SCION applications in a SCION AS, i.e. it is not a router and does not run any infrastructure services for the AS. An end host will communicate with the Path- and Certificate-service of the AS to get paths and certificate information. For communication to hosts in different ASes, traffic will be sent to the SCION border routers of the AS. The end host knows the addresses for these services from a configuration file ( topology.json ). The software stack for a SCION end host application consists of the dispatcher , responsible for managing sockets and encapsulating/decapsulating SCION packets for IP/UDP overlay, and the SCION-daemon sciond , which is responsible for fetching, verifying and caching paths and certificate information from the AS services. Compared to the perhaps more familiar software stack for IP, we can see some rough analogues: dispatcher : corresponds to the kernels socket API sciond : similar to a local caching DNS resolver daemon (like e.g. dnsmasq, unbound), except it's for paths and certificates, not for names 1. Install SCION on end host The software stack for a SCION end host consists of the dispatcher and the sciond , contained in the scion-dispatcher and scion-daemon packages. Just install an end host application that you're planning to run. On Ubuntu/Debian, run the following snippet to add the package repository: sudo apt-get install apt-transport-https echo deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main | sudo tee /etc/apt/sources.list.d/scionlab.list sudo apt-get update and then install the packages using: sudo apt-get install scionlab scion-apps-* # Just get everything OR sudo apt-get install scion-apps-bwtester # get individual application(s), with only minimal dependencies Of course you can also use the other available installation options . When running the VM installation, the steps will be virtually identical with the only difference that they need to be performed in the respective VMs. When running SCION built from sources, the directory paths will be different (configuration in $GOPATH/src/github.com/scionproto/scion instead of /etc/scion ) and the systemctl commands would be replaced with the scion.sh script. 2. Modify AS configuration The configuration downloaded from SCIONLab configures all SCION services to listen only on the localhost address by default. To run an end host on a different host, the services need to bind on an IP that is accessible from the end host. On the host running the AS services, locate the topology.json files in /etc/scion/gen/ . In this configuration file, we change the occurrences of IP 127.0.0.1 to the hosts IP. NODE_IP=#..host IP..# sed -i s/127\\.0\\.0\\.1/$NODE_IP/ /etc/scion/gen/ISD*/AS*/*/topology.json Note Only PathServer , CertificateServer and the InternalAddrs of BorderRouter need to be accessible for the end host. This command also changes the address for the BeaconServer and the CtrlAddr of the BorderRouter as a bonus, for the sake of simplicity. Restart your AS services by running sudo systemctl restart scionlab.target . 3. Extract and adapt end host configuration To create the configuration for the end host, we copy the configuration (modified in the previous step) from the node's /etc/scion/gen directory: we'll need the dispatcher/ and the ISD*/AS*/end host directory. The following snippet describes one way to achieve this: cp /etc/scion/gen /tmp/ rm -r /tmp/gen/ISD*/AS*/ { br,bs,ps,cs } */ # strip config for AS services Then we need to fix another configuration file: the localhost addresses in /etc/scion/gen/ISD*/AS*/end host/sd.toml must be changed to to the end host's IP address. ENDHOST_IP=#..host IP..# sed -i s/127\\.0\\.0\\.1/$ENDHOST_IP/ /etc/scion/gen/ISD*/AS*/end host/sd.toml Now copy /tmp/gen to the end host (e.g. using scp ) and install it in the /etc/scion/ directory. 4. Start SCION on end host Finally we can start the scion-dispatcher and scion-daemon services: # replace XX and YYYY with your ISD/AS number e.g. scion-daemon@17-ffaa_1_15b.service systemctl enable scion-daemon@XX-ffaa_1_YYYY.service systemctl start scionlab.target Test that your connection is working, e.g. by using scmp echo and start using the applications as described in the Applications-section.","title":"Set up an end host"},{"location":"config/setup_endhost/#set-up-an-end-host","text":"","title":"Set up an end host"},{"location":"config/setup_endhost/#introduction","text":"In this tutorial we will cover the steps necessary to configure a SCION end host in a SCIONLab AS. An SCION end host is a simply a computer running SCION applications in a SCION AS, i.e. it is not a router and does not run any infrastructure services for the AS. An end host will communicate with the Path- and Certificate-service of the AS to get paths and certificate information. For communication to hosts in different ASes, traffic will be sent to the SCION border routers of the AS. The end host knows the addresses for these services from a configuration file ( topology.json ). The software stack for a SCION end host application consists of the dispatcher , responsible for managing sockets and encapsulating/decapsulating SCION packets for IP/UDP overlay, and the SCION-daemon sciond , which is responsible for fetching, verifying and caching paths and certificate information from the AS services. Compared to the perhaps more familiar software stack for IP, we can see some rough analogues: dispatcher : corresponds to the kernels socket API sciond : similar to a local caching DNS resolver daemon (like e.g. dnsmasq, unbound), except it's for paths and certificates, not for names","title":"Introduction"},{"location":"config/setup_endhost/#1-install-scion-on-end-host","text":"The software stack for a SCION end host consists of the dispatcher and the sciond , contained in the scion-dispatcher and scion-daemon packages. Just install an end host application that you're planning to run. On Ubuntu/Debian, run the following snippet to add the package repository: sudo apt-get install apt-transport-https echo deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main | sudo tee /etc/apt/sources.list.d/scionlab.list sudo apt-get update and then install the packages using: sudo apt-get install scionlab scion-apps-* # Just get everything OR sudo apt-get install scion-apps-bwtester # get individual application(s), with only minimal dependencies Of course you can also use the other available installation options . When running the VM installation, the steps will be virtually identical with the only difference that they need to be performed in the respective VMs. When running SCION built from sources, the directory paths will be different (configuration in $GOPATH/src/github.com/scionproto/scion instead of /etc/scion ) and the systemctl commands would be replaced with the scion.sh script.","title":"1. Install SCION on end host"},{"location":"config/setup_endhost/#2-modify-as-configuration","text":"The configuration downloaded from SCIONLab configures all SCION services to listen only on the localhost address by default. To run an end host on a different host, the services need to bind on an IP that is accessible from the end host. On the host running the AS services, locate the topology.json files in /etc/scion/gen/ . In this configuration file, we change the occurrences of IP 127.0.0.1 to the hosts IP. NODE_IP=#..host IP..# sed -i s/127\\.0\\.0\\.1/$NODE_IP/ /etc/scion/gen/ISD*/AS*/*/topology.json Note Only PathServer , CertificateServer and the InternalAddrs of BorderRouter need to be accessible for the end host. This command also changes the address for the BeaconServer and the CtrlAddr of the BorderRouter as a bonus, for the sake of simplicity. Restart your AS services by running sudo systemctl restart scionlab.target .","title":"2. Modify AS configuration"},{"location":"config/setup_endhost/#3-extract-and-adapt-end-host-configuration","text":"To create the configuration for the end host, we copy the configuration (modified in the previous step) from the node's /etc/scion/gen directory: we'll need the dispatcher/ and the ISD*/AS*/end host directory. The following snippet describes one way to achieve this: cp /etc/scion/gen /tmp/ rm -r /tmp/gen/ISD*/AS*/ { br,bs,ps,cs } */ # strip config for AS services Then we need to fix another configuration file: the localhost addresses in /etc/scion/gen/ISD*/AS*/end host/sd.toml must be changed to to the end host's IP address. ENDHOST_IP=#..host IP..# sed -i s/127\\.0\\.0\\.1/$ENDHOST_IP/ /etc/scion/gen/ISD*/AS*/end host/sd.toml Now copy /tmp/gen to the end host (e.g. using scp ) and install it in the /etc/scion/ directory.","title":"3. Extract and adapt end host configuration"},{"location":"config/setup_endhost/#4-start-scion-on-end-host","text":"Finally we can start the scion-dispatcher and scion-daemon services: # replace XX and YYYY with your ISD/AS number e.g. scion-daemon@17-ffaa_1_15b.service systemctl enable scion-daemon@XX-ffaa_1_YYYY.service systemctl start scionlab.target Test that your connection is working, e.g. by using scmp echo and start using the applications as described in the Applications-section.","title":"4. Start SCION on end host"},{"location":"install/","text":"Pick an Option SCIONLab supports three main options to run the SCION services that make up a SCION AS: Run a Virtual Machine This is the simplest option to get started and is supported on all platforms that can run Vagrant and VirtualBox. Inside the Ubuntu VM, the SCION installation uses packages, identical to the setup described in Install with a Package Manager . The (perhaps obvious) downsides of running in a VM is the implied performance and memory overhead. Install with a Package Manager This is applicable to any recent Ubuntu (or other Debian-based) systems for the most common CPU platforms. Painless installation procedure and no performance overhead from running a VM. Build from Sources This requires following lengthy instructions and installing various development dependencies. Use this option if you want to make modifications to the SCION services. Additionally, you can install SCION on Android !","title":"Pick an Option"},{"location":"install/#pick-an-option","text":"SCIONLab supports three main options to run the SCION services that make up a SCION AS: Run a Virtual Machine This is the simplest option to get started and is supported on all platforms that can run Vagrant and VirtualBox. Inside the Ubuntu VM, the SCION installation uses packages, identical to the setup described in Install with a Package Manager . The (perhaps obvious) downsides of running in a VM is the implied performance and memory overhead. Install with a Package Manager This is applicable to any recent Ubuntu (or other Debian-based) systems for the most common CPU platforms. Painless installation procedure and no performance overhead from running a VM. Build from Sources This requires following lengthy instructions and installing various development dependencies. Use this option if you want to make modifications to the SCION services. Additionally, you can install SCION on Android !","title":"Pick an Option"},{"location":"install/android/","text":"Install on Android Warning This page has not been updated after the latest changes to SCIONLab and is out of date. Introduction It is possible to run SCION on an Android device. The easiest way is to install SCION as an Android app . The other alternative is to manually install SCION on your Android device . Both variants are based on Termux , which emulates a Terminal environment with the Linux base system that Android is based upon. This tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described here . Prerequisites It is recommended to make yourself familiar with Termux by reading the Wiki to learn how the app can be used comfortably. SCION App Hint The SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the manual setup won't be necessary anymore. To install the SCION app, please contact Stefan Schwarz to get an invite to the App testing group. Once you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done through the HockeyApp website (it is not available on the Google Play Store). Install SCION with the SCION App Once the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended): ./install That\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue. Hint If the folder selection doesn't show up, run the following script to trigger it manually: ./import_folder That means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB. Warning SCION for Android currently only supports a SCION endhost configuration, as described in this tutorial Warning SCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described here Manual setup To setup SCION on Android manually, the Termux app needs to be installed from the Google Play Store. To install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH. Access Termux via SSH First install the openssh package within Termux with pkg install openssh , then start the server with sshd . Password authentication is not supported, so you need to add your public key to $HOME/.ssh/authorized_keys . The ssh server runs by default on port 8022, so connect to it with ssh -p 8022 DEVICE_IP . You can find the device IP address with ip addr list wlan0 . For more information: Run an SSH server on your Android with Termux Access Termux via USB Install necessary packages Install the required packages from within Termux: apt update apt upgrade pkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl To access the SD card from Termux, it is required to run termux-setup-storage from the Termux console. Configure Go workspace SCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7 ARMv8/aarch64 architectures: For ARMv7: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb For aarch64: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb Setup the Go workspace and add it to your path: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$GOPATH/bin ~/.profile source ~/.profile Install SCION Step One clone the SCION repository After the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git config --global url.https://github.com/.insteadOf git@github.com: git clone --recursive -b termux-modifications git@github.com:stschwar/scion . curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch patch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch rm lwip-contrib.patch This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC Step Two configure Python path variable Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile Step Three install required packages/patches SCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually. Cap'n Proto To install Cap'n Proto in Termux run the following commands in the home/ directory: curl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz tar zxf capnproto-c++-0.6.1.tar.gz cd capnproto-c++-0.6.1 On Termux Cap'n Proto requires some patching to compile: cd src/kj/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch patch debug.c++ debug.c++.patch rm debug.c++.patch Back in the capnproto-c++-0.6.1/ root directory run: ./configure --prefix = $PREFIX TMPDIR = $PREFIX /tmp make make install zlog Install zlog by following its install instructions mostly. It requires some more patching and the installation of libandroid-glob-dev : curl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz tar -zxf zlog-latest-stable.tar.gz cd zlog-latest-stable/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch patch src/makefile zlog-makefile.patch rm zlog-makefile.patch pkg install -y libandroid-glob-dev make PREFIX = $PREFIX make PREFIX = $PREFIX install uthash Install the uthash library from your home/ directory: curl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master unzip uthash-master.zip cp uthash-master/src/*.h $PREFIX /include rm -rf uthash-master/ SCION Python dependencies Most of the Python dependencies can easily be installed through pip : cd $SC pip2 install -r env/pip2/requirements.txt pip3 install -r env/pip3/requirements.txt TMPDIR = $PREFIX /tmp pip3 install lz4 PyNaCl PyYAML Pygments Supervisor In case the pip installation of the package \"Supervisor\" fails, you can install it manually: curl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz tar -xzf supervisor-3.3.4.tar.gz cd supervisor-3.3.4/ python2 setup.py install SCION Go dependencies With Go correctly installed it is easy to install the SCION dependencies as well: cd $SC /env/go ./deps Next steps After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab as an endhost Connect to the already running SCION topology as a mobile endhost through an existing SCION setup. Changes to gen folder Note that in gen/ISDx/AS10xx/supervisord.conf the path of the SCION Deamon socket needs to be changed as follows: \"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\" . VPN Connection to SCIONLab Unfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the Open VPN app can be installed to connect to SCIONLab via VPN. The client.conf file that is provided by the SCIONLab coordinator needs to be renamed to client.ovpn before it can be imported into the app. Additionally, the line route 10.0.8.0/24 needs to be added to the file. Endhost configuration vs. full AS It is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage. If you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.","title":"Install on Android"},{"location":"install/android/#install-on-android","text":"Warning This page has not been updated after the latest changes to SCIONLab and is out of date.","title":"Install on Android"},{"location":"install/android/#introduction","text":"It is possible to run SCION on an Android device. The easiest way is to install SCION as an Android app . The other alternative is to manually install SCION on your Android device . Both variants are based on Termux , which emulates a Terminal environment with the Linux base system that Android is based upon. This tutorial is primarily targeted at running a SCION endhost on Android. While it is also possible to run an entire SCION AS, this currently doesn't run stable within Termux, as it requires Apache Zookeeper, which frequently crashes the Termux environment as described here .","title":"Introduction"},{"location":"install/android/#prerequisites","text":"It is recommended to make yourself familiar with Termux by reading the Wiki to learn how the app can be used comfortably.","title":"Prerequisites"},{"location":"install/android/#scion-app","text":"Hint The SCION App is currently in testing. With this App we aim to provide an easy way to install SCION on Android, so that the manual setup won't be necessary anymore. To install the SCION app, please contact Stefan Schwarz to get an invite to the App testing group. Once you have been added to the group, you will receive an email with a link to the SCION App. Note that the SCION App is currently distributed through HockeyApp and thus requires to install it as well. This can be done through the HockeyApp website (it is not available on the Google Play Store).","title":"SCION App"},{"location":"install/android/#install-scion-with-the-scion-app","text":"Once the SCION App has been installed, open it and run the following command within the Terminal (Wifi connection recommended): ./install That\u2019s it! The process takes a while but is fully automatic. At the end, a dialog opens which asks to select the \u2018gen\u2019 folder from internal memory. Select it to continue. Hint If the folder selection doesn't show up, run the following script to trigger it manually: ./import_folder That means of course, that the \u2018gen\u2019 folder needs to be readily available on the internal memory. Download it directly or push it onto the device with ADB. Warning SCION for Android currently only supports a SCION endhost configuration, as described in this tutorial Warning SCIOND config in the \u2018gen\u2019 folder needs a little adjustment on Android, as described here","title":"Install SCION with the SCION App"},{"location":"install/android/#manual-setup","text":"To setup SCION on Android manually, the Termux app needs to be installed from the Google Play Store. To install SCION within Termux it is recommended to access the Termux environment via the Android Debug Bridge (ADB) or via SSH.","title":"Manual setup"},{"location":"install/android/#access-termux-via-ssh","text":"First install the openssh package within Termux with pkg install openssh , then start the server with sshd . Password authentication is not supported, so you need to add your public key to $HOME/.ssh/authorized_keys . The ssh server runs by default on port 8022, so connect to it with ssh -p 8022 DEVICE_IP . You can find the device IP address with ip addr list wlan0 . For more information: Run an SSH server on your Android with Termux Access Termux via USB","title":"Access Termux via SSH"},{"location":"install/android/#install-necessary-packages","text":"Install the required packages from within Termux: apt update apt upgrade pkg install -y termux-exec git python python2 clang make python-dev libffi-dev openssl-dev openssl-tool curl To access the SD card from Termux, it is required to run termux-setup-storage from the Termux console.","title":"Install necessary packages"},{"location":"install/android/#configure-go-workspace","text":"SCION requires a specific Go version. The Termux Go package may be ahead of that version. The following repository offers prebuilt golang packages in the required version for both ARMv7 ARMv8/aarch64 architectures: For ARMv7: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang-doc_2%3A1.9.4_arm.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/arm/golang_2%3A1.9.4_arm.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb For aarch64: curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang-doc_2%3A1.9.4_aarch64.deb curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/debian-packages/aarch64/golang_2%3A1.9.4_aarch64.deb dpkg -i golang_2%3A1.9.4_aarch64.deb golang-doc_2%3A1.9.4_aarch64.deb Setup the Go workspace and add it to your path: echo export GOPATH= $HOME/go ~/.profile source ~/.profile mkdir -p $GOPATH /bin echo PATH=$PATH:$GOPATH/bin ~/.profile source ~/.profile","title":"Configure Go workspace"},{"location":"install/android/#install-scion","text":"","title":"Install SCION"},{"location":"install/android/#step-one-clone-the-scion-repository","text":"After the Go workspace has been configured, we can checkout SCION with the required Termux modifications from Github and apply a required patch using the following commands: mkdir -p $GOPATH /src/github.com/scionproto/scion cd $GOPATH /src/github.com/scionproto/scion git config --global url.https://github.com/.insteadOf git@github.com: git clone --recursive -b termux-modifications git@github.com:stschwar/scion . curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/lwip-contrib.patch patch sub/lwip-contrib/ports/unix/proj/scion/Makefile lwip-contrib.patch rm lwip-contrib.patch This will clone the appropriate SCION directory into your Go workspace. We will create an environment variable SC that will point to the SCION root directory. Afterwards it is necessary to navigate to the newly downloaded repository for finishing the configuration: echo export SC= $GOPATH/src/github.com/scionproto/scion ~/.profile source ~/.profile cd $SC","title":"Step One &ndash; clone the SCION repository"},{"location":"install/android/#step-two-configure-python-path-variable","text":"Some SCION components like SCIONviz require Python libraries which are located in the SCION root directory. In order to make them accessible, the PYTHONPATH environment variable needs to be exported: echo export PYTHONPATH= $SC/python:$SC ~/.profile source ~/.profile","title":"Step Two &ndash; configure Python path variable"},{"location":"install/android/#step-three-install-required-packagespatches","text":"SCION has an install script to install all necessary dependencies. In the Termux environment, however, this is not yet working. So the dependencies have to be installed manually.","title":"Step Three &ndash; install required packages/patches"},{"location":"install/android/#capn-proto","text":"To install Cap'n Proto in Termux run the following commands in the home/ directory: curl -O https://capnproto.org/capnproto-c++-0.6.1.tar.gz tar zxf capnproto-c++-0.6.1.tar.gz cd capnproto-c++-0.6.1 On Termux Cap'n Proto requires some patching to compile: cd src/kj/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/capnproto-c++-0.6.1/debug.c++.patch patch debug.c++ debug.c++.patch rm debug.c++.patch Back in the capnproto-c++-0.6.1/ root directory run: ./configure --prefix = $PREFIX TMPDIR = $PREFIX /tmp make make install","title":"Cap'n Proto"},{"location":"install/android/#zlog","text":"Install zlog by following its install instructions mostly. It requires some more patching and the installation of libandroid-glob-dev : curl https://codeload.github.com/HardySimpson/zlog/tar.gz/latest-stable --output zlog-latest-stable.tar.gz tar -zxf zlog-latest-stable.tar.gz cd zlog-latest-stable/ curl -O https://raw.githubusercontent.com/stschwar/scion/termux-modifications/patches/zlog-makefile.patch patch src/makefile zlog-makefile.patch rm zlog-makefile.patch pkg install -y libandroid-glob-dev make PREFIX = $PREFIX make PREFIX = $PREFIX install","title":"zlog"},{"location":"install/android/#uthash","text":"Install the uthash library from your home/ directory: curl -o uthash-master.zip https://codeload.github.com/troydhanson/uthash/zip/master unzip uthash-master.zip cp uthash-master/src/*.h $PREFIX /include rm -rf uthash-master/","title":"uthash"},{"location":"install/android/#scion-python-dependencies","text":"Most of the Python dependencies can easily be installed through pip : cd $SC pip2 install -r env/pip2/requirements.txt pip3 install -r env/pip3/requirements.txt TMPDIR = $PREFIX /tmp pip3 install lz4 PyNaCl PyYAML Pygments Supervisor In case the pip installation of the package \"Supervisor\" fails, you can install it manually: curl -O https://pypi.python.org/packages/44/60/698e54b4a4a9b956b2d709b4b7b676119c833d811d53ee2500f1b5e96dc3/supervisor-3.3.4.tar.gz tar -xzf supervisor-3.3.4.tar.gz cd supervisor-3.3.4/ python2 setup.py install","title":"SCION Python dependencies"},{"location":"install/android/#scion-go-dependencies","text":"With Go correctly installed it is easy to install the SCION dependencies as well: cd $SC /env/go ./deps","title":"SCION Go dependencies"},{"location":"install/android/#next-steps","text":"After finishing the installation of SCION, there are different ways of running different topologies. The following tutorials will cover this in further detail: Running a local network topology Generate a sample topology and run SCION locally Connecting to SCIONLab as an endhost Connect to the already running SCION topology as a mobile endhost through an existing SCION setup.","title":"Next steps"},{"location":"install/android/#changes-to-gen-folder","text":"Note that in gen/ISDx/AS10xx/supervisord.conf the path of the SCION Deamon socket needs to be changed as follows: \"--api-addr\" \"/data/data/com.termux/files/run/shm/sciond/sdX-10XX.sock\" .","title":"Changes to gen folder"},{"location":"install/android/#vpn-connection-to-scionlab","text":"Unfortunately, OpenVPN is not currently supported from within the Termux environment. Alternatively, the Open VPN app can be installed to connect to SCIONLab via VPN. The client.conf file that is provided by the SCIONLab coordinator needs to be renamed to client.ovpn before it can be imported into the app. Additionally, the line route 10.0.8.0/24 needs to be added to the file.","title":"VPN Connection to SCIONLab"},{"location":"install/android/#endhost-configuration-vs-full-as","text":"It is possible to run the full SCION on Android, it is, however, currently not recommended. The full SCION requires a Zookeeper instance which itself is a Java program. While it is possible to install a Java Virtual Machine in Termux, the actual Termux packages have been disabled or removed due to instabilities with high CPU usage. If you still want to try the full SCION on an Android phone, we suggest to use a remote Zookeeper instance running on another device and configuring the own SCION topology accordingly.","title":"Endhost configuration vs. full AS"},{"location":"install/pkg/","text":"Install with a Package Manager SCION Services Prebuilt SCION packages are available for Ubuntu (or other Debian based systems) for x86, x86-64, arm32 and arm64 platforms. You can install SCION from our .deb -packages by running: sudo apt-get install apt-transport-https echo deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main | sudo tee /etc/apt/sources.list.d/scionlab.list sudo apt-get update sudo apt-get install scionlab This will install all the SCION services (which come as individual packages), systemd unit files to run the services as well as a helper script to install the SCION configuration generated by the SCIONLab coordination website. Configuration After creating or modifying your AS in the SCIONLab coordination website, you can deploy the generated configuration to your machine. For this, the recommended approach is to simply run the scionlab-config script that is included in the scionlab package. scionlab-config This script allows to conveniently fetch and install the configuration for your AS from the SCIONLab website. sudo scionlab-config --host-id = ... --host-secret = ... The required host-id and host-secret will be displayed on the SCIONLab website. The script will (re-)start all the configured services (and OpenVPN client, if configured). The host-id and host-secret information will be stored in /etc/scion/gen/scionlab-config.json and will not have to be entered again. To update the configuration after modifying your AS, simply run sudo scionlab-config Run scionlab-config --force to get the configuration even if the SCIONLab coordination website thinks you're running the latest version, e.g. in case you've locally modified your configuration and want it to be reset. Note The SCION services will be run as user scion . The configuration files for the SCION services are kept in /etc/scion/ , log files will be placed in /var/log/scion/ , and state (sqlite db-files) will be placed in /var/run/scion/ . Unpack configuration manually As an alternative to running scionlab-config , you can manually download the configuration tarfile from the SCIONLab website and unpack it. Download the configuration tarfile from the SCIONLab coordination website. If using VPN, extract the client.conf to /etc/openvpn/ and (re-)start OpenVPN 1 sudo systemctl restart openvpn@client Extract the gen/ subdirectory to /etc/scion/ Enable the systemd units listed in scionlab-services.txt and restart SCION: 1 2 3 4 5 6 7 8 9 10 # Stop SCION and disable services referring to old configuration sudo systemctl stop scionlab.target sudo rm /etc/systemd/system/scionlab.target.wants/* sudo systemctl daemon-reload # Enable each unit listed in the scionlab-services.txt file while read line ; do sudo systemctl enable $line done lt ; scionlab-services.txt # Start SCION sudo systemctl start scionlab.target Running SCION If using VPN, ensure that the OpenVPN-client is up before starting the SCION services. sudo systemctl start openvpn@client Check that the expected tun0 tunnel-interface is created before continuing. Please refer to corresponding troubleshooting page. The SCION services are configured as systemd -units that are controlled by the target scionlab.target . To start all the configured SCION services, simply run sudo systemctl start scionlab.target Check the status of the SCION services using sudo systemctl list-dependencies scionlab.target To stop the services, run sudo systemctl stop scionlab.target Find the log files of the SCION services in /var/log/scion/ . Applications Most of our applications in scion-apps are available as packages too. Assuming you've added the SCIONLab packages list above, to install all applications in one go simply run sudo apt-get install scion-apps-* or install them individually, e.g. for bwtester sudo apt-get install scion-apps-bwtester","title":"Install with a Package Manager"},{"location":"install/pkg/#install-with-a-package-manager","text":"","title":"Install with a Package Manager"},{"location":"install/pkg/#scion-services","text":"Prebuilt SCION packages are available for Ubuntu (or other Debian based systems) for x86, x86-64, arm32 and arm64 platforms. You can install SCION from our .deb -packages by running: sudo apt-get install apt-transport-https echo deb [trusted=yes] https://packages.netsec.inf.ethz.ch/debian all main | sudo tee /etc/apt/sources.list.d/scionlab.list sudo apt-get update sudo apt-get install scionlab This will install all the SCION services (which come as individual packages), systemd unit files to run the services as well as a helper script to install the SCION configuration generated by the SCIONLab coordination website.","title":"SCION Services"},{"location":"install/pkg/#configuration","text":"After creating or modifying your AS in the SCIONLab coordination website, you can deploy the generated configuration to your machine. For this, the recommended approach is to simply run the scionlab-config script that is included in the scionlab package.","title":"Configuration"},{"location":"install/pkg/#scionlab-config","text":"This script allows to conveniently fetch and install the configuration for your AS from the SCIONLab website. sudo scionlab-config --host-id = ... --host-secret = ... The required host-id and host-secret will be displayed on the SCIONLab website. The script will (re-)start all the configured services (and OpenVPN client, if configured). The host-id and host-secret information will be stored in /etc/scion/gen/scionlab-config.json and will not have to be entered again. To update the configuration after modifying your AS, simply run sudo scionlab-config Run scionlab-config --force to get the configuration even if the SCIONLab coordination website thinks you're running the latest version, e.g. in case you've locally modified your configuration and want it to be reset. Note The SCION services will be run as user scion . The configuration files for the SCION services are kept in /etc/scion/ , log files will be placed in /var/log/scion/ , and state (sqlite db-files) will be placed in /var/run/scion/ .","title":"scionlab-config"},{"location":"install/pkg/#unpack-configuration-manually","text":"As an alternative to running scionlab-config , you can manually download the configuration tarfile from the SCIONLab website and unpack it. Download the configuration tarfile from the SCIONLab coordination website. If using VPN, extract the client.conf to /etc/openvpn/ and (re-)start OpenVPN 1 sudo systemctl restart openvpn@client Extract the gen/ subdirectory to /etc/scion/ Enable the systemd units listed in scionlab-services.txt and restart SCION: 1 2 3 4 5 6 7 8 9 10 # Stop SCION and disable services referring to old configuration sudo systemctl stop scionlab.target sudo rm /etc/systemd/system/scionlab.target.wants/* sudo systemctl daemon-reload # Enable each unit listed in the scionlab-services.txt file while read line ; do sudo systemctl enable $line done lt ; scionlab-services.txt # Start SCION sudo systemctl start scionlab.target","title":"Unpack configuration manually"},{"location":"install/pkg/#running-scion","text":"If using VPN, ensure that the OpenVPN-client is up before starting the SCION services. sudo systemctl start openvpn@client Check that the expected tun0 tunnel-interface is created before continuing. Please refer to corresponding troubleshooting page. The SCION services are configured as systemd -units that are controlled by the target scionlab.target . To start all the configured SCION services, simply run sudo systemctl start scionlab.target Check the status of the SCION services using sudo systemctl list-dependencies scionlab.target To stop the services, run sudo systemctl stop scionlab.target Find the log files of the SCION services in /var/log/scion/ .","title":"Running SCION"},{"location":"install/pkg/#applications","text":"Most of our applications in scion-apps are available as packages too. Assuming you've added the SCIONLab packages list above, to install all applications in one go simply run sudo apt-get install scion-apps-* or install them individually, e.g. for bwtester sudo apt-get install scion-apps-bwtester","title":"Applications"},{"location":"install/src/","text":"Build from Sources If you're planning to make modifications to SCION implementation, you can build SCION from sources and run your SCIONLab AS with your own version of SCION. For developer's convenience, SCIONLab supports generating configurations that are compatible with the scripts and machinery intended to run SCION in a development environment. Building SCION from sources requires following a lengthy setup procedure and installing various development dependencies. The development setup is currently supported/documented for Ubuntu 16.04 only . It is possible to build SCION on other systems, but no guidance is provided. To keep it simple, just run Ubuntu 16.04 in a VM or container if you can't/don't want to set it up on your workstation. Please follow the instructions in the GitHub README to clone and build SCION. Note SCIONLab runs a version of SCION built from the branch scionlab in netsec-ethz/netsec-scion. This branch (intenionally) lags behind the scionproto/scion master. As there are still (rarely) breaking changes in the SCION protocol, running master may or may not be compatible with scionlab . Tip If you only want to develop applications using SCION, you may still rely on the convenience of our pre-built binary packages . The scion-apps repository contains examples for applications that run on top of SCION. Configuration After having managed to build SCION and after creating or modifying your AS in the SCIONLab coordination website, you can deploy the generated configuration to your machine. Download the configuration tarfile from the SCIONLab coordination website. If using VPN, unpack the client.conf to /etc/openvpn/ and start OpenVPN 1 sudo systemctl restart openvpn@client Extract the gen/ subdirectory to your $SC directory. Restart SCION 1 2 3 4 cd $SC scion.sh stop supervisor/supervisor.sh reload # necessary if supervisor.conf files changed scion.sh start Note The configuration installed with the scionlab-config script as used in the packaged installation , is not directly compatible with supervisord and the scion.sh machinery. Running SCION To build, start and stop SCION, use the scion.sh developer script, located in the SCION repository. cd $SC scion.sh start # Build and start SCION services scion.sh start nobuild # Start, without building scion.sh status # Lists failed SCION services scion.sh stop # Stop all SCION services The commands above are essentially a wrapper around supervisord. Alternatively, use the supervisor commands directly, using the supervisor/supervisor.sh helper script. cd $SC supervisor/supervisor.sh reload # Reload supervisord configuration supervisor/supervisor.sh status # Show status of all SCION services supervisor/supervisor.sh # Starts the supervisor shell","title":"Build from Sources"},{"location":"install/src/#build-from-sources","text":"If you're planning to make modifications to SCION implementation, you can build SCION from sources and run your SCIONLab AS with your own version of SCION. For developer's convenience, SCIONLab supports generating configurations that are compatible with the scripts and machinery intended to run SCION in a development environment. Building SCION from sources requires following a lengthy setup procedure and installing various development dependencies. The development setup is currently supported/documented for Ubuntu 16.04 only . It is possible to build SCION on other systems, but no guidance is provided. To keep it simple, just run Ubuntu 16.04 in a VM or container if you can't/don't want to set it up on your workstation. Please follow the instructions in the GitHub README to clone and build SCION. Note SCIONLab runs a version of SCION built from the branch scionlab in netsec-ethz/netsec-scion. This branch (intenionally) lags behind the scionproto/scion master. As there are still (rarely) breaking changes in the SCION protocol, running master may or may not be compatible with scionlab . Tip If you only want to develop applications using SCION, you may still rely on the convenience of our pre-built binary packages . The scion-apps repository contains examples for applications that run on top of SCION.","title":"Build from Sources"},{"location":"install/src/#configuration","text":"After having managed to build SCION and after creating or modifying your AS in the SCIONLab coordination website, you can deploy the generated configuration to your machine. Download the configuration tarfile from the SCIONLab coordination website. If using VPN, unpack the client.conf to /etc/openvpn/ and start OpenVPN 1 sudo systemctl restart openvpn@client Extract the gen/ subdirectory to your $SC directory. Restart SCION 1 2 3 4 cd $SC scion.sh stop supervisor/supervisor.sh reload # necessary if supervisor.conf files changed scion.sh start Note The configuration installed with the scionlab-config script as used in the packaged installation , is not directly compatible with supervisord and the scion.sh machinery.","title":"Configuration"},{"location":"install/src/#running-scion","text":"To build, start and stop SCION, use the scion.sh developer script, located in the SCION repository. cd $SC scion.sh start # Build and start SCION services scion.sh start nobuild # Start, without building scion.sh status # Lists failed SCION services scion.sh stop # Stop all SCION services The commands above are essentially a wrapper around supervisord. Alternatively, use the supervisor commands directly, using the supervisor/supervisor.sh helper script. cd $SC supervisor/supervisor.sh reload # Reload supervisord configuration supervisor/supervisor.sh status # Show status of all SCION services supervisor/supervisor.sh # Starts the supervisor shell","title":"Running SCION"},{"location":"install/vm/","text":"Run a VM Install Vagrant and Virtualbox If you choose to run a SCIONLab virtual machine, you'll only need to install Vagrant and VirtualBox . These are available for most platforms, including Linux, Windows and macOS. On recent Ubuntu or Debian systems, it may be enough to run sudo apt-get install vagrant virtualbox For other platforms, please consult the official installation instructions: Install Vagrant Install VirtualBox Using Vagrant to run the VM After creating your AS in the SCIONLab coordination website, you will be able to download a tarfile that includes a Vagrantfile which includes all that is needed to build your SCIONLab VM. Navigate your shell to the directory containing the Vagrantfile. Note that all vagrant commands always need to be run in this directory! To start your VM, run vagrant up When running your VM for the first time, this will download the Ubuntu base box and then install all the SCION packages and their dependencies. This will already start the services for your SCIONLab AS. Once the vagrant up command returns the prompt, you can connect to your VM to start exploring: vagrant ssh The directory containing the Vagrant file is synced with the VM where the files will appear in the /vagrant/ directory. This is a convenient way to share files between your host machine and your VM, and allows to move data both ways. To shutdown the VM, run vagrant halt To start it back up, just type vagrant up again. Finally, if you want to wipe your VM, e.g. to start fresh, run vagrant destroy . More information for vagrant commands can be found at: https://www.vagrantup.com/docs/cli Configuration As indicated above, the initial version of the configuration will automatically be provisioned. To update the configuration in an existing VM, the workflow is the same as when running an installation from packages ; connect to your running VM ( vagrant ssh ) and execute sudo scionlab-config Running SCION The SCION services are automatically started when the VM boots up. To interact with the SCION services, you can use the same tools as when running an installation from packages ; connect to your running VM ( vagrant ssh ) and use the systemd commands to start/stop the services sudo systemctl start scionlab.target # Start all SCION services sudo systemctl list-dependencies scionlab.target # Check the status sudo systemctl stop scionlab.target # Stop","title":"Run a VM"},{"location":"install/vm/#run-a-vm","text":"","title":"Run a VM"},{"location":"install/vm/#install-vagrant-and-virtualbox","text":"If you choose to run a SCIONLab virtual machine, you'll only need to install Vagrant and VirtualBox . These are available for most platforms, including Linux, Windows and macOS. On recent Ubuntu or Debian systems, it may be enough to run sudo apt-get install vagrant virtualbox For other platforms, please consult the official installation instructions: Install Vagrant Install VirtualBox","title":"Install Vagrant and Virtualbox"},{"location":"install/vm/#using-vagrant-to-run-the-vm","text":"After creating your AS in the SCIONLab coordination website, you will be able to download a tarfile that includes a Vagrantfile which includes all that is needed to build your SCIONLab VM. Navigate your shell to the directory containing the Vagrantfile. Note that all vagrant commands always need to be run in this directory! To start your VM, run vagrant up When running your VM for the first time, this will download the Ubuntu base box and then install all the SCION packages and their dependencies. This will already start the services for your SCIONLab AS. Once the vagrant up command returns the prompt, you can connect to your VM to start exploring: vagrant ssh The directory containing the Vagrant file is synced with the VM where the files will appear in the /vagrant/ directory. This is a convenient way to share files between your host machine and your VM, and allows to move data both ways. To shutdown the VM, run vagrant halt To start it back up, just type vagrant up again. Finally, if you want to wipe your VM, e.g. to start fresh, run vagrant destroy . More information for vagrant commands can be found at: https://www.vagrantup.com/docs/cli","title":"Using Vagrant to run the VM"},{"location":"install/vm/#configuration","text":"As indicated above, the initial version of the configuration will automatically be provisioned. To update the configuration in an existing VM, the workflow is the same as when running an installation from packages ; connect to your running VM ( vagrant ssh ) and execute sudo scionlab-config","title":"Configuration"},{"location":"install/vm/#running-scion","text":"The SCION services are automatically started when the VM boots up. To interact with the SCION services, you can use the same tools as when running an installation from packages ; connect to your running VM ( vagrant ssh ) and use the systemd commands to start/stop the services sudo systemctl start scionlab.target # Start all SCION services sudo systemctl list-dependencies scionlab.target # Check the status sudo systemctl stop scionlab.target # Stop","title":"Running SCION"},{"location":"tips/troubleshooting/","text":"FAQ and Troubleshooting This section answers some frequently asked questions and assists with troubleshooting for SCIONLab ASes. Virtual Machine The following relate to running a Vagrant Virtual Machine . Where is the Vagrantfile ? Go to the details page for your AS on SCIONLab and make sure that you've chosen the Installation Type \"Run in a Virtual Machine\". Download the configuration tarfile by clicking the Download Configuration link at the bottom. Extract the Vagrantfile vagrant up fails with \"Port 8000 is already in use\" The Vagrantfile that we create tries to forward TCP port 8000, mainly to conveniently allow running the SCIONLab webapp in the VM. The error occurs because another application (could also be another VM instance!) uses this port. Either stop the other application (find it using netstat -natp | grep 8000 ), or follow the instructions provided in the error message (see below) to change the forwarded port. $ vagrant up [ ... ] Vagrant cannot forward the specified ports on this VM, since they would collide with some other application that is already listening on these ports. The forwarded port to 8000 is already in use on the host machine. To fix this, modify your current project s Vagrantfile to use another port. Example, where 1234 would be replaced by a unique host port: config.vm.network :forwarded_port, guest: 8000 , host: 1234 [ ... ] Manage VMs without Vagrant If you've lost track of which VMs are running or lost your Vagrantfile s, you can use VirtualBox directly to interact with the VMs. Use the virtualbox GUI application. Use VBoxManage from the commandline, e.g. $ VBoxManage list runningvms SCIONLabVM-ffaa:1:15b { 1f4379a0-03e3-4efe-91e9-314e363b8d0f } $ VBoxManage controlvm SCIONLabVM-ffaa:1:15b poweroff $ VBoxManage list vms VPN The following relate to AS configured to use VPN . VPN connection fails Check the OpenVPN client log for specific information, using sudo journalctl -e -u openvpn . An unspecific timeout typically indicates that your behind a firewall that blocks UDP port 1194. Please contact your network administrators to unblock this port. Border Router fails to start If you see (e.g. that your border router did not start, it is likely that the border router was trying to start before the VPN tunnel interface was up. Simply try again; sudo systemctl start openvpn@client # ... wait a bit ... maybe check the status of the openvpn client sudo systemctl status openvpn@client ip address show dev tun0 sudo systemctl restart scionlab.target SCION Services The following are common issues or troubleshooting strategies for a SCION AS. Service fails to start Typically, this indicates a configuration error. If you've configured to use VPN, check the \"Border Router fails to start\" entry in the VPN section above. Inspect the logs of the failed services to find details. In case of multiple failures, fixing issues in the following order usually works best: dispatcher sciond border routers anything else Tip First clear the /var/log/scion/ directory and restart. This often helps to find the relevant log messages quicker. Not receiving beacons Log of the beacon server ( /var/logs/scion/bs*.log ) does not contain recent entries referring to Registered beacons . As at the time of writing there are certain failure modes of the border routers that are hard to diagnose and are fixed with a simple restart, first thing to try is to turn it off and on again: sudo systemctl restart scionlab.target Getting help If your stuck, don't hesitate to get in contact","title":"FAQ and Troubleshooting"},{"location":"tips/troubleshooting/#faq-and-troubleshooting","text":"This section answers some frequently asked questions and assists with troubleshooting for SCIONLab ASes.","title":"FAQ and Troubleshooting"},{"location":"tips/troubleshooting/#virtual-machine","text":"The following relate to running a Vagrant Virtual Machine .","title":"Virtual Machine"},{"location":"tips/troubleshooting/#where-is-the-vagrantfile","text":"Go to the details page for your AS on SCIONLab and make sure that you've chosen the Installation Type \"Run in a Virtual Machine\". Download the configuration tarfile by clicking the Download Configuration link at the bottom. Extract the Vagrantfile","title":"Where is the Vagrantfile?"},{"location":"tips/troubleshooting/#vagrant-up-fails-with-port-8000-is-already-in-use","text":"The Vagrantfile that we create tries to forward TCP port 8000, mainly to conveniently allow running the SCIONLab webapp in the VM. The error occurs because another application (could also be another VM instance!) uses this port. Either stop the other application (find it using netstat -natp | grep 8000 ), or follow the instructions provided in the error message (see below) to change the forwarded port. $ vagrant up [ ... ] Vagrant cannot forward the specified ports on this VM, since they would collide with some other application that is already listening on these ports. The forwarded port to 8000 is already in use on the host machine. To fix this, modify your current project s Vagrantfile to use another port. Example, where 1234 would be replaced by a unique host port: config.vm.network :forwarded_port, guest: 8000 , host: 1234 [ ... ]","title":"vagrant up fails with \"Port 8000 is already in use\""},{"location":"tips/troubleshooting/#manage-vms-without-vagrant","text":"If you've lost track of which VMs are running or lost your Vagrantfile s, you can use VirtualBox directly to interact with the VMs. Use the virtualbox GUI application. Use VBoxManage from the commandline, e.g. $ VBoxManage list runningvms SCIONLabVM-ffaa:1:15b { 1f4379a0-03e3-4efe-91e9-314e363b8d0f } $ VBoxManage controlvm SCIONLabVM-ffaa:1:15b poweroff $ VBoxManage list vms","title":"Manage VMs without Vagrant"},{"location":"tips/troubleshooting/#vpn","text":"The following relate to AS configured to use VPN .","title":"VPN"},{"location":"tips/troubleshooting/#vpn-connection-fails","text":"Check the OpenVPN client log for specific information, using sudo journalctl -e -u openvpn . An unspecific timeout typically indicates that your behind a firewall that blocks UDP port 1194. Please contact your network administrators to unblock this port.","title":"VPN connection fails"},{"location":"tips/troubleshooting/#border-router-fails-to-start","text":"If you see (e.g. that your border router did not start, it is likely that the border router was trying to start before the VPN tunnel interface was up. Simply try again; sudo systemctl start openvpn@client # ... wait a bit ... maybe check the status of the openvpn client sudo systemctl status openvpn@client ip address show dev tun0 sudo systemctl restart scionlab.target","title":"Border Router fails to start"},{"location":"tips/troubleshooting/#scion-services","text":"The following are common issues or troubleshooting strategies for a SCION AS.","title":"SCION Services"},{"location":"tips/troubleshooting/#service-fails-to-start","text":"Typically, this indicates a configuration error. If you've configured to use VPN, check the \"Border Router fails to start\" entry in the VPN section above. Inspect the logs of the failed services to find details. In case of multiple failures, fixing issues in the following order usually works best: dispatcher sciond border routers anything else Tip First clear the /var/log/scion/ directory and restart. This often helps to find the relevant log messages quicker.","title":"Service fails to start"},{"location":"tips/troubleshooting/#not-receiving-beacons","text":"Log of the beacon server ( /var/logs/scion/bs*.log ) does not contain recent entries referring to Registered beacons . As at the time of writing there are certain failure modes of the border routers that are hard to diagnose and are fixed with a simple restart, first thing to try is to turn it off and on again: sudo systemctl restart scionlab.target","title":"Not receiving beacons"},{"location":"tips/troubleshooting/#getting-help","text":"If your stuck, don't hesitate to get in contact","title":"Getting help"},{"location":"tips/wireshark/","text":"Adding Wireshark and Tshark SCION protocol dissector Introduction In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging of SCION protocol. You can read more on what protocol dissector does on Wireshark docs Prerequisites In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system. Tip Running Wireshark is recommended on machines with graphical interface. Install Wireshark In order to install Wireshark, follow installation guide on Wireshark website for your platform. Alternatively on Ubuntu system you can run following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark Install Tshark In case you want to install Tshark on Ubuntu simply run: sudo apt install tshark Step One - Finding plugin directory We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there. Wireshark From Help menu select About Wireshark and in newly opened window select Folders tab. There are paths to global and local plugin directory. In this tutorial we will use global plugin directory which is usually: /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6 Plugins from global plugin directory are available to all users, while local is only for currently running user. Tshark In order to find the directory where Tshark is loading plugins from we can run following command: tshark -G plugins Output will look something like this: opcua.so 1.1.0 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so irda.so 0.0.6 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so mate.so 1.0.0a dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so ... Examining output we can conclude that plugins are being loaded from /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ So we will use that for our plugin directory. Step Two - Adding plugin Wireshark/Tshark plugin is located in SCION project at tools/wireshark/scion.lua . It is necessary to download scion.lua file and place it in plugin directory acquired in previous step. In Ubuntu system this can be done with following command: sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua","title":"Adding Wireshark and Tshark SCION protocol dissector"},{"location":"tips/wireshark/#adding-wireshark-and-tshark-scion-protocol-dissector","text":"","title":"Adding Wireshark and Tshark SCION protocol dissector"},{"location":"tips/wireshark/#introduction","text":"In this tutorial we will add SCION protocol dissector in Wireshark and Tshark. This will allow easier an more intuitive debugging of SCION protocol. You can read more on what protocol dissector does on Wireshark docs","title":"Introduction"},{"location":"tips/wireshark/#prerequisites","text":"In order to continue this tutorial, we will assume that you already have Wireshark or Tshark installed on your system. Tip Running Wireshark is recommended on machines with graphical interface.","title":"Prerequisites"},{"location":"tips/wireshark/#install-wireshark","text":"In order to install Wireshark, follow installation guide on Wireshark website for your platform. Alternatively on Ubuntu system you can run following commands: sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install wireshark","title":"Install Wireshark"},{"location":"tips/wireshark/#install-tshark","text":"In case you want to install Tshark on Ubuntu simply run: sudo apt install tshark","title":"Install Tshark"},{"location":"tips/wireshark/#step-one-finding-plugin-directory","text":"We need to find directory in which Wireshark or Tshark are looking for plugins so we can place SCION plugin there.","title":"Step One - Finding plugin directory"},{"location":"tips/wireshark/#wireshark","text":"From Help menu select About Wireshark and in newly opened window select Folders tab. There are paths to global and local plugin directory. In this tutorial we will use global plugin directory which is usually: /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6 Plugins from global plugin directory are available to all users, while local is only for currently running user.","title":"Wireshark"},{"location":"tips/wireshark/#tshark","text":"In order to find the directory where Tshark is loading plugins from we can run following command: tshark -G plugins Output will look something like this: opcua.so 1.1.0 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/opcua.so irda.so 0.0.6 dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/irda.so mate.so 1.0.0a dissector /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/mate.so ... Examining output we can conclude that plugins are being loaded from /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ So we will use that for our plugin directory.","title":"Tshark"},{"location":"tips/wireshark/#step-two-adding-plugin","text":"Wireshark/Tshark plugin is located in SCION project at tools/wireshark/scion.lua . It is necessary to download scion.lua file and place it in plugin directory acquired in previous step. In Ubuntu system this can be done with following command: sudo wget -P /usr/lib/x86_64-linux-gnu/wireshark/plugins/2.2.6/ https://raw.githubusercontent.com/scionproto/scion/master/tools/wireshark/scion.lua","title":"Step Two - Adding plugin"}]}